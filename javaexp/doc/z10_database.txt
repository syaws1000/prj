# database 처리를 위한 java 학습 내용 계열화
1. sql 학습
2. class/object 기초
	1) 필드
	2) 생성자
	3) 메서드
	==> dto/vo 생성 패턴, 생성자 매개변수 처리
3. 배열/동적배열
	1) 정적 배열 int[] arr = {1000,2000,3000};
	2) 동적 배열 List<Emp> emp = new ArrayList<Emp>();	
4. object vs object 
	1) 1:1객체
	2) 1:다객체
	3) 상속 1단계/추상클래스/인터페이스 개념
5. 예외 처리:필수예외처리.
6. DAO(database access object) 설정 처리
	1) sql 만들어 수행하기
		- 어떤 값이 입력값인지 where, insert문, update, delete
		- 어떤 값이 출력값인지 select ***
		확인해서 입력값을 dao의 메서드의 매개변수로 처리 이에 필요한 dto 작성준비
			   출력값은 dao의 리턴값으로 이에 필요한 dao 작성준비	
	2) dto/vo 작성
	3) 메서드 선언 (리턴유형, 매개변수 처리)
		리턴유형에 따른 변수/객체 선언..
	4) pstmt 처리 및 입력값 처리
	5) rs(ResultSet)에서 VO할당.
7. jsp에서 연동하여 화면 처리..


# dao 기능 처리 개발 순서
1. 사용할 Dao 클래스 선언
2. sql 처리
	1) 입력값
	2) 출력값 
	SELECT * FROM EMP WHERE ENAME LIKE '%A%' AND JOB LIKE '%MAN%';

3. Dto, Vo 클래스 선언
	ename, job 받을 수 있는 객체 new Emp(ename, job);
	new Emp(........)
4. 기능메서드 추가
	1) sql에 내용에 따른 리턴유형, 매개변수 및 sql 선언, 리턴 객체 생성 선언.
		ex) emp 사원정보 처리
			사원정보를 사원명과 직책을 키워드로 검색된 내용 Emp sch에 두개 정보를 할당하고,
			이것을 where조건에 연결 처리, 결과 내용을 empList에 처리되는 내용.. 작성 예시..
		public List<Emp> getEmpList(Emp sch){
			List<Emp> empList = new ArrayList<Emp>();
			String sql = "SELECT * FROM EMP WHERE ENAME LIKE ? AND JOB LIKE ?";
			return empList
		}
	2) PreparedStatement 객체생성 : 연결객체로 선언된 내용을로 pstmt객체에 연동 처리..
			Connection con = DB.con() // 전날 만들어진 연결객체(Connection)를 리턴한 내용 처리..
			PreparedStatement pstmt = con.pareparedStatement(sql);  연결객체에서 psmt 객체를 전달해준다.
			
			pstmt.setString(1, "%"+sch.getEname()+"%); 위 sql 안에 있는 ? 에 매핑시킬 조건문의 들어갈 데이터
			pstmt.setString(2, "%"+sch.getJob()+"%);
	4) ResultSet rs = pstmt.executeQuery(); 		
		while(rs.next()){  // 행단위로 데이터가 있을 때까지 반복 처리 및 행단위로 이동
			empList.add(new Emp(rs.getInt("empno"), rs.getString("ename"),......));
			// 반복문을 통해서 행단위 안에 열에 해당하는 데이터를 컬럼명으로 가져와서 객체에 담고, 
			그 객체는 다시 empList에 있는 동적 배열에 담기어 진다..
		
		}
			
	5) 예외 처리..
# DB처리의 핵심 객체
1. 연결객체 :Connection
2. 대화객체 :PreparedStatement
3. 결과객체 :ResultSet(행/열단위로)		
		
		
		
		
		
		
		
		
		
		





			   
	