# 🌟 **[Java 실무 탐험대] 자바 생성자와 메서드의 마법**  
## 📚 학습 주제
**자바 생성자(Constructor)와 메서드(Method)의 개념과 활용을 이해하고, 실무에 적용 가능한 코드 구현 능력을 기른다.**

---

## 🧠 학습 체계 흐름 (Gagné + ARCS)


### ✅ 1. **주의 집중 끌기 & 학습 연결성 제공 (Gain Attention / A: Attention)**

🎬 **오프닝 질문**  
> "여러분이 직접 만든 로봇이 있다면, 전원을 켜자마자 무엇을 하게 만들고 싶나요?"

💬 **재미요소**  
- “로봇청소기 생성자! 생기자마자 청소부터?”  
- “우리 집 냉장고는 생성자 없이 메서드만 있어서 텅텅 비었어요 😂”

📌 **학습 연결 포인트**  
- “생성자는 객체가 태어나자마자 실행되는 **첫 번째 일**!”
- “메서드는 객체가 살아가며 **하는 일(기능)**!”

---

### ✅ 2. **학습 목표 제시 (Inform Learners of Objectives / R: Relevance)**

🎯 **오늘의 목표**  
- 생성자의 개념과 역할을 이해한다.  
- 매개변수가 있는 생성자를 활용해 다양한 객체를 생성할 수 있다.  
- 메서드를 정의하고, 객체의 동작을 구현한다.  
- 생성자와 메서드를 결합하여 실무적인 클래스 설계를 할 수 있다.

---

### ✅ 3. **선수 학습 상기 및 실생활 연결 (Stimulate Recall / R: Relevance)**

🔁 **이전 학습 복습 퀴즈**  
```java
int x = 5;
System.out.println(x);
```
> 객체 없이도 실행 가능한 이유는?

🌍 **실생활 연결**  
- "냉장고를 주문했더니, 문이 열려있었다?! 생성자가 없으면 준비가 안 된 상태!"  
- "메서드는 스마트폰의 앱처럼, 필요할 때 실행하는 동작이에요."

---

### ✅ 4. **핵심 개념 제시 (Present the Content / C: Confidence)**

🔑 **핵심 키워드 정리표 (암기법 포함)**  
| 개념 | 설명 | 기억 암기법 |
|------|------|-------------|
| `생성자(Constructor)` | 객체가 만들어질 때 자동 호출되는 메서드 | "태어날 때 주사 맞기 = 생성자!" |
| `기본 생성자` | 매개변수 없는 생성자 | "기본이라 아무것도 안 넣어요~" |
| `매개변수 생성자` | 인자를 받아 초기화하는 생성자 | "이름표 달고 태어나기!" |
| `메서드(Method)` | 객체의 동작을 정의한 코드 블록 | "객체가 하는 일" |
| `this` | 현재 객체를 가리킴 | "나 자신! 나야 나!" |

---

### ✅ 5. **목표별 탐구형 활동 설계 (Provide Learning Guidance / R+C)**

🔍 **탐구 주제 1 - 생성자 만들기**
> 로봇 클래스에 생성자 만들기  
```java
class Robot {
    String name;
    Robot(String n) {
        name = n;
        System.out.println(name + " 로봇이 깨어났습니다!");
    }
}
```

🔍 **탐구 주제 2 - 메서드 활용하기**
> 로봇에 동작 추가하기  
```java
void move() {
    System.out.println(name + " 이동 중...");
}
```

🔍 **탐구 주제 3 - 실무적 객체 설계하기**
> 편의점 클래스 만들기 (생성자 + 메서드)

---

### ✅ 6. **실습 활동 & 협력 학습 유도 (Elicit Performance / A+S: Satisfaction)**

👨‍🔧 **실습 활동 - 내가 만든 세상**  
> 아래 조건에 맞는 객체를 생성하고 동작시켜보세요!

**[미션] 캐릭터 게임 클래스 만들기**
- 캐릭터명, 레벨을 받는 생성자
- `attack()`, `heal()` 메서드 구현
- 결과 출력

👭 **협력 학습**  
- 2~3인 팀을 구성해 **상호 피드백**
- 다른 팀 캐릭터와 배틀 시나리오 구성

---

### ✅ 7. **단계별 피드백 및 자기평가 (Provide Feedback / C)**

📝 **자기 평가 체크리스트**  
| 항목 | 체크 |
|------|------|
| 생성자와 메서드의 차이를 설명할 수 있다 | ☐ |
| 매개변수가 있는 생성자를 구현할 수 있다 | ☐ |
| 메서드에 매개변수와 리턴값을 적용해봤다 | ☐ |
| 팀 활동에서 서로의 코드를 이해하고 조언했다 | ☐ |

💬 **교사 피드백 예시**  
> "생성자와 메서드를 잘 조합했네요! 마치 게임 캐릭터처럼 생명력이 느껴져요!"

---

### ✅ 8. **수행평가 및 피드백 제공 (Assess Performance / C+S)**

📋 **수행평가 과제**  
> 다음 요구사항을 만족하는 `CoffeeMachine` 클래스를 구현하시오.

- 생성자에서 머신 이름과 커피양 초기화
- `brewCoffee()` 메서드로 커피 줄이기
- 커피가 부족하면 "리필 필요!" 출력

🗣️ **교사 개별 피드백 예시**  
> "이야~ 커피가 자동으로 나오는 기능까지! 객체지향 커피 머신이네요 ☕"

---

### ✅ 9. **학습 전이 & 실제 문제 적용 (Enhance Retention and Transfer)**

📌 **실무 연계 활동**  
- **택배 관리 시스템 클래스 설계**  
  - 택배 이름, 수신인, 상태값 생성자 처리  
  - 상태 변경 메서드 구현 (`deliver()`, `return()` 등)

💡 **자기 프로젝트 과제 제안**  
> “내가 자주 쓰는 물건을 클래스로 만들어 보세요! (ex. 스마트폰, 냉장고, 자동문)”

---

### ✅ 10. **학습 반성 및 향후 준비 (Reflection / S: Satisfaction)**

🧘 **오늘의 깨달음 한 줄 쓰기**
> “객체를 만드는 순간, 세상에 기능이 깃든다.”

📈 **다음 학습 연결 예고**
> “생성자와 메서드를 이용한 **클래스 간 협력 관계**, 객체 1:1, 1:N로 확장되는 실무 설계 기법 기대하세요!”

