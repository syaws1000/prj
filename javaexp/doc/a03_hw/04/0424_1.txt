1. 다음 중 JavaScript에서 **단일 행 주석(single-line comment)** 으로 올바른 것은 무엇인가?  
   A. `<!-- 주석 -->` html 
   #B. `// 주석`  java, javascript
   C. `/* 주석 */`  java, javascript, css
   D. `# 주석`  파이썬, 스프링 설정시
   	-- oracle DB

2. `alert("안녕하세요")` 와 `console.log("안녕하세요")` 의 차이로 옳지 않은 것은?  
   A. `alert` 은 브라우저 경고창을 띄운다.  
   B. `console.log` 는 개발자 도구 콘솔에 메시지를 출력한다. f12 console 메뉴에서 메시지 출력..  
   C. `alert` 은 반환값이 `undefined` 이다. 리턴값은 없다.. 
   				undefined 변수가 설정되지 않을 때, 호출할 때 나오는 에러메시지..  
   #D. `console.log` 는 사용자에게 팝업 경고창을 띄운다.  

3. 다음 코드의 실행 결과가 아닌 것은 무엇인가?  
   ```js
   console.log(5 + 3 * 2); 
   console.log((5 + 3) * 2);
   연산자 처리 우선 순위
   (), */, +-
   ```  
   A. `11`  
   B. `16`  
   #C. `13`  
   D. `16`  

4. JavaScript에서 나머지 연산자 `%` 의 기능으로 옳은 것은?
	10%3 ==> 1,  몫은 3, 나머지는 1
	반복문에서 반복적인 데이터 처리시 조건문으로 많이 사용된다.
	if(cnt%2 == 0){  
		짝일 때, 처리할 내용
	}else{
		홀일 때, 처리할 내용
	}
   A. 나누기 연산 결과를 반환  
   #B. 나머지 값을 반환  
   C. 몫을 반환  
   D. 피제수와 제수의 합을 반환  

5. 다음 중 `typeof` 연산자의 반환값으로 **존재하지 않는** 것은?
	typeof를 통해서 javascript의 데이터 유형
	string, number, boolean, function, object  
   A. `"string"`  
   B. `"number"`  
   C. `"boolean"`  
   #D. `"character"`  js에서 단일 문자 유형 데이터가 사라졌다.  

6. `var` 로 선언된 변수의 특성이 아닌 것은?  
   A. 함수 단위 스코프를 가진다.  var로 전역변수와 지역변수를 선언하여 다르게 선언 될 수 있지만..
                           결국, 프로세스 단위로 결과값이 처리되어 전역/지역변수 의미가 없다.  
   #B. 블럭({}) 단위로 스코프가 제한된다.  
   C. 같은 이름으로 재선언할 수 있다.  
   D. 호이스팅이 발생한다.  

7. `let` 과 `var` 의 차이로 옳은 것은?  
   A. `let` 은 함수 스코프, `var` 는 블럭 스코프를 가진다.  
   #B. `let` 은 같은 스코프({})에서 재선언이 불가능하다.  엄격히 지역변수/전역변수 영역 구분하고, 재선언도 구분  
   C. `var` 은 블럭 스코프, `let` 은 함수 스코프를 가진다.  
   D. `let` 과 `var` 는 완전히 동일한 동작을 한다.  

8. 다음 코드가 수행하는 동작으로 옳은 것은?  
   ```js
   document.body.innerHTML = "<h1>Hello</h1>";
   ```  
   DOM(document object model)
   웹 화면을 document(문서)로 인식하여 그 안에 있는 태그들을 객체적으로 활용하여 여러가지 동적인 처리를
   하는 것을 말한다.
   그래서 body로 document의 객체로 그 객체가 가지고 있는 innerHTML이라는 태그를 랜더링(해석하여 태그의 고유
   기능에따라 보여줌)하는 속성을 말하는 데, 그 속성값으로 html태그가 선언된 문자열을 할당하면,
   처리되어 출력한다.
   
   
   #A. `<body>` 태그 내의 기존 콘텐츠를 대체하고 “Hello”를 큰 제목으로 출력  
   B. 콘솔에 “Hello” 를 출력  
   C. 브라우저 경고창에 “Hello” 를 표시  
   D. 자바스크립트 오류를 발생  

9. JavaScript의 기본 데이터 유형이 아닌 것은?  
   A. `string`  
   B. `number`  
   #C. `array` js에서 배열도 객체(object)유형으로 분류된다.  
   D. `boolean`  

10. 다음 중 **객체형(object)** 에 해당하지 않는 예는?  
    A. `{ name: "홍길동", age: 25 }` object(json)  
    #B. `function() { return 1; }` ==> function  
    C. `[1, 2, 3]`  object
    #D. `"Hello"`  ==> string 

11. Java에서 `public`, `protected`, `default`, `private` 중 **같은 패키지 내에서만 접근 가능한** 접근 제어자는?  
    A. `public`  
    B. `protected`  
    #C. `default`  
    D. `private` 
    
    class 선언과 객체생성, 구성요소
    1. public class Person{}
    	==> Person p01;  객체유형으로 선언될 때, class 앞에 public일 때만 다른 패키지에서도
    				     선언이 가능하다. public이 없으면 같은 패키지에서만 선언할 수 있다.
    2. public Person(){} 
    	==> p01 = new Person();  생성자를 통해서 객체 생성할 때, public/default가 구분되어
    					외부패키지와 같은 패키지내에서 선언을 구분하고 있다.
    3. private String name;
    	==> p01.name;     필드를 접근할 때, private/default/public으로 해당 접근의 유형에 따라
    					클래스 내부에서만 사용하는지 같은 패키지에서만 사용하는지 외부패키지에서 호출가능하지를
    					구분하고 있다.

12. Java의 캡슐화(encapsulation) 개념과 가장 거리가 먼 설명은?  
    A. 클래스 내부 구현을 외부에서 숨긴다.  
    B. 잘못된 데이터 접근을 방지한다.  
    #C. 모든 필드를 `public` 으로 선언한다.  public, proctected, x(default), private 선언이 다
    								가능하나, 일반적일 필드는 private로 선언하여 사용한다.
    D. `getter`/`setter` 로 접근을 제어한다.  

13. 다음 중 VO(Value Object) 클래스로 올바르게 설계된 것은?  
    #A. 필드를 모두 `private` 으로 선언하고 `getter`/`setter` 를 제공   public으로 기능메서드에 의해서
    							읽기/쓰기를 처리하고 있다.
    B. 필드를 모두 `public` 으로 선언하고 직접 접근  
    C. 메서드 없이 필드만 선언  
    D. 생성자를 정의하지 않는다.  

14. 다음 코드에서 `pirate.treasure` 에 접근할 수 없는 이유는?  
    ```java
    class Pirate {
        private int treasure = 100;
    }
    // 다른 패키지의 코드
    Pirate pirate = new Pirate();
    System.out.println(pirate.treasure);
    ```  
    A. `treasure` 가 `public` 이라서  
    B. `treasure` 가 `protected` 라서  
    C. `treasure` 가 `default` 라서  
    #D. `treasure` 가 `private` 라서 
    private 는 클래스 안에서만 사용하고, 외부에서 객체생성해서 참조형(pirate.treasure)으로 사용해서
    호출이 불가능 하다.  

15. Java에서 **다른 패키지에서도 자유롭게 접근할 수 있는** 접근 제어자는?  
    A. `private`  
    B. (default)  
    C. `protected`  
    #D. `public`   단, import를 통해서 해당 객체를 class 선언위에 선언이 되어야 한다.  
    
    




아래는 15문제에 대한 **정답**과 간단한 **풀이**입니다.

1. 정답: **B**  
   풀이: JavaScript의 한줄 주석은 `// 주석` 형태로 작성합니다.

2. 정답: **D**  
   풀이: `console.log`는 개발자 도구의 콘솔에 출력할 뿐, 팝업 경고창(alert)을 띄우지 않습니다.

3. 정답: **C**  
   풀이:  
   - `5 + 3 * 2` → `5 + (3*2) = 11`  
   - `(5 + 3) * 2` → `8 * 2 = 16`  
   따라서 결과로 **13**은 절대 나오지 않습니다.

4. 정답: **B**  
   풀이: `%` 연산자는 나머지 값을 반환합니다.

5. 정답: **D**  
   풀이: `typeof` 연산자가 반환할 수 있는 문자열은 `"string"`, `"number"`, `"boolean"`, `"undefined"`, `"object"`, `"function"` 등이 있으며, `"character"`는 없습니다.

6. 정답: **B**  
   풀이: `var`는 **함수(function) 단위로만** 스코프가 결정되고, 블럭({}) 단위 스코프를 갖지 않습니다.

7. 정답: **B**  
   풀이: `let`은 동일한 스코프 안에서 같은 이름으로 **재선언이 불가능**하지만, `var`는 재선언이 가능합니다.

8. 정답: **A**  
   풀이: `document.body.innerHTML = "<h1>Hello</h1>";` 은 `<body>` 내부 콘텐츠를 모두 대체하고 `<h1>Hello</h1>` 을 출력합니다.

9. 정답: **C**  
   풀이: JavaScript의 기본(primitive) 타입은 `string`, `number`, `boolean`, `undefined`, `symbol`, `bigint` 등이 있고, `array`는 객체(object) 타입입니다.

10. 정답: **D**  
    풀이:  
    - `{…}`, `function(){}`, `[...]` 모두 객체형(`object` 또는 `function`)로 취급됩니다.  
    - `"Hello"` 만 순수 문자열(`string`) 타입입니다.

11. 정답: **C**  
    풀이: 접근 제어자 중 **default**(아무 수식어 없는 것)는 동일 패키지 내에서만 접근이 허용됩니다.

12. 정답: **C**  
    풀이: 캡슐화(encapsulation)는 **외부 노출을 최소화**하기 위해 존재하는데, 모든 필드를 `public`으로 선언하면 캡슐화 원칙에 어긋납니다.

13. 정답: **A**  
    풀이: VO 클래스는 보통 **모든 필드를 `private`**으로 선언하고, `getter`/`setter`를 통해 접근을 제어합니다.

14. 정답: **D**  
    풀이: `pirate.treasure` 필드는 `private`으로 선언되어 있어, 외부(특히 다른 패키지)는 접근할 수 없습니다.

15. 정답: **D**  
    풀이: `public` 접근 제어자는 **모든 패키지**에서 자유롭게 접근할 수 있습니다.
    