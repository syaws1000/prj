## ✅ 주관식 개념 정리 문제 10문제

1. `while`문과 `do-while`문의 차이점을 설명하고, 각각 어떤 상황에서 사용하는 것이 적절한지 서술하세요.

2. `Scanner` 클래스를 사용할 때, 입력을 받기 위한 객체 생성 방법과 주의할 점을 설명하세요.

3. `break`와 `continue`의 차이를 설명하고, 각각의 대표적인 사용 예시를 들어보세요.

4. 자바에서 객체(Object)와 클래스(Class)의 관계를 설명하고, 객체 생성의 기본 문법을 작성해보세요.

5. 메서드에 매개변수를 사용하는 이유와 그 장점을 설명하세요. 예시 메서드와 함께 서술해보세요.

6. 리턴값이 있는 메서드와 없는 메서드의 차이를 설명하고, 각각의 사용 예를 들어보세요.

7. `String` 타입 데이터를 비교할 때 `==` 대신 `equals()`를 사용하는 이유를 설명하세요.

8. `Math.random()`의 반환값 범위와 정수 범위를 만드는 공식은 어떻게 되는지 서술하세요.

9. 메서드 내에서 `return` 키워드의 역할과 사용 조건을 설명하세요.

10. 자바 메서드에서 여러 개의 값을 매개변수로 전달할 때 유의해야 할 사항은 무엇인가요?

---

## ✅ 확인용 예제 문제 5문제 (문제만)

1. **🛍️ 쇼핑 계산기 만들기**  
   - 물건명, 가격, 수량을 사용자에게 입력받아 총 금액을 출력하는 프로그램을 작성하세요. (입력: Scanner 사용)

2. **🍎 과일 등록기**  
   - `while`문을 사용해 과일 이름을 반복 입력받고, 입력값이 "Y"이면 종료하세요. 그 외에는 입력한 과일명을 출력하세요.

3. **🎲 주사위 시뮬레이터 함수 만들기**  
   - `Math.random()`을 사용해 1~6 사이의 숫자를 생성하는 `int` 리턴 함수를 작성하세요.

4. **📐 직사각형 면적 계산 함수**  
   - 두 개의 정수형 매개변수를 받아 직사각형의 면적을 출력하는 메서드를 작성하세요.

5. **📢 인사 메시지 함수**  
   - 매개변수 없이 "오늘도 좋은 날입니다!"를 3번 출력하는 메서드를 작성하세요.




## ✅ 주관식 개념 정리 문제 – 풀이 및 예시

---

### 1. `while`문과 `do-while`문의 차이점

- `while`: **조건을 먼저** 검사 → 조건이 참일 때만 반복
- `do-while`: **조건을 나중에** 검사 → 조건이 거짓이라도 최소 1번은 실행됨

**사용 상황 예시**  
- `while`: 조건을 먼저 판단해야 할 때  
- `do-while`: 사용자에게 입력을 반드시 **최소 1번** 받게 해야 할 때

---

### 2. `Scanner` 객체 생성 방법과 주의점

```java
Scanner sc = new Scanner(System.in);
```

**주의할 점**:  
- `nextInt()` 같은 숫자 입력 후 `nextLine()`을 바로 쓰면 **개행문자(Enter)** 때문에 문자열 입력이 스킵될 수 있음  
→ `sc.nextLine();`을 중간에 한 번 넣어야 안전

---

### 3. `break` vs `continue`

- `break`: 반복문 **즉시 종료**
- `continue`: **이번 반복만 건너뛰고**, 다음 반복 실행

**예시**:
```java
for(int i=1; i<=5; i++) {
  if(i==3) continue;
  System.out.print(i + " ");
}
// 출력: 1 2 4 5
```

---

### 4. 클래스와 객체의 관계 및 객체 생성

- **클래스**: 객체의 설계도
- **객체**: 클래스를 기반으로 생성된 실체 (메모리에 할당됨)

**문법 예시**:
```java
class Car {
  String brand = "Hyundai";
}
Car myCar = new Car(); // 객체 생성
System.out.println(myCar.brand);
```

---

### 5. 메서드의 매개변수 사용 이유와 장점

- 메서드를 **유연하게 재사용**할 수 있음
- 입력 값에 따라 다른 동작 수행 가능

**예시**:
```java
void greet(String name) {
  System.out.println("안녕하세요 " + name + "님!");
}
```

---

### 6. 리턴값이 있는 메서드와 없는 메서드

- **리턴값 없음 (`void`)**: 결과를 외부에 반환하지 않음
- **리턴값 있음**: 메서드 실행 후 결과를 호출한 곳에 반환함

**예시**:
```java
void printHello() { System.out.println("Hello"); }

int getNum() { return 5; }
```

---

### 7. `==` 대신 `equals()`를 사용하는 이유

- `==` → **주소값(참조값)** 비교  
- `equals()` → **문자열의 내용** 비교

**예시**:
```java
String a = new String("hello");
String b = new String("hello");

System.out.println(a == b);        // false (주소 다름)
System.out.println(a.equals(b));   // true (내용 같음)
```

---

### 8. `Math.random()`의 반환 범위 및 정수 생성 공식

- 반환 범위: **0.0 이상, 1.0 미만**
- 정수 생성 공식:  
  ```java
  int num = (int)(Math.random() * N) + start;
  ```

**예: 1~6 주사위**
```java
int dice = (int)(Math.random() * 6) + 1;
```

---

### 9. `return` 키워드의 역할

- 메서드 실행 결과를 **호출한 곳에 반환**
- `void`가 아닌 메서드는 반드시 `return` 필요

**예시**:
```java
int add(int a, int b) {
  return a + b;
}
```

---

### 10. 여러 매개변수 전달 시 주의할 점

- 매개변수의 **개수**, **순서**, **자료형**을 정확히 맞춰야 함

**예시**:
```java
void info(String name, int age) {
  System.out.println(name + "의 나이는 " + age + "입니다.");
}
info("민수", 25); // OK
info(25, "민수"); // 에러
```

---

## ✅ 확인용 예제 문제 – 풀이 코드

---

### 1. 🛍️ 쇼핑 계산기 만들기

```java
import java.util.Scanner;

public class Shopping {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.print("물건명 입력: ");
        String item = sc.nextLine();

        System.out.print("가격 입력: ");
        int price = sc.nextInt();

        System.out.print("수량 입력: ");
        int qty = sc.nextInt();

        int total = price * qty;
        System.out.println("총 금액: " + total + "원");
    }
}
```

---

### 2. 🍎 과일 등록기 (종료 조건 "Y")

```java
import java.util.Scanner;

public class FruitRegister {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String input = "";

        while (!input.equals("Y")) {
            System.out.print("과일 이름 입력 (종료: Y): ");
            input = sc.nextLine();
            if (!input.equals("Y")) {
                System.out.println("입력한 과일: " + input);
            }
        }

        System.out.println("입력 종료!");
    }
}
```

---

### 3. 🎲 주사위 시뮬레이터 함수

```java
public class Dice {
    static int rollDice() {
        return (int)(Math.random() * 6) + 1;
    }

    public static void main(String[] args) {
        System.out.println("주사위 결과: " + rollDice());
    }
}
```

---

### 4. 📐 직사각형 면적 계산 함수

```java
public class Rectangle {
    static void printArea(int width, int height) {
        int area = width * height;
        System.out.println("면적: " + area);
    }

    public static void main(String[] args) {
        printArea(10, 5); // 출력: 면적: 50
    }
}
```

---

### 5. 📢 인사 메시지 함수

```java
public class Greeting {
    static void greet() {
        for (int i = 0; i < 3; i++) {
            System.out.println("오늘도 좋은 날입니다!");
        }
    }

    public static void main(String[] args) {
        greet();
    }
}
```


