## ✅ [1] 주관식 개념 정리 문제 (총 10문제)

### 🔷 Oracle SQL (5문제)

1. **Oracle SQL의 `UPPER()` 함수는 어떤 경우에 사용되며, 실제 예제를 하나 설명하시오.**

2. **`GROUP BY` 절과 `HAVING` 절의 차이를 설명하고, 각각이 어떤 경우에 사용되는지 서술하시오.**

3. **`AVG()` 함수와 `SUM()` 함수의 차이를 설명하시오. 각각 어떤 상황에서 사용되는지 예를 들어 설명하세요.**

4. **문자열 함수 `SUBSTR()`의 기본 문법을 설명하고, 이름에서 성을 추출하는 예를 작성하시오.**

5. **날짜 함수 `MAX(HIREDATE)`와 `MIN(HIREDATE)`의 차이점을 설명하고, 어떤 업무에 활용할 수 있을지 쓰시오.**

---

### 🔷 Java (5문제)

6. **클래스에서 메서드가 리턴값을 가지는 이유는 무엇인가요? 그 리턴값은 어디에서 사용되나요?**

7. **다음 코드에서 `this.speed += speed;`가 의미하는 바를 설명하시오. 왜 `this`를 사용하는지 함께 쓰세요.**

8. **메서드에서 매개변수를 사용하는 이유를 설명하고, 매개변수가 없는 메서드와 비교하여 그 차이점을 설명하세요.**

9. **객체 생성 시 생성자(Constructor)의 역할을 설명하고, 기본 생성자와 매개변수 생성자의 차이를 예를 들어 서술하시오.**

10. **Java에서 `int getCurSpeed()` 와 같은 메서드의 역할은 무엇인가요? 호출한 곳에서 이 메서드를 어떻게 활용할 수 있는지 설명하세요.**

---

## ✅ [2] 재미있는 이야기 기반 실습 문제 (총 10문제, 예제만 문제 형식)

### 🔷 Oracle SQL (5문제)

1. 🧙 **마법 도서관 대출 통계**  
   - `borrow_records` 테이블을 만들고, 마법사별 대출 횟수, 가장 오래된 대출일과 최신 대출일을 출력하세요.

2. 🧪 **해그리드의 마법약 실험**  
   - `potion_tests` 테이블에서 실험자별 평균 성공률과 최소 성공률을 출력하고, 성공률이 70% 이상인 실험자만 출력하세요.

3. 🧹 **빗자루 배송 통계**  
   - `broom_orders` 테이블을 만들고, 제품별 배송 횟수와 평균 배송 속도를 출력하세요. 단, 평균이 150 이상인 제품만 필터링하세요.

4. 🦉 **부엉이 우편 발송 내역**  
   - `owl_mails` 테이블을 기준으로 마법사별 발송 횟수와 총 발송 건수를 출력하세요. WHERE절과 HAVING절의 차이를 적용해보세요.

5. 🏆 **기숙사별 마법 시합 통계**  
   - `house_matches` 테이블에서 기숙사별 경기수, 최고 점수, 평균 점수를 출력하세요. 단, 평균 점수가 50 이상인 기숙사만 출력되도록 하세요.

---

### 🔷 Java (5문제)

6. 🚗 **마법 자동차 속도 측정기**  
   - `MagicCar` 클래스를 생성하고, 초기 속도를 할당한 뒤 여러 번 `speedUp()`을 호출하여 최종 속도를 `getCurrentSpeed()`로 출력하세요.

7. 🏦 **그림자 은행 통장 클래스 만들기**  
   - `ShadowBankAccount` 클래스를 만들어 초기 예금, 추가 입금 기능을 구현하고, `getBalance()`로 최종 잔액을 출력하세요.

8. 🧙‍♂️ **마법사의 체력 관리 프로그램**  
   - `Wizard` 클래스를 만들고, `attack()`과 `usePotion()` 메서드를 통해 체력을 감소/회복시키고, 현재 체력을 리턴하는 `getHp()` 메서드를 만드세요.

9. 🪄 **마법지팡이 에너지 관리 시스템**  
   - `Wand` 클래스를 생성하고, 초기 에너지를 설정 후 마법 사용 시 에너지를 감소시키며, 현재 에너지를 리턴하는 기능을 구현하세요.

10. 🏰 **기숙사 점수 관리 클래스**  
   - `HousePointManager` 클래스를 정의하고, `addPoints()`, `subtractPoints()` 메서드로 점수 변경 후, `getCurrentPoints()`로 최종 점수를 출력하는 프로그램을 만드세요.




## ✅ [1] 주관식 개념 정리 문제 – 정답 및 풀이

### 🔷 Oracle SQL

1. **`UPPER()` 함수는 어떤 경우에 사용되나요?**

   ✅ **정답**: 문자열을 모두 대문자로 변환할 때 사용  
   ✅ **예시**:
   ```sql
   SELECT UPPER('harry potter') FROM dual; -- 결과: HARRY POTTER
   ```

---

2. **`GROUP BY` vs `HAVING`**

   ✅ **정답**:  
   - `GROUP BY`: 그룹화 기준을 지정  
   - `HAVING`: 그룹화된 결과에 조건을 설정  
   ✅ **예시**:
   ```sql
   SELECT JOB, AVG(SAL)
   FROM EMP
   GROUP BY JOB
   HAVING AVG(SAL) > 2000;
   ```

---

3. **`AVG()` vs `SUM()`**

   ✅ **정답**:  
   - `AVG()`: 평균값 계산  
   - `SUM()`: 총합 계산  
   ✅ **예시**:
   ```sql
   SELECT SUM(SCORE), AVG(SCORE)
   FROM STUDENTS;
   ```

---

4. **`SUBSTR()` 함수 문법과 성 추출 예시**

   ✅ **정답**: `SUBSTR(문자열, 시작위치, 길이)`  
   ✅ **예시**:
   ```sql
   SELECT SUBSTR('Harry Potter', 1, 5) FROM dual; -- 결과: Harry
   ```

---

5. **`MIN(HIREDATE)` vs `MAX(HIREDATE)`**

   ✅ **정답**:  
   - `MIN()`은 가장 오래된 날짜  
   - `MAX()`는 가장 최근 날짜  
   ✅ **활용**: 사원 중 가장 오래 근무한 사람 또는 최근 입사자 찾기

---

### 🔷 Java

6. **메서드 리턴값의 이유**

   ✅ **정답**: 메서드의 실행 결과를 호출한 쪽으로 전달하여 이후 로직에서 활용할 수 있도록 함

---

7. **`this.speed += speed;` 의미**

   ✅ **정답**: 매개변수와 필드명이 같을 경우 `this`는 필드를 구분지어 사용함  
   ✅ **예시**: 클래스 내부의 `speed` 값에 매개변수로 받은 `speed`를 더함

---

8. **매개변수 사용 이유**

   ✅ **정답**: 외부에서 값을 전달받아 메서드 내부에서 처리 가능  
   ✅ **차이**:
   - 매개변수 있음: 다양하게 처리 가능  
   - 매개변수 없음: 고정된 작업만 수행

---

9. **생성자의 역할 및 기본 vs 매개변수 생성자**

   ✅ **정답**:
   - 생성자: 객체 초기화  
   - 기본 생성자: 매개변수 없음  
   - 매개변수 생성자: 초기값을 인자로 전달 가능  
   ✅ **예시**:
   ```java
   class Car {
     Car() {} // 기본
     Car(String model) { this.model = model; } // 매개변수 생성자
   }
   ```

---

10. **`int getCurSpeed()`의 역할**

   ✅ **정답**: 현재 속도 값을 반환(return)하는 메서드. 호출한 코드에서 `int speed = c1.getCurSpeed();`로 사용할 수 있음

---

## ✅ [2] 재미있는 이야기 기반 실습문제 – 풀이 예시

### 🔷 Oracle SQL

1. **마법 도서관 대출 통계**
   ```sql
   SELECT wizard_name, MIN(borrow_date), MAX(borrow_date)
   FROM borrow_records
   GROUP BY wizard_name;
   ```

2. **해그리드의 마법약 실험**
   ```sql
   SELECT tester, AVG(success_rate), MIN(success_rate)
   FROM potion_tests
   GROUP BY tester
   HAVING AVG(success_rate) >= 70;
   ```

3. **빗자루 배송 통계**
   ```sql
   SELECT product_name, COUNT(*), AVG(speed)
   FROM broom_orders
   GROUP BY product_name
   HAVING AVG(speed) >= 150;
   ```

4. **부엉이 우편 발송 내역**
   ```sql
   SELECT wizard_name, COUNT(*)
   FROM owl_mails
   WHERE wizard_name LIKE '%Potter%'
   GROUP BY wizard_name;
   ```

5. **기숙사별 마법 시합 통계**
   ```sql
   SELECT house_name, COUNT(*), MAX(score), AVG(score)
   FROM house_matches
   GROUP BY house_name
   HAVING AVG(score) >= 50;
   ```

---

### 🔷 Java

6. **마법 자동차 속도 측정기**
   ```java
   MagicCar mc = new MagicCar(20);
   mc.speedUp(10); mc.speedUp(30);
   System.out.println("최종 속도: " + mc.getCurrentSpeed());
   ```

7. **그림자 은행 통장 클래스 만들기**
   ```java
   ShadowBankAccount acc = new ShadowBankAccount(5000);
   acc.deposit(1000);
   System.out.println("잔액: " + acc.getBalance());
   ```

8. **마법사의 체력 관리 프로그램**
   ```java
   Wizard w = new Wizard("Luna", 100);
   w.attack(20); w.usePotion(30);
   System.out.println("현재 HP: " + w.getHp());
   ```

9. **마법지팡이 에너지 관리 시스템**
   ```java
   Wand w = new Wand(100);
   w.useMagic(40); System.out.println("에너지: " + w.getEnergy());
   ```

10. **기숙사 점수 관리 클래스**
   ```java
   HousePointManager hpm = new HousePointManager(100);
   hpm.addPoints(50); hpm.subtractPoints(20);
   System.out.println("최종 점수: " + hpm.getCurrentPoints());
   ```

---
