### **주관식 개념문제 10문제**

1. 기본 생성자와 오버로딩된 생성자의 차이를 설명하세요.
2. 생성자 오버로딩을 사용할 때 주의해야 할 점은 무엇인가요?
3. `DeliveryBot` 클래스에서 기본 생성자와 매개변수가 있는 생성자의 역할을 비교하시오.
4. `Movie` 클래스에서 기본 생성자와 매개변수가 있는 생성자를 추가할 때의 차이점은 무엇인가요?
5. 생성자 오버로딩을 할 때, 매개변수의 순서나 타입이 중요한 이유는 무엇인가요?
6. `House` 클래스에서 `House(int rooms)` 생성자와 `House(String color)` 생성자의 출력 차이를 설명하시오.
7. `PopcornShop` 클래스의 생성자 오버로딩 예제에서 출력되는 메시지의 차이를 설명하시오.
8. `HamBurger` 클래스에서 `printOrder` 메서드의 역할은 무엇인가요?
9. `Student` 클래스에서 두 생성자가 어떻게 다르게 작동하는지 설명하세요.
10. 생성자와 메서드의 차이점에 대해 설명하시오.

### **재미있는 실습문제 5문제**

1. **주문한 햄버거 정보 출력 프로그램**  
   `HamBurger` 클래스를 만들고, 여러 가지 햄버거(불고기버거, 치즈버거 등)를 생성한 후 `printOrder()` 메서드를 통해 주문한 햄버거 정보를 출력하세요.

2. **고양이 이름 등록 프로그램**  
   `Cat` 클래스를 만들어 이름이 없거나(기본 생성자), 이름을 가진 고양이를 생성하고, 고양이 이름을 출력하는 프로그램을 작성하세요.

3. **영화 정보 출력 프로그램**  
  `Movie` 클래스를 만들어 영화 제목과 감독을 입력받는 생성자와 기본 생성자를 추가하여, 제목과 감독을 출력하세요.
  
4. **이미지 갤러리 만들기**
   - **목표**: CSS Grid를 사용하여 이미지 갤러리 레이아웃을 만들어 보세요.
   - **요구사항**:
     - 이미지를 3열 레이아웃으로 배치하세요.
     - 각 이미지에 `hover` 효과를 적용하여, 마우스를 올리면 확대되거나 어두워지도록 만드세요.
     - `gap` 속성을 사용하여 각 이미지 간의 간격을 설정하세요.
     - 이미지를 클릭하면 새로운 페이지로 이동하도록 링크를 설정하세요.
5. **메뉴바 스타일링**
   - **목표**: 수평 메뉴바를 만들어 보세요.
   - **요구사항**:
     - `nav` 태그를 사용하여 메뉴 항목을 구성하세요.
     - 각 메뉴 항목은 `a` 태그로 링크가 걸려 있어야 합니다.
     - 메뉴 항목들은 `display: inline-block` 또는 `display: flex`를 사용하여 수평으로 배치하세요.
     - 메뉴 항목에 마우스를 올리면 색상이 바뀌는 `hover` 효과를 적용하세요.
     - 메뉴 항목에 `active` 상태를 설정하여, 현재 페이지가 어떤 메뉴인지 강조하세요.
     
 아래는 주관식 개념문제 10문제와 재미있는 실습문제 5문제에 대한 **풀이 및 해설**입니다.

---

## ✅ **주관식 개념문제 풀이**

1. **기본 생성자와 오버로딩된 생성자의 차이**
   - **기본 생성자**는 매개변수가 없는 생성자이며 객체 생성 시 자동으로 호출됩니다.
   - **오버로딩된 생성자**는 매개변수를 받아 특정 초기값으로 객체를 생성할 수 있게 합니다.

2. **생성자 오버로딩 시 주의할 점**
   - 매개변수의 **타입**, **개수**, **순서**가 달라야 합니다.
   - 생성자의 시그니처가 같으면 컴파일 오류가 발생합니다.

3. **`DeliveryBot` 클래스 생성자의 비교**
   - 기본 생성자: 아무 매개변수 없이 객체를 생성하며 기본값을 설정.
   - 매개변수 생성자: 전달된 값으로 객체 속성을 초기화.

4. **`Movie` 클래스 생성자 추가 차이**
   - 기본 생성자가 없으면 `new Movie()` 같은 호출이 불가.
   - 매개변수 생성자를 통해 객체에 제목과 감독 정보를 직접 전달 가능.

5. **생성자 오버로딩 시 매개변수 순서/타입 중요성**
   - 자바는 메서드 오버로딩을 시그니처로 판단합니다.
   - `Movie(String, int)` 와 `Movie(int, String)` 은 서로 다름 → 명확한 구분 가능.

6. **`House(int rooms)` vs `House(String color)`**
   - `House(int rooms)`: 방 개수 정보를 출력.
   - `House(String color)`: 색상 정보를 출력.
   - 생성자마다 다른 속성을 초기화함.

7. **`PopcornShop` 클래스 출력 메시지 차이**
   - 기본 생성자: "팝콘샵이 열렸습니다!"
   - 매개변수 생성자: “@@맛 팝콘샵이 열렸습니다!” 처럼 특정 정보를 포함.

8. **`HamBurger` 클래스의 `printOrder()` 메서드**
   - 객체 생성 시 저장된 정보를 출력하는 메서드.
   - 예: 햄버거 이름, 가격 등을 콘솔에 보여줌.

9. **`Student` 클래스의 생성자 작동 차이**
   - 기본 생성자: 이름과 나이 기본값으로 초기화.
   - 매개변수 생성자: 사용자가 원하는 값으로 초기화 가능.

10. **생성자 vs 메서드 차이**
   - 생성자: 객체를 초기화하며 `클래스명()`과 같은 이름.
   - 메서드: 객체의 동작을 수행하며 `리턴타입`과 이름이 필요함.

---

## ✅ **재미있는 실습문제 풀이 코드**

### 1. **🛍️ HamBurger 주문 정보 출력**
```java
class HamBurger {
    String name;
    int price;

    HamBurger() {
        name = "기본 햄버거";
        price = 3000;
    }

    HamBurger(String name, int price) {
        this.name = name;
        this.price = price;
    }

    void printOrder() {
        System.out.println("주문한 햄버거: " + name);
        System.out.println("가격: " + price + "원");
    }
}

public class Main {
    public static void main(String[] args) {
        HamBurger h1 = new HamBurger("불고기버거", 4500);
        HamBurger h2 = new HamBurger("치즈버거", 4000);
        h1.printOrder();
        h2.printOrder();
    }
}
```

---

### 2. **🐱 고양이 이름 등록 프로그램**
```java
class Cat {
    String name;

    Cat() {
        name = "이름 없는 고양이";
    }

    Cat(String name) {
        this.name = name;
    }

    void printName() {
        System.out.println("고양이 이름: " + name);
    }
}

public class Main {
    public static void main(String[] args) {
        Cat c1 = new Cat();
        Cat c2 = new Cat("나비");
        c1.printName();
        c2.printName();
    }
}
```

---

### 3. **🎬 Movie 정보 출력**
```java
class Movie {
    String title;
    String director;

    Movie() {
        title = "제목 없음";
        director = "감독 없음";
    }

    Movie(String title, String director) {
        this.title = title;
        this.director = director;
    }

    void printInfo() {
        System.out.println("영화 제목: " + title);
        System.out.println("감독: " + director);
    }
}

public class Main {
    public static void main(String[] args) {
        Movie m1 = new Movie("기생충", "봉준호");
        Movie m2 = new Movie();
        m1.printInfo();
        m2.printInfo();
    }
}
```

---

### 4. **🖼 이미지 갤러리 (CSS Grid 활용)**
```html
<style>
.gallery {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 15px;
}

.gallery img {
  width: 100%;
  transition: transform 0.3s, filter 0.3s;
}

.gallery img:hover {
  transform: scale(1.1);
  filter: brightness(80%);
}
</style>

<div class="gallery">
  <a href="page1.html"><img src="img1.jpg" alt="Image 1"></a>
  <a href="page2.html"><img src="img2.jpg" alt="Image 2"></a>
  <a href="page3.html"><img src="img3.jpg" alt="Image 3"></a>
</div>
```

---

### 5. **🧭 메뉴바 스타일링**
```html
<style>
nav {
  background: #333;
  padding: 10px;
  display: flex;
}

nav a {
  color: white;
  padding: 10px 20px;
  text-decoration: none;
  display: inline-block;
}

nav a:hover {
  background: #555;
}

nav a.active {
  background: orange;
}
</style>

<nav>
  <a href="home.html" class="active">Home</a>
  <a href="about.html">About</a>
  <a href="service.html">Service</a>
  <a href="contact.html">Contact</a>
</nav>
```

---
    