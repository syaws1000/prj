## 주관식 개념 문제 10문제:

1. **<jsp:useBean> 태그의 주요 목적은 무엇인가요?**
2. **<jsp:setProperty> 태그를 사용하여 객체의 속성을 설정할 때, property="*"의 의미는 무엇인가요?**
3. **JSP에서 request.getParameter("name")의 역할은 무엇인가요?**
4. **JSP에서 객체의 속성값을 EL(Expression Language)로 출력하는 방법에 대해 설명하세요.**
5. **<jsp:useBean>을 사용하여 객체를 생성할 때, scope 속성의 값으로 사용할 수 있는 값은 무엇이 있으며, 각 값이 의미하는 범위는 무엇인가요?**
6. **JSP에서 setProperty 태그로 요청값을 객체에 할당할 때, 객체의 속성에 대한 매칭 규칙은 무엇인가요?**
7. **<jsp:useBean>을 사용할 때, 객체가 이미 존재하는 경우 이를 어떻게 활용할 수 있나요?**
8. **JSP에서 useBean과 session 스코프를 사용할 때의 차이점에 대해 설명하세요.**
9. **JSP 페이지에서 useBean을 사용하여 객체를 설정할 때, 객체가 null일 경우 어떻게 처리되나요?**
10. **JSP에서 param 객체와 request 객체의 차이점은 무엇인가요?**

### 재미있는 이야기가 있는 실습 문제 10문제:

1. **자신이 운영하는 온라인 쇼핑몰에서 상품을 등록하는 시스템을 구현하려고 합니다. 상품 이름, 가격, 수량을 입력받고 이를 객체에 할당하여 출력하는 기능을 JSP로 구현하세요.**
2. **사용자가 회원 가입을 할 수 있는 웹 페이지를 만들어 보세요. 사용자 이름, 나이, 거주지를 입력받고, 이를 객체에 할당하여 회원 정보를 출력하는 시스템을 JSP로 작성하세요.**
3. **회사 부서 정보를 관리하는 시스템을 만들고, 사용자가 부서 번호, 부서명, 부서 위치를 입력받아 이를 처리하는 JSP 페이지를 작성하세요.**
4. **주문 시스템을 만들기 위해, 사용자가 주문 상품의 이름과 가격을 입력하면 해당 정보를 객체에 저장하고 주문 내역을 출력하는 기능을 JSP로 작성하세요.**
5. **사용자가 요리 정보를 입력할 수 있는 시스템을 만드세요. 요리 이름, 재료, 난이도를 입력받고 이를 객체에 할당하여 요리 정보를 출력하는 JSP 페이지를 작성하세요.**
6. **여행 상품을 등록하는 웹 페이지를 만들고, 사용자가 여행지 이름과 가격을 입력받아 이를 객체에 할당하여 여행 상품 목록을 출력하는 시스템을 JSP로 구현하세요.**
7. **도서관 관리 시스템을 만들고, 사용자가 책 제목, 저자, 출판 연도를 입력받아 이를 객체에 할당하여 도서 목록을 출력하는 JSP 페이지를 작성하세요.**
8. **학생 정보를 관리하는 시스템을 만들어 보세요. 학생 이름, 학년, 전공을 입력받고 이를 객체에 할당하여 학생 정보를 출력하는 JSP 페이지를 작성하세요.**
9. **영화 정보를 관리하는 시스템을 만듭니다. 사용자가 영화 제목, 감독, 장르를 입력받고 이를 객체에 할당하여 영화 정보를 출력하는 JSP 페이지를 작성하세요.**
10. **사용자가 자동차 정보를 입력할 수 있는 페이지를 만들고, 자동차 모델명, 제조사, 연식을 입력받아 이를 객체에 할당하여 자동차 정보를 출력하는 JSP 페이지를 작성하세요.**




### 주관식 개념 문제 10문제 및 정답

1. **`<jsp:useBean>` 태그의 주요 목적은 무엇인가요?**

   * **정답**: `<jsp:useBean>` 태그는 JSP 페이지에서 JavaBean 객체를 생성하거나 이미 존재하는 객체를 찾기 위해 사용됩니다. 객체를 JSP 페이지에서 사용할 수 있도록 하고, 필요한 경우 객체의 프로퍼티를 설정할 수 있습니다.

2. **`<jsp:setProperty>` 태그를 사용하여 객체의 속성을 설정할 때, `property="*"`의 의미는 무엇인가요?**

   * **정답**: `property="*"`는 JSP 페이지에서 요청 파라미터에 해당하는 모든 값을 자동으로 해당 객체의 프로퍼티에 할당하는 기능을 수행합니다. 예를 들어, `name="John"`과 같은 요청값을 `name` 프로퍼티에 자동으로 설정합니다.

3. **JSP에서 `request.getParameter("name")`의 역할은 무엇인가요?**

   * **정답**: `request.getParameter("name")`는 HTTP 요청에서 `name`이라는 이름의 파라미터 값을 반환합니다. 이 값은 사용자가 입력한 폼 데이터를 처리할 때 사용됩니다.

4. **JSP에서 객체의 속성값을 EL(Expression Language)로 출력하는 방법에 대해 설명하세요.**

   * **정답**: EL을 사용하여 JSP 페이지에서 객체의 속성값을 출력하려면 `${}` 구문을 사용합니다. 예를 들어, `name`이라는 속성을 가진 객체 `person`이 있다면 `${person.name}`으로 출력할 수 있습니다.

5. **`<jsp:useBean>`을 사용하여 객체를 생성할 때, `scope` 속성의 값으로 사용할 수 있는 값은 무엇이 있으며, 각 값이 의미하는 범위는 무엇인가요?**

   * **정답**: `scope` 속성에는 `page`, `request`, `session`, `application` 네 가지 값을 사용할 수 있습니다.

     * `page`: 해당 페이지에서만 객체를 사용
     * `request`: 요청 범위
     * `session`: 세션 범위
     * `application`: 애플리케이션 범위

6. **JSP에서 `setProperty` 태그로 요청값을 객체에 할당할 때, 객체의 속성에 대한 매칭 규칙은 무엇인가요?**

   * **정답**: `setProperty` 태그는 요청 파라미터의 이름과 객체의 속성 이름이 동일할 경우, 해당 파라미터 값을 객체의 속성에 자동으로 매핑하여 설정합니다. 예를 들어, `name`이라는 파라미터는 `setName()` 메서드를 통해 `name` 속성에 할당됩니다.

7. **`<jsp:useBean>`을 사용할 때, 객체가 이미 존재하는 경우 이를 어떻게 활용할 수 있나요?**

   * **정답**: 이미 존재하는 객체를 사용할 경우, `beanName` 속성을 사용하여 해당 객체를 찾아서 사용할 수 있습니다. 예를 들어, `beanName="person"`을 사용하여 이미 존재하는 `person` 객체를 사용할 수 있습니다.

8. **JSP에서 `useBean`과 `session` 스코프를 사용할 때의 차이점에 대해 설명하세요.**

   * **정답**: `useBean`은 JSP 페이지에서 객체를 생성하고 사용할 때 사용하며, `session` 스코프는 세션 동안 객체를 유지하는 범위입니다. `session`은 사용자의 세션 동안 객체를 유지하지만, `useBean`은 해당 페이지 범위에서만 객체를 사용할 수 있습니다.

9. **JSP 페이지에서 `useBean`을 사용하여 객체를 설정할 때, 객체가 `null`일 경우 어떻게 처리되나요?**

   * **정답**: 객체가 `null`일 경우, `useBean`은 객체를 생성하여 JSP 페이지에서 사용할 수 있도록 합니다. 객체가 이미 존재하면 해당 객체를 사용하고, 존재하지 않으면 새로운 객체를 생성합니다.

10. **JSP에서 `param` 객체와 `request` 객체의 차이점은 무엇인가요?**

    * **정답**: `param` 객체는 요청 파라미터를 간단하게 가져오기 위한 객체로, `request.getParameter()`와 동일합니다. `request` 객체는 HTTP 요청에 대한 모든 정보를 포함하는 객체로, 파라미터뿐만 아니라 세션 정보, 속성 등 다양한 정보를 다룰 수 있습니다.

---

### 재미있는 이야기가 있는 실습 문제 10문제 및 기본 코드 예시

1. **자신이 운영하는 온라인 쇼핑몰에서 상품을 등록하는 시스템을 구현하려고 합니다. 상품 이름, 가격, 수량을 입력받고 이를 객체에 할당하여 출력하는 기능을 JSP로 구현하세요.**

   ```jsp
   <jsp:useBean id="product" class="com.example.Product" scope="page"/>
   <jsp:setProperty property="*" name="product"/>
   <form method="post">
       <input type="text" name="name" placeholder="상품명"/>
       <input type="text" name="price" placeholder="가격"/>
       <input type="text" name="quantity" placeholder="수량"/>
       <button type="submit">상품 등록</button>
   </form>
   <h2>상품명: ${product.name}</h2>
   <h2>가격: ${product.price}</h2>
   <h2>수량: ${product.quantity}</h2>
   ```

2. **사용자가 회원 가입을 할 수 있는 웹 페이지를 만들어 보세요. 사용자 이름, 나이, 거주지를 입력받고, 이를 객체에 할당하여 회원 정보를 출력하는 시스템을 JSP로 작성하세요.**

   ```jsp
   <jsp:useBean id="member" class="com.example.Member" scope="page"/>
   <jsp:setProperty property="*" name="member"/>
   <form method="post">
       <input type="text" name="name" placeholder="이름"/>
       <input type="number" name="age" placeholder="나이"/>
       <input type="text" name="location" placeholder="거주지"/>
       <button type="submit">회원 가입</button>
   </form>
   <h2>회원명: ${member.name}</h2>
   <h2>나이: ${member.age}</h2>
   <h2>거주지: ${member.location}</h2>
   ```

3. **회사 부서 정보를 관리하는 시스템을 만들고, 사용자가 부서 번호, 부서명, 부서 위치를 입력받아 이를 처리하는 JSP 페이지를 작성하세요.**

   ```jsp
   <jsp:useBean id="department" class="com.example.Department" scope="page"/>
   <jsp:setProperty property="*" name="department"/>
   <form method="post">
       <input type="text" name="deptno" placeholder="부서번호"/>
       <input type="text" name="dname" placeholder="부서명"/>
       <input type="text" name="loc" placeholder="부서위치"/>
       <button type="submit">부서 등록</button>
   </form>
   <h2>부서번호: ${department.deptno}</h2>
   <h2>부서명: ${department.dname}</h2>
   <h2>부서위치: ${department.loc}</h2>
   ```

4. **주문 시스템을 만들기 위해, 사용자가 주문 상품의 이름과 가격을 입력하면 해당 정보를 객체에 저장하고 주문 내역을 출력하는 기능을 JSP로 작성하세요.**

   ```jsp
   <jsp:useBean id="order" class="com.example.Order" scope="page"/>
   <jsp:setProperty property="*" name="order"/>
   <form method="post">
       <input type="text" name="productName" placeholder="상품명"/>
       <input type="number" name="price" placeholder="가격"/>
       <button type="submit">주문</button>
   </form>
   <h2>주문한 상품: ${order.productName}</h2>
   <h2>가격: ${order.price}</h2>
   ```

5. **사용자가 요리 정보를 입력할 수 있는 시스템을 만드세요. 요리 이름, 재료, 난이도를 입력받고 이를 객체에 할당하여 요리 정보를 출력하는 JSP 페이지를 작성하세요.**

   ```jsp
   <jsp:useBean id="recipe" class="com.example.Recipe" scope="page"/>
   <jsp:setProperty property="*" name="recipe"/>
   <form method="post">
       <input type="text" name="name" placeholder="요리명"/>
       <input type="text" name="ingredients" placeholder="재료"/>
       <input type="text" name="difficulty" placeholder="난이도"/>
       <button type="submit">요리 등록</button>
   </form>
   <h2>요리명: ${recipe.name}</h2>
   <h2>재료: ${recipe.ingredients}</h2>
   <h2>난이도: ${recipe.difficulty}</h2>
   ```

