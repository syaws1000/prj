### 주관식 개념 문제 (5문제)

1. **조인(Join)이란 무엇인지 설명하고, 그 목적은 무엇인가요?**
2. **INNER JOIN과 OUTER JOIN의 차이를 설명하고, 각각의 사용 사례를 들어보세요.**
3. **서브쿼리란 무엇인가요? 서브쿼리의 사용 위치와 목적을 설명하세요.**
4. **SELF JOIN이란 무엇인가요? SELF JOIN을 사용하는 이유와 예시를 설명하세요.**
5. **가상 테이블(In-line view)과 일반적인 서브쿼리의 차이를 설명하고, 가상 테이블의 사용 예를 들어보세요.**

### 재미있는 이야기가 포함된 실습 문제 (7문제)

1. **사원의 급여가 5000 이상인 사람들을 찾아서 그들의 부서와 함께 출력하세요.**
   *“영화관에서 일이 끝나고, 사장님은 급여가 5000 이상인 직원들에게 특별 보너스를 주기로 했습니다. 직원들의 이름과 부서명을 함께 출력하세요!”*

2. **영화 장르가 ‘SF’인 영화와 그 영화를 본 고객들의 이름을 출력하세요.**
   *“영화관에서 SF 영화를 좋아하는 사람들이 모여 파티를 열었습니다. 그 영화를 본 고객들의 이름과 함께, 그 영화의 장르를 출력하세요!”*

3. **각 부서에서 가장 높은 급여를 받는 사원의 이름과 급여를 출력하세요.**
   *“부서별로 제일 높은 급여를 받는 사원을 찾는 데 필요한 SQL을 작성해보세요. 이 사람들은 부서에서 인정받는 최고의 급여를 받는 직원들이죠!”*

4. **최고급여를 받는 사원의 이름과 급여를 출력하세요.**
   *“회사에서 최고급여를 받는 사람은 누구일까요? 그 사람의 이름과 급여를 출력해보세요.”*

5. **모든 직원과 그들의 관리자 이름을 출력하세요. (SELF JOIN 사용)**
   *“사원과 상사들 간의 관계를 보여주는 리스트를 만들어 보세요. 이 정보를 보고 관리자와 사원 간의 연결고리를 파악할 수 있습니다!”*

6. **고객들이 본 영화 중, '액션' 장르 영화를 본 사람들의 이름과 영화 제목을 출력하세요.**
   *“액션 영화를 좋아하는 고객들을 찾아보세요. 그들이 본 액션 영화의 제목과 고객 이름을 출력하세요!”*

7. **영화 제목을 기준으로 고객 이름을 찾아 출력하세요. (NULL 값 처리 포함)**
   *“영화관에서는 다양한 장르의 영화를 제공합니다. 고객이 본 영화 제목을 기준으로 고객 이름을 출력하려면 어떻게 해야 할까요? NULL 값을 고려하여 작성해보세요!”*

   
---

## ✅ 주관식 개념 문제 풀이 (5문제)

---

### 1. **조인(Join)이란 무엇이고, 그 목적은 무엇인가요?**

**풀이:**
조인은 **두 개 이상의 테이블을 특정 조건을 기준으로 연결하여 하나의 결과로 만드는 SQL 구문**입니다.
그 목적은 **연관된 테이블의 데이터를 결합하여 더 많은 정보를 조회**하기 위함입니다. 예를 들어, 사원 테이블과 부서 테이블을 조인하면, 사원의 이름과 소속 부서명을 함께 출력할 수 있습니다.

---

### 2. **INNER JOIN과 OUTER JOIN의 차이와 사용 사례**

**풀이:**

* `INNER JOIN`: 양쪽 테이블에 **일치하는 값이 있는 행만** 결과로 출력합니다.
  예: 부서에 속한 사원 정보만 출력할 때 사용.

* `OUTER JOIN`: 한쪽 테이블에만 데이터가 있어도 **해당 행을 모두 출력**합니다.
  예: **부서에 사원이 없어도 부서 정보를 모두 출력**해야 할 때 `LEFT OUTER JOIN` 사용.

---

### 3. **서브쿼리란 무엇인가요? 사용 위치와 목적**

**풀이:**
서브쿼리는 **SQL문 내에 포함된 또 다른 SQL문**으로, **메인 쿼리에 값을 제공하거나 조건을 설정**하기 위해 사용됩니다.
사용 위치는 `SELECT`, `FROM`, `WHERE`절 등이며, **값 계산, 조건 비교, 가상 테이블 대체 등**의 목적으로 활용됩니다.

---

### 4. **SELF JOIN이란? 이유와 예시**

**풀이:**
SELF JOIN은 **자기 자신 테이블과 자신을 조인**하는 방식입니다.
이유는 **같은 테이블 안에서의 관계(예: 직원과 관리자)를 표현**하기 위해서입니다.
예시:

```sql
SELECT e.ename AS 사원명, m.ename AS 관리자명
FROM emp e
JOIN emp m ON e.mgr = m.empno;
```

---

### 5. **가상 테이블(In-line view)과 일반 서브쿼리 차이 및 예시**

**풀이:**

* **일반 서브쿼리**는 `WHERE`이나 `SELECT`절 안에서 조건이나 값으로 사용됩니다.
* \*\*가상 테이블(in-line view)\*\*는 `FROM`절에 쓰이며, **마치 실제 테이블처럼 다른 테이블과 조인하거나 가공**할 수 있습니다.

예시 (가상 테이블):

```sql
SELECT a.deptno, a.maxsal, e.ename
FROM 
  (SELECT deptno, MAX(sal) AS maxsal FROM emp GROUP BY deptno) a,
  emp e
WHERE a.deptno = e.deptno AND a.maxsal = e.sal;
```

---

## 🎮 재미있는 이야기 기반 실습 문제 풀이 (7문제)

---

### 1. **급여 5000 이상 사원과 부서명 출력**

```sql
SELECT e.ename, e.sal, d.dname
FROM emp e
JOIN dept d ON e.deptno = d.deptno
WHERE e.sal >= 5000;
```

---

### 2. **SF 영화와 해당 영화를 본 고객 이름**

```sql
SELECT c.name AS 고객명, m.title AS 영화제목, m.genre
FROM customer c
JOIN reservation r ON c.id = r.customer_id
JOIN movie m ON r.movie_id = m.id
WHERE m.genre = 'SF';
```

---

### 3. **각 부서에서 가장 높은 급여를 받는 사원**

```sql
SELECT e.deptno, e.ename, e.sal
FROM emp e
JOIN (
  SELECT deptno, MAX(sal) AS maxsal
  FROM emp
  GROUP BY deptno
) sub ON e.deptno = sub.deptno AND e.sal = sub.maxsal;
```

---

### 4. **최고 급여 받는 사원**

```sql
SELECT ename, sal
FROM emp
WHERE sal = (SELECT MAX(sal) FROM emp);
```

---

### 5. **모든 사원과 관리자 이름 출력 (SELF JOIN)**

```sql
SELECT e.ename AS 사원명, m.ename AS 관리자명
FROM emp e
LEFT JOIN emp m ON e.mgr = m.empno;
```

---

### 6. **액션 영화를 본 고객과 영화 제목**

```sql
SELECT c.name AS 고객명, m.title AS 영화제목
FROM customer c
JOIN reservation r ON c.id = r.customer_id
JOIN movie m ON r.movie_id = m.id
WHERE m.genre = '액션';
```

---

### 7. **영화 제목 기준으로 고객 이름 출력 (NULL 처리 포함)**

```sql
SELECT m.title AS 영화제목, c.name AS 고객명
FROM movie m
LEFT JOIN reservation r ON m.id = r.movie_id
LEFT JOIN customer c ON r.customer_id = c.id;
```

---
   