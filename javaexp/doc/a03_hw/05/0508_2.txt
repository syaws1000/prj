## ✅ 주관식 개념문제 10문제

1. DAO 패턴을 사용하는 이유는 무엇인가요? 비즈니스 로직과 데이터 접근 로직을 분리함으로써 얻는 장점은 무엇인지 설명하세요.

2. `ResultSet` 객체는 어떤 구조로 데이터를 저장하고, 데이터를 읽어오는 방법은 무엇인가요?

3. DAO 클래스에서 `try-with-resources` 문법을 사용하면 어떤 장점이 있나요?

4. 단일행 단일열 데이터를 조회할 때와 다중행 데이터를 조회할 때 코드의 흐름에 어떤 차이가 있나요?

5. `List<Emp>`를 리턴하는 메서드는 어떤 상황에서 사용되며, 이 메서드 내부에서 반복문이 필요한 이유는 무엇인가요?

6. `rs.getString("ENAME")`과 같은 방식으로 데이터를 가져올 때, 컬럼명 오타가 발생하면 어떤 문제가 생기나요?

7. 다음 SQL 구문에서 `LIKE ?`를 사용하는 이유는 무엇인가요? 사용 시 주의해야 할 점은 무엇인가요?

   ```sql
   SELECT * FROM EMP WHERE ENAME LIKE ?
   ```

8. DAO 클래스 안에서 `Connection`, `PreparedStatement`, `ResultSet`을 관리할 때, 자원을 어떻게 안전하게 해제하나요?


## 🎯 재미있는 이야기 기반 실습문제 

1. **“출근 안 한 직원 찾기!”**
   회사에선 사원들의 출근을 확인하고 있어요. 사원번호를 입력하면 해당 사원의 이름이 나오는 기능을 만들어주세요.
   *예: 사원번호 7788을 입력하면 이름이 'SCOTT' 나와야 해요.*

2. **“직업 탐정, 워드의 직책은?”**
   워드(WARD)가 어떤 일을 하는지 궁금한 조사관이 있어요. 이름을 주면 그 사람의 직책을 반환하는 기능을 만들어보세요.

3. **“돈을 사랑한 사람은 누구?”**
   회사에서 급여가 정확히 800인 사원이 누군지 찾고 있어요. 급여를 입력하면 사원의 이름이 출력되는 기능을 만드세요.

4. **“보너스도 사랑받고 싶다!”**
   보너스가 NULL이면 0으로 바꿔서 출력해주는 모든 사원 조회 기능을 만들어보세요. 그리고 전체 인원도 함께 출력하세요.

5. **“이름도 모르는 사원 번호 7654는 누구인가요?”**
   직원 카드에 이름이 없어요. 사원번호 7654를 넣으면 그 사람의 이름을 알려주는 기능을 만들어보세요.

6. **“워드의 월급은 얼마일까요?”**
   사원 이름을 입력하면 그 사람의 급여를 출력하는 메서드를 만들어보세요. 워드는 생활비가 걱정돼요.

7. **“마법의 검색창”**
   사용자가 입력한 이름을 입력하는 해당 사원의 급여를 출력하는 마법의 검색창 기능을 만들어보세요.(JSP)


# ✅ 주관식 개념문제 정답 및 해설

---

**1. DAO 패턴을 사용하는 이유는 무엇인가요? 비즈니스 로직과 데이터 접근 로직을 분리함으로써 얻는 장점은 무엇인지 설명하세요.**
👉 DAO는 데이터베이스 작업을 전담하는 클래스로, 비즈니스 로직과 분리하여 유지보수성과 재사용성을 높이고, 코드의 역할을 명확히 나누어 개발 효율성을 높입니다.

---

**2. `ResultSet` 객체는 어떤 구조로 데이터를 저장하고, 데이터를 읽어오는 방법은 무엇인가요?**
👉 `ResultSet`은 행(row)과 열(column)로 구성된 표 형식의 구조입니다. `next()`로 행을 이동하고, `getString("컬럼명")`이나 `getInt("컬럼명")` 등으로 열 값을 가져옵니다.

---

**3. DAO 클래스에서 `try-with-resources` 문법을 사용하면 어떤 장점이 있나요?**
👉 자동으로 `close()`가 호출되어 자원 누수를 방지할 수 있습니다. `Connection`, `PreparedStatement`, `ResultSet` 등의 객체를 명시적으로 닫지 않아도 됩니다.

---

**4. 단일행 단일열 데이터를 조회할 때와 다중행 데이터를 조회할 때 코드의 흐름에 어떤 차이가 있나요?**
👉 단일행은 `if(rs.next())`를 사용하고, 다중행은 `while(rs.next())`를 사용합니다. 반복이 필요한지 여부가 핵심 차이입니다.

---

**5. `List<Emp>`를 리턴하는 메서드는 어떤 상황에서 사용되며, 이 메서드 내부에서 반복문이 필요한 이유는 무엇인가요?**
👉 다수의 레코드를 조회할 때 사용하며, `while(rs.next())` 반복문을 통해 각 행을 객체로 만들어 리스트에 추가해야 하기 때문입니다.

---

**6. `rs.getString("ENAME")`과 같은 방식으로 데이터를 가져올 때, 컬럼명 오타가 발생하면 어떤 문제가 생기나요?**
👉 `SQLException` 예외가 발생하여 실행 중 오류가 나고, 해당 컬럼을 찾지 못해 프로그램이 비정상 종료될 수 있습니다.

---

**7. 다음 SQL 구문에서 `LIKE ?`를 사용하는 이유는 무엇인가요? 사용 시 주의해야 할 점은 무엇인가요?**

```sql
SELECT * FROM EMP WHERE ENAME LIKE ?
```

👉 부분 검색을 위해 사용됩니다. `?` 자리에 `%A%`처럼 와일드카드가 포함되어야 하며, `pstmt.setString(1, "%A%")` 형태로 넣어야 합니다.

---

**8. DAO 클래스 안에서 `Connection`, `PreparedStatement`, `ResultSet`을 관리할 때, 자원을 어떻게 안전하게 해제하나요?**
👉 `try-with-resources` 구문을 사용하여 `Connection`, `PreparedStatement`, `ResultSet`을 자동으로 닫아 자원 누수를 방지합니다.

---

## 🎯 이야기 기반 실습문제 정답 예시 및 해설

---

### 1. **출근 안 한 직원 찾기!**

```java
public String getEnameByEmpno(int empno){
    String ename = null;
    String sql = "SELECT ENAME FROM EMP10 WHERE EMPNO=?";
    try(Connection con = DB.con();
        PreparedStatement pstmt = con.prepareStatement(sql)){
        pstmt.setInt(1, empno);
        ResultSet rs = pstmt.executeQuery();
        if(rs.next()){
            ename = rs.getString("ENAME");
        }
    } catch(Exception e){
        System.out.println("에러: "+e.getMessage());
    }
    return ename;
}
```

---

### 2. **직업 탐정, 워드의 직책은?**

```java
public String getJobByEname(String ename){
    String job = null;
    String sql = "SELECT JOB FROM EMP10 WHERE ENAME=?";
    try(Connection con = DB.con();
        PreparedStatement pstmt = con.prepareStatement(sql)){
        pstmt.setString(1, ename);
        ResultSet rs = pstmt.executeQuery();
        if(rs.next()){
            job = rs.getString("JOB");
        }
    } catch(Exception e){
        System.out.println("에러: "+e.getMessage());
    }
    return job;
}
```

---

### 3. **돈을 사랑한 사람은 누구?**

```java
public String getEnameBySal(double sal){
    String ename = null;
    String sql = "SELECT ENAME FROM EMP10 WHERE SAL=?";
    try(Connection con = DB.con();
        PreparedStatement pstmt = con.prepareStatement(sql)){
        pstmt.setDouble(1, sal);
        ResultSet rs = pstmt.executeQuery();
        if(rs.next()){
            ename = rs.getString("ENAME");
        }
    } catch(Exception e){
        System.out.println("에러: "+e.getMessage());
    }
    return ename;
}
```

---

### 4. **보너스도 사랑받고 싶다!**

```java
public List<Emp> getAllEmp(){
    List<Emp> list = new ArrayList<>();
    String sql = "SELECT * FROM EMP10";
    try(Connection con = DB.con();
        PreparedStatement pstmt = con.prepareStatement(sql);
        ResultSet rs = pstmt.executeQuery()){
        while(rs.next()){
            double comm = rs.getDouble("COMM");
            if(rs.wasNull()) comm = 0.0;
            list.add(new Emp(rs.getInt("EMPNO"), rs.getString("ENAME"), rs.getString("JOB"),
                rs.getInt("MGR"), rs.getDate("HIREDATE"), rs.getDouble("SAL"), comm, rs.getInt("DEPTNO")));
        }
    } catch(Exception e){
        System.out.println("에러: "+e.getMessage());
    }
    return list;
}
```

---

### 5. **이름도 모르는 사원 번호 7654는 누구인가요?**

👉 정답은 문제 1과 동일: `getEnameByEmpno(7654)` 호출로 처리

---

### 6. **워드의 월급은 얼마일까요?**

```java
public double getSalByEname(String ename){
    double sal = 0;
    String sql = "SELECT SAL FROM EMP10 WHERE ENAME=?";
    try(Connection con = DB.con();
        PreparedStatement pstmt = con.prepareStatement(sql)){
        pstmt.setString(1, ename);
        ResultSet rs = pstmt.executeQuery();
        if(rs.next()){
            sal = rs.getDouble("SAL");
        }
    } catch(Exception e){
        System.out.println("에러: "+e.getMessage());
    }
    return sal;
}
```

---

### 7. **마법의 검색창 (JSP 연동)**

JSP 내 코드 예시:

```jsp
<%
    String ename = request.getParameter("ename");
    if(ename==null) ename="";
    A03_ExpDao dao = new A03_ExpDao();
    double sal = dao.getSalByEname(ename);
%>
<form>
   사원명:<input name="ename"/>
</form>
<p><%= ename %>의 급여는 <%= sal %>입니다.</p>
```


   
   