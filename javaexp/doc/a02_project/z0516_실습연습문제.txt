### **자바스크립트 학습 계열화**

1. **기본 문법 및 함수**:

   * 변수 선언, 함수 정의, 조건문, 반복문 등 기본 문법
   * 자바스크립트 내장 객체(Date, String, Array 등)
   * 화살표 함수, 익명 함수

2. **DOM 조작**:

   * DOM 객체 선택 및 수정
   * 이벤트 처리 (onclick, onmouseover 등)
   * 스타일 및 클래스 조작

3. **배열 및 객체**:

   * 배열 처리 (배열 순회, 추가, 삭제)
   * 객체 처리 (속성, 메서드 활용)

4. **ES6+ 기능**:

   * 템플릿 리터럴
   * 프로미스(Promise)
   * async/await, destructuring

---

### **자바스크립트 문제**

**객관식 문제**

1. 자바스크립트에서 `let`과 `const`의 차이는 무엇인가요?
   A. `let`은 값 변경이 불가능하고 `const`는 변경이 가능하다
   B. `const`는 상수 선언, `let`은 값 변경이 가능하다
   C. `let`은 블록 스코프, `const`는 함수 스코프
   D. 둘 다 값 변경이 가능하다

2. 자바스크립트에서 `addEventListener()`와 `onclick`의 차이는 무엇인가요?
   A. 둘은 동일한 기능을 한다
   B. `addEventListener()`는 여러 이벤트를 등록할 수 있다
   C. `onclick`은 이벤트 리스너를 제거할 수 있다
   D. `addEventListener()`는 이벤트를 실행할 수 없다

3. `setTimeout()`과 `setInterval()`의 차이점은 무엇인가요?
   A. `setTimeout()`은 반복적으로 실행되고, `setInterval()`은 한 번만 실행된다
   B. `setInterval()`은 반복적으로 실행되고, `setTimeout()`은 한 번만 실행된다
   C. 둘 다 반복적으로 실행된다
   D. 둘 다 한 번만 실행된다

4. 화살표 함수에서 `this`는 어떻게 동작하나요?
   A. `this`는 화살표 함수 내에서 변경된다
   B. `this`는 항상 글로벌 객체를 가리킨다
   C. `this`는 화살표 함수 외부의 `this`를 참조한다
   D. `this`는 화살표 함수 내에서 정의할 수 없다

5. DOM 객체를 선택할 때 `querySelector()`와 `querySelectorAll()`의 차이점은 무엇인가요?
   A. `querySelector()`는 첫 번째 요소만 반환하고, `querySelectorAll()`은 모든 요소를 반환한다
   B. `querySelectorAll()`은 첫 번째 요소만 반환하고, `querySelector()`는 모든 요소를 반환한다
   C. `querySelector()`는 아이디만 선택하고, `querySelectorAll()`은 클래스만 선택한다
   D. `querySelectorAll()`은 값을 반환하지 않는다

6. `NaN`은 무엇을 의미하나요?
   A. Not a Number
   B. No a Name
   C. Null a Number
   D. Not Available Number

7. 자바스크립트에서 `let`과 `var`의 차이는 무엇인가요?
   A. `let`은 전역 스코프에서만 사용되며, `var`는 함수 스코프에서만 사용된다
   B. `let`은 블록 스코프를 가지며, `var`는 함수 스코프를 가진다
   C. `let`은 값을 변경할 수 없고, `var`는 변경할 수 있다
   D. `let`과 `var`는 동일하게 동작한다

8. 자바스크립트에서 `this`가 무엇을 참조하는지 확인하려면 어떤 방법을 사용해야 하나요?
   A. `this`는 항상 `window`를 참조한다
   B. `console.log(this)`를 사용하여 참조를 확인한다
   C. `this`는 자바스크립트에서 사용되지 않는다
   D. `this`는 글로벌 객체를 참조한다

9. `localStorage`와 `sessionStorage`의 차이점은 무엇인가요?
   A. 둘 다 데이터를 영구적으로 저장한다
   B. `sessionStorage`는 브라우저 탭을 닫으면 삭제된다
   C. `localStorage`는 탭이 닫히면 삭제된다
   D. `sessionStorage`는 데이터를 서버에 저장한다

10. `JSON.parse()`와 `JSON.stringify()`의 차이점은 무엇인가요?
    A. `JSON.parse()`는 객체를 JSON으로 변환하고, `JSON.stringify()`는 JSON을 객체로 변환한다
    B. `JSON.parse()`는 JSON을 객체로 변환하고, `JSON.stringify()`는 객체를 JSON으로 변환한다
    C. 둘 다 JSON 데이터를 출력하는 함수다
    D. 둘 다 객체와 배열을 변환하는 함수다

---

**주관식 문제**

1. 자바스크립트에서 `this` 키워드는 어떤 역할을 하나요?
2. `setTimeout()`과 `setInterval()`을 사용한 예제를 각각 하나씩 작성하세요.
3. DOM에서 `querySelector()`와 `querySelectorAll()`의 차이를 설명하세요.
4. 자바스크립트에서 `NaN`을 체크하는 방법을 설명하고 예제를 작성하세요.
5. 화살표 함수의 특징과 일반 함수와의 차이점을 설명하세요.
6. 자바스크립트에서 배열을 순회하는 방법 중 `forEach()`와 `for`문을 비교하세요.
7. `localStorage`와 `sessionStorage`의 차이점을 설명하고, 각 저장소를 사용하는 예제를 작성하세요.
8. `JSON.parse()`와 `JSON.stringify()` 함수의 사용 예를 각각 작성하세요.
9. 객체 리터럴로 `Person` 객체를 만들고, `name`, `age`, `address` 속성을 추가한 후, 그 값을 출력하세요.
10. 자바스크립트에서 비동기 처리란 무엇이며, 이를 처리하는 방법은 무엇인가요?

---

**실습형 문제**

1. `setInterval()`을 사용하여 1초마다 `h1` 요소의 텍스트를 증가시키는 프로그램을 작성하세요.
2. `localStorage`에 사용자의 이름을 저장하고, 페이지를 새로 고침할 때마다 저장된 이름을 출력하는 프로그램을 작성하세요.
3. `JSON.stringify()`와 `JSON.parse()`를 사용하여 객체를 JSON 문자열로 변환하고 다시 객체로 변환하는 예제를 작성하세요.
4. `forEach()`를 사용하여 배열의 모든 값을 출력하는 프로그램을 작성하세요.
5. `this` 키워드를 활용하여 객체의 메서드에서 자신을 참조하는 예제를 작성하세요.
6. `setTimeout()`을 사용하여 5초 후에 화면에 알림을 띄우는 프로그램을 작성하세요.
7. `JSON.parse()`로 받은 JSON 데이터를 이용해 사용자 정보를 출력하는 프로그램을 작성하세요.
8. 버튼 클릭 시, `h2` 요소의 텍스트를 `left`, `right`, `center`로 정렬하는 프로그램을 작성하세요.
9. `addEventListener()`를 사용하여 버튼 클릭 시 `h1` 텍스트 색상을 변경하는 프로그램을 작성하세요.
10. 입력한 두 수를 더한 결과를 출력하는 간단한 계산기 프로그램을 작성하세요.

---

### **자바 학습 계열화**

1. **기본 문법**:

   * 데이터 타입, 변수, 연산자, 조건문, 반복문

2. **객체지향 프로그래밍(OOP)**:

   * 클래스, 객체, 메서드, 생성자, 캡슐화, 상속, 다형성, 추상화

3. **배열과 컬렉션**:

   * 배열, ArrayList, LinkedList, HashMap, Set

4. **예외 처리**:

   * try-catch, throw, throws

5. **DAO와 데이터베이스 처리**:

   * SQL 작성, PreparedStatement, ResultSet, 트랜잭션 처리

---

### **자바 문제**

**객관식 문제**

1. 자바에서 `public`, `private`, `protected`의 차이는 무엇인가요?
   A. `public`은 모든 접근이 가능하고, `private`는 클래스 내부에서만 접근이 가능하다
   B. `protected`는 클래스 외부에서 접근이 가능하고, `public`은 접근이 제한된다
   C. `private`는 외부에서 접근이 가능하고, `public`은 클래스 내부에서만 접근이 가능하다
   D. `private`와 `protected`는 동일하다

2. 자바에서 `ArrayList`와 `LinkedList`의 차이는 무엇인가요?
   A. `ArrayList`는 빠른 검색, `LinkedList`는 빠른 추가와 삭제
   B. `ArrayList`는 빠른 추가와 삭제, `LinkedList`는 빠른 검색
   C. `ArrayList`는 배열을 기반으로 하고, `LinkedList`는 연결 리스트를 기반으로 한다
   D. 둘 다 성능이 동일하다

3. 자바에서 `try-catch` 문을 사용하는 이유는 무엇인가요?
   A. 예외를 발생시키기 위해서
   B. 예외를 처리하여 프로그램이 중단되지 않도록 하기 위해서
   C. 변수를 선언하기 위해서
   D. 프로그램의 흐름을 제어하기 위해서

4. `super()`와 `this()`의 차이는 무엇인가요?
   A. `super()`는 부모 클래스의 생성자를 호출하고, `this()`는 현재 클래스의 생성자를 호출한다
   B. `this()`는 부모 클래스의 생성자를 호출하고, `super()`는 현재 클래스의 생성자를 호출한다
   C. 둘 다 부모 클래스의 생성자를 호출한다
   D. 둘 다 현재 클래스의 생성자를 호출한다

5. `HashMap`에서 키를 중복해서 추가할 수 있나요?
   A. 키는 중복될 수 없다
   B. 값만 중복될 수 있다
   C. 값도 중복될 수 없다
   D. 키와 값 모두 중복될 수 있다

6. 자바에서 메서드 오버로딩과 오버라이딩의 차이는 무엇인가요?
   A. 오버로딩은 매개변수의 수나 타입이 다르고, 오버라이딩은 부모 클래스의 메서드를 재정의하는 것이다
   B. 오버라이딩은 매개변수의 수나 타입이 다르고, 오버로딩은 부모 클래스의 메서드를 재정의하는 것이다
   C. 오버로딩과 오버라이딩은 동일하다
   D. 둘 다 메서드를 호출할 때 다르게 동작한다

7. 자바에서 `final` 키워드는 무엇을 의미하나요?
   A. 변수를 변경할 수 없게 하고, 메서드를 오버라이딩 할 수 없게 한다
   B. 변수를 변경할 수 없게 하고, 메서드를 오버로딩 할 수 없게 한다
   C. 클래스가 상속될 수 없게 하고, 메서드를 오버라이딩 할 수 없게 한다
   D. 클래스가 상속될 수 없게 하고, 메서드를 오버로딩 할 수 없게 한다

8. 자바에서 인터페이스를 사용하는 이유는 무엇인가요?
   A. 다형성을 구현하기 위해서
   B. 추상화를 구현하기 위해서
   C. 상속을 구현하기 위해서
   D. 예외 처리를 하기 위해서

9. `ArrayList`와 `LinkedList`를 사용할 때 각각의 장점은 무엇인가요?
   A. `ArrayList`는 추가/삭제에 적합하고, `LinkedList`는 검색에 적합하다
   B. `ArrayList`는 검색에 적합하고, `LinkedList`는 추가/삭제에 적합하다
   C. 둘 다 추가/삭제에 적합하다
   D. 둘 다 검색에 적합하다

10. 자바에서 `synchronized` 키워드를 사용하는 이유는 무엇인가요?
    A. 멀티스레드 환경에서 데이터 일관성을 유지하기 위해서
    B. 메서드를 병렬로 실행하기 위해서
    C. 메서드를 비동기적으로 실행하기 위해서
    D. 메모리 관리를 효율적으로 하기 위해서

---

**주관식 문제**

1. 자바에서 생성자의 역할과 특성에 대해 설명하세요.
2. 자바에서 `this` 키워드와 `super` 키워드의 차이를 설명하세요.
3. `ArrayList`와 `LinkedList`의 성능 차이와 사용 예를 설명하세요.
4. 자바에서 다형성(polymorphism)과 그 구현 방법에 대해 설명하세요.
5. 자바에서 예외 처리 방법과 `try-catch` 블록의 사용법을 설명하세요.
6. `HashMap`의 사용 예와 장점을 설명하세요.
7. 자바에서 추상 클래스와 인터페이스의 차이를 설명하세요.
8. `final` 키워드를 사용하는 이유와 예제를 설명하세요.
9. 자바에서 메서드 오버라이딩과 오버로딩의 차이를 설명하세요.
10. 자바에서 멀티스레딩을 처리하는 방법과 `synchronized` 키워드의 사용법을 설명하세요.

---

**실습형 문제**

1. `ArrayList`를 사용하여 사원 정보(사원명, 직책)를 저장하고 출력하는 프로그램을 작성하세요.
2. `HashMap`을 사용하여 학생들의 학년과 성적 정보를 저장하고 출력하는 프로그램을 작성하세요.
3. 자바에서 예외 처리 예제를 작성하고, 사용자 입력값이 숫자가 아닌 경우 처리하는 방법을 설명하세요.
4. `LinkedList`를 사용하여 자동차 정보를 저장하고 출력하는 프로그램을 작성하세요.
5. `super()`와 `this()`를 사용한 생성자 호출 예제를 작성하세요.
6. `final` 키워드를 사용하여 변경 불가능한 변수를 선언하는 예제를 작성하세요.
7. `Thread` 클래스를 사용하여 두 개의 스레드를 실행하는 예제를 작성하세요.
8. `ArrayList`와 `LinkedList`의 성능 차이를 비교하는 프로그램을 작성하세요.
9. 자바에서 다형성을 구현하는 예제를 작성하고 설명하세요.
10. 자바에서 `synchronized` 키워드를 사용하여 멀티스레드 환경에서 데이터 충돌을 방지하는 예제를 작성하세요.

---

### **데이터베이스 학습 계열화**

1. **기본 SQL**:

   * SELECT, INSERT, UPDATE, DELETE
   * WHERE, AND, OR, LIKE, IN, BETWEEN 등 조건문

2. **조인**:

   * INNER JOIN, LEFT OUTER JOIN, RIGHT OUTER JOIN, FULL OUTER JOIN
   * SELF JOIN, CROSS JOIN

3. **서브쿼리**:

   * 서브쿼리 사용법 (SELECT, WHERE, FROM 절)
   * 서브쿼리 최적화

4. **데이터베이스 설계**:

   * 정규화, ERD(Entity Relationship Diagram)
   * 기본키, 외래키, 제약조건

5. **SQL 최적화 및 고급 기능**:

   * 인덱스, 트랜잭션 관리, 그룹화 함수 (COUNT, AVG, SUM, MIN, MAX)
   * 윈도우 함수, CTE(공통 테이블 표현식)

---

### **데이터베이스 문제**

**객관식 문제**

1. SQL에서 `JOIN`을 사용하는 이유는 무엇인가요?
   A. 두 테이블의 데이터를 결합하여 결과를 도출하기 위해서
   B. 두 테이블의 데이터를 삭제하기 위해서
   C. 두 테이블의 데이터를 정렬하기 위해서
   D. 두 테이블의 데이터를 분리하기 위해서

2. SQL에서 `INNER JOIN`과 `OUTER JOIN`의 차이는 무엇인가요?
   A. `INNER JOIN`은 두 테이블에서 일치하는 데이터만 가져오고, `OUTER JOIN`은 일치하지 않는 데이터도 포함한다
   B. `INNER JOIN`은 모든 데이터를 가져오고, `OUTER JOIN`은 일부 데이터를 가져온다
   C. `INNER JOIN`과 `OUTER JOIN`은 동일하다
   D. `INNER JOIN`은 하나의 테이블만 조인할 수 있다

3. 서브쿼리에서 `IN` 연산자를 사용할 때의 특징은 무엇인가요?
   A. 서브쿼리의 결과값이 여러 개일 때, `IN`을 사용하여 해당 값들과 비교한다
   B. 서브쿼리의 결과값이 하나일 때, `IN`을 사용하여 비교한다
   C. `IN`은 서브쿼리에서 사용할 수 없다
   D. `IN`은 `AND`와 함께만 사용된다

4. SQL에서 `GROUP BY`를 사용하는 이유는 무엇인가요?
   A. 데이터를 그룹화하여 집계 함수(SUM, COUNT 등)를 적용하기 위해서
   B. 데이터를 필터링하기 위해서
   C. 데이터를 정렬하기 위해서
   D. 데이터를 삽입하기 위해서

5. SQL에서 `COUNT()` 함수는 무엇을 반환하나요?
   A. 모든 행의 값을 더한 합을 반환한다
   B. 주어진 조건에 맞는 행의 개수를 반환한다
   C. 주어진 조건에 맞는 열의 값을 반환한다
   D. 주어진 조건에 맞는 가장 큰 값을 반환한다

6. `PRIMARY KEY`와 `FOREIGN KEY`의 차이는 무엇인가요?
   A. `PRIMARY KEY`는 각 행을 유일하게 식별하고, `FOREIGN KEY`는 다른 테이블과 관계를 정의한다
   B. \`PRIMARY


KEY`는 다른 테이블과 관계를 정의하고, `FOREIGN KEY`는 각 행을 유일하게 식별한다  
   C. 둘은 동일한 역할을 한다  
   D. `PRIMARY KEY`는 중복을 허용하고, `FOREIGN KEY\`는 중복을 허용하지 않는다

7. SQL에서 `HAVING` 절의 용도는 무엇인가요?
   A. 데이터를 필터링하기 위해서, `GROUP BY`와 함께 사용된다
   B. 데이터를 삽입하기 위해서
   C. 데이터를 정렬하기 위해서
   D. 데이터를 그룹화하기 위해서

8. `INDEX`를 사용하는 이유는 무엇인가요?
   A. 데이터를 빠르게 검색하고 조회 성능을 향상시키기 위해서
   B. 데이터를 삭제하기 위해서
   C. 데이터를 삽입하기 위해서
   D. 데이터를 정렬하기 위해서

9. SQL에서 `UPDATE` 명령어를 사용하는 이유는 무엇인가요?
   A. 테이블의 데이터를 수정하기 위해서
   B. 테이블의 데이터를 삭제하기 위해서
   C. 테이블의 데이터를 추가하기 위해서
   D. 테이블의 데이터를 조회하기 위해서

10. SQL에서 `JOIN`을 사용하여 결합할 수 있는 조건은 무엇인가요?
    A. 공통된 컬럼을 기준으로 두 테이블을 결합한다
    B. 두 테이블의 행 번호를 기준으로 결합한다
    C. 두 테이블의 열을 기준으로 결합한다
    D. 두 테이블의 테이블명을 기준으로 결합한다

---

**주관식 문제**

1. SQL에서 `INNER JOIN`과 `LEFT OUTER JOIN`의 차이를 설명하세요.
2. 서브쿼리를 `WHERE` 절과 `FROM` 절에서 사용하는 방법을 설명하세요.
3. SQL에서 `GROUP BY`와 `HAVING` 절의 차이를 설명하세요.
4. SQL에서 `COUNT()`, `SUM()`, `AVG()` 함수의 차이를 설명하세요.
5. SQL에서 `PRIMARY KEY`와 `FOREIGN KEY`를 설정하는 방법을 설명하세요.
6. `JOIN`을 사용하여 두 테이블을 결합할 때, 조건을 설정하는 방법을 설명하세요.
7. `IN`, `BETWEEN`과 같은 조건 연산자에 대해 설명하세요.
8. SQL에서 `DISTINCT` 키워드의 사용 방법을 설명하세요.
9. SQL에서 `UNION`과 `UNION ALL`의 차이를 설명하세요.
10. `EXISTS`와 `IN`을 사용하는 방법을 설명하세요.

---

**실습형 문제**

1. `INNER JOIN`을 사용하여 사원 정보와 부서 정보를 결합하여 부서명과 사원명을 출력하는 SQL을 작성하세요.
2. `LEFT OUTER JOIN`을 사용하여 고객과 주문 정보를 결합하여 고객 이름과 주문 정보를 출력하는 SQL을 작성하세요.
3. `COUNT()`를 사용하여 각 부서별로 사원의 수를 출력하는 SQL을 작성하세요.
4. `GROUP BY`와 `HAVING`을 사용하여 급여가 평균 이상인 사원들을 출력하는 SQL을 작성하세요.
5. `INSERT INTO`를 사용하여 새로운 사원 정보를 테이블에 추가하는 SQL을 작성하세요.
6. `UPDATE`를 사용하여 특정 부서의 모든 사원의 급여를 10% 인상하는 SQL을 작성하세요.
7. `DELETE`를 사용하여 특정 조건에 맞는 사원 정보를 삭제하는 SQL을 작성하세요.
8. `SELECT`와 `DISTINCT`를 사용하여 중복되지 않는 부서명을 출력하는 SQL을 작성하세요.
9. `SUBQUERY`를 사용하여 최고 급여를 받은 사원 정보를 출력하는 SQL을 작성하세요.
10. `IN`과 `NOT IN`을 사용하여 특정 급여 이상 또는 이하인 사원 정보를 출력하는 SQL을 작성하세요.

