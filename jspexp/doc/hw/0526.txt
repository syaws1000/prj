
### 1. **DAO 패턴에 대해 설명하시오.**

* **문제 설명**: DAO (Data Access Object) 패턴의 주요 목적과 특징에 대해 설명하고, 데이터베이스 연동 시 DAO 패턴을 사용하는 이유를 기술하시오.

---

### 2. **JSP에서 `useBean`과 `setProperty`의 역할에 대해 설명하시오.**

* **문제 설명**: JSP 페이지에서 `useBean` 태그와 `setProperty` 태그의 역할을 각각 설명하고, 이를 사용하여 데이터를 처리하는 방법에 대해 기술하시오.

---

### 3. **SQL에서 `INSERT`문과 `UPDATE`문 차이점을 설명하시오.**

* **문제 설명**: `INSERT`와 `UPDATE` SQL 문장의 차이점에 대해 설명하고, 각각의 SQL 문장이 사용되는 상황을 예시와 함께 설명하시오.

---

### 4. **JSP에서 `c:forEach` 태그의 역할에 대해 설명하시오.**

* **문제 설명**: `c:forEach` 태그의 역할과 이를 사용하여 데이터 목록을 반복하여 출력하는 방법을 설명하시오.

---

### 5. **부서 등록 페이지에서 등록 실패 시 처리 방법을 설명하시오.**

* **문제 설명**: 부서 등록을 처리하는 JSP 페이지에서 등록 실패 시 어떻게 처리할 수 있는지, 실패 시 사용자에게 알림을 어떻게 표시할 수 있는지 설명하시오.

---

### 6. **`DAO` 메서드에서 `try-catch`문을 사용하는 이유를 설명하시오.**

* **문제 설명**: `DAO` 메서드에서 `try-catch`문을 사용하는 이유를 설명하고, 데이터베이스 예외 처리를 위한 방법에 대해 구체적으로 서술하시오.

---

### 7. **`a21_deptDetail.jsp` 페이지에서 부서 정보를 조회하는 방법을 설명하시오.**

* **문제 설명**: `a21_deptDetail.jsp` 페이지에서 특정 부서의 정보를 조회하는 과정과 그에 필요한 `DAO` 메서드 호출 방법을 설명하시오.

---

### 8. **`Emp`와 `Family` 클래스가 각각 어떻게 구성되어야 하는지 설명하시오.**

* **문제 설명**: `Emp` 클래스와 `Family` 클래스의 기본 구조와 속성들을 설명하고, 해당 클래스들이 각각 사원 정보와 가족 정보를 처리하는 방법을 설명하시오.

---

### 9. **JSP에서 JavaScript와 서버 측 데이터를 연동하는 방법을 설명하시오.**

* **문제 설명**: JSP 페이지에서 서버 측 데이터를 JavaScript 코드와 연동하여 클라이언트에게 동적으로 표시하는 방법에 대해 설명하시오.

---

### 10. **부서정보 등록 시 `insertDept` 메서드가 반환하는 값의 의미를 설명하시오.**

* **문제 설명**: `insertDept` 메서드가 실행된 후 반환되는 값이 무엇을 의미하는지 설명하고, 이를 바탕으로 클라이언트에게 성공 여부를 어떻게 처리할 수 있는지 설명하시오.

---



### 1단계: Form 데이터 요청 처리 (EL 태그로 처리 결과)

#### 문제:

주어진 HTML form에서 EL(Expression Language)을 사용하여 입력된 데이터를 서버로 전송하세요.

#### 예시:

```html
<form action="processForm.jsp" method="post">
    <input type="text" name="username" placeholder="사용자명 입력">
    <input type="password" name="password" placeholder="비밀번호 입력">
    <button type="submit">제출</button>
</form>
```

위의 form 데이터를 EL을 이용해 서버로 전송하는 방법을 설명하세요.

---

### 2단계: Form 데이터 Bean으로 할당 (처리 결과)

#### 문제:

위의 Form 데이터를 처리하기 위해 자동 객체 할당인 useBean을 사용하여 Java Bean에 데이터를 할당하세요.

#### 예시:

```jsp
<jsp:useBean id="user" class="com.example.User" scope="request" />
<jsp:setProperty name="user" property="*" />
```

위의 예시를 기반으로 사용자명(username)과 비밀번호(password)를 User 클래스의 객체에 할당하는 코드를 작성하세요.

---

### 3단계: DAO 처리 (useBean 활용)

#### 문제:

이전에 할당한 User 객체를 DAO(Data Access Object)를 사용하여 데이터베이스에 등록하세요.

#### 예시:

```java
// User 객체를 DAO를 이용하여 DB에 등록하는 코드
UserDAO userDao = new UserDAO();
userDao.insertUser(user);
```

위의 예시를 참고하여 User 객체를 데이터베이스에 등록하는 코드를 작성하세요.

---

### 4단계: Form VO Bean과 DAO 연동 처리

#### 문제:

VO(Value Object) Bean과 DAO를 연동하여 위에서 처리한 Form 데이터를 데이터베이스에 저장하세요.

#### 예시:

```java
// VO 클래스 예시
public class UserVO {
    private String username;
    private String password;
    
    // getters and setters
}

// DAO를 이용하여 VO를 DB에 등록하는 코드
UserVO userVo = new UserVO();
userVo.setUsername(user.getUsername());
userVo.setPassword(user.getPassword());

UserDAO userDao = new UserDAO();
userDao.insertUser(userVo);
```





