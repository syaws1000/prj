# 🌟 **Spring Autowiring ** 🌟

## 1. 주의 집중 끌기 및 학습 연결성 제공 (Gain Attention + ARCS-Arousal)

### 🪄 \[흥미 유발: 질문]

👉 **"객체들은 서로 어떻게 친해질까?"**
👉 **"Spring이 알아서 객체를 연결해준다면... 세상 편하지 않을까요?"**

(화면에 **‘자동 연결된 객체’** 그림과 **‘연결 실패한 객체’** 그림을 대비하여 보여주기.)

**짧은 이야기:**
"옛날 옛적, 객체들이 서로 연결되기 위해 개발자는 코드를 잔뜩 썼어요. 그러던 어느 날, Spring이라는 요정이 나타나, 말했죠 — *'걱정 마! 내가 다 연결해줄게!'*"

**ARCS (Attention):**
✅ *호기심 자극* → "Spring은 어떻게 객체를 '자동 연결'할까?"

---

## 2. 학습 목표 (Inform Learners of Objectives + ARCS-Relevance)

### 🎯 \[오늘의 미션]

* Spring Autowiring이 **무엇**인지 이해한다.
* Autowiring의 **동작 방식**을 설명할 수 있다.
* 다양한 **Autowiring 방법**(byType, byName, constructor 등)을 적용해본다.
* **실무 프로젝트**에 **Autowiring**을 활용할 수 있다.

**ARCS (Relevance):**
✅ *실제 업무 연관성* 강조:
"Autowiring을 모르면 Spring 프로젝트에서 매번 손으로 객체를 연결해야 해요! 🥲"

---

## 3. 선수 학습 상기 및 실생활 연결하기 (Stimulate Recall of Prior Learning)

### 🧠 \[기억 꺼내기]

**질문:**

* "\*\*의존성 주입(DI, Dependency Injection)\*\*이 뭐였지?"
* "**@Autowired** 어노테이션 본 적 있나요?"

**힌트:**
*"객체를 new 키워드로 만들지 않고, Spring이 대신 관리하고 주입해 주는 거였어요."*

**실생활 비유:**

> *택배가 집 앞에 도착하듯, 객체도 내가 만들지 않아도 ‘배송’됩니다!*

---

## 4. 주요 개념/핵심 키워드를 최고의 암기법에 의한 제시 (Present the Content)

### 🗝️ \[핵심 키워드 + 암기법]

| 키워드         | 설명                             | 암기법                         |
| ----------- | ------------------------------ | --------------------------- |
| Autowiring  | 객체 간의 의존성을 자동으로 연결해주는 기술       | **Auto** + **Wiring(연결)**   |
| @Autowired  | Spring이 알아서 객체를 찾아 주입해주는 어노테이션 | "어? 찾았어요!" → **@Autowired** |
| byType      | 타입 기준으로 주입                     | **타입(Type)이 딱 맞아야 연결**      |
| byName      | 이름 기준으로 주입                     | **이름(Name)을 정확히 맞춰야 연결**    |
| Constructor | 생성자 주입                         | **생성할 때 딱! 넣어주는 것**         |

### 🧠 기억법 Tip:

"Spring은 '이름이 뭐니?' 혹은 '너 타입이 뭐야?'를 묻고, 가장 잘 맞는 친구를 연결시켜줘요!"

---

## 5. 학습 목표별 탐구형 학습 (Provide Learning Guidance)

### 🧐 \[탐구형 활동]

* **문제 제시:**
  "Spring에게 객체를 맡기려면 어떻게 해야 할까?"

* **탐구 미션:**

  1. `@Autowired` 없이 객체를 만들어 연결해보자. (불편😫)
  2. `@Autowired`를 써서 자동 연결해보자. (편리😎)
  3. byType과 byName 주입 차이를 비교해보자.

**의문 제기:**

> "타입이 같으면 바로 연결될까? 이름이 다르면 오류가 날까?"

**힌트:**

> "Spring은 *너그러우면서도 까다롭다*. 이름이 틀리거나, 타입이 여러 개면... 🧐"

---

## 6. 실습 활동 및 협력 학습 유도 (Elicit Performance)

### 💻 \[실습: 자율 탐구]

> **\[미션 코드]**

```java
@Component
public class Engine {
   public String start() {
      return "Engine Started!";
   }
}

@Component
public class Car {
   @Autowired
   private Engine engine;
   
   public void drive() {
      System.out.println(engine.start());
   }
}
```

* **문제1:** Engine 클래스를 byType으로 연결해보기
* **문제2:** Engine 클래스를 byName으로 연결해보기
* **문제3:** Engine이 여러 개 있을 때 충돌 실험해보기

### 🤝 \[협력 학습]

* 조별로 오류 상황 만들기
* 서로 코드 리뷰하면서 오류 해결하기

---

## 7. 단계별 피드백 제공과 자기 평가 기회 (Provide Feedback)

### 🔍 \[스스로 점검]

* 객체 연결이 성공했나요?
* 오류가 난다면, 왜 그랬을까요?

**힌트:**

> "Spring은 정확한 타입, 정확한 이름을 좋아해요."

**💬 웃긴 포인트:**
"Spring: *'너 누구야?'* → 내가 찾을 수 없으면 삐진다. 😒"

---

## 8. 수행 평가 및 피드백 제공 (Assess Performance)

### 📜 \[평가 문제]

1. `@Autowired` 없이 객체를 연결할 수 있나요? (단답)
2. byType 주입은 어떤 기준으로 연결될까요? (서술형)
3. byName 주입은 어떤 단점이 있을까요? (서술형)
4. 실무에서 Autowiring을 쓰면 좋은 점과 주의할 점은? (실무 적용형)

(수행 후, **서로 답안 공유** → **서로 피드백** → **교사의 피드백**)

---

## 9. 학습 전이 강화와 실제 문제 적용 활동 (Enhance Retention and Transfer)

### 🏆 \[프로젝트 미션]

**미션:**
"자동차(Car)가 엔진(Engine)을 알아서 연결하고 출발하게 해보세요.
추가로, **MusicPlayer**, **Navigation** 같은 다른 컴포넌트도 자동 연결해서 자동차에 탑재해 보세요!"

> 🔥 **추가 챌린지:**
> 충돌(conflict)나는 경우 `@Qualifier`로 해결해보기!

---

## 10. 학습 반성 및 향후 학습 준비 (Enhance Retention and Transfer)

### 📝 \[자기 반성]

* 오늘 배운 것 중 **가장 인상 깊었던** 것은?
* **다음에는** 무엇을 더 깊이 탐구하고 싶나요?

**의문 제기 + 힌트:**

> "우리가 만든 Autowiring, 과연 대규모 프로젝트에서도 잘 돌아갈까?"

