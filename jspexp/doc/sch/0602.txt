


# 🚀 **\[스프링 시작] 학습 교안**

(공유용 : 학습자와 함께 탐구하고 실습하는 형식)

---

## 1. **주의 집중 끌기 & 학습 연결성 제공**

(가네 Step 1 : 주의집중 / ARCS - Attention)

### 👉 **호기심 유발 질문**

* "왜 전 세계 개발자들이 '스프링(Spring)'을 그렇게 좋아할까요?"
* "스프링을 모르고 개발하면, 마치 맨손으로 피라미드를 쌓는 것과 같다고?"

### 🧩 **활동**

> 간단한 퀴즈 :
> "Spring과 가장 관련 없는 것은?
> (1) IoC   (2) DI   (3) MVC   (4) 엘리베이터"

> → **(힌트)** 스프링은 개발을 더 빠르고, 더 덜 아프게 만들어주는 프레임워크입니다.

### 🔥 **흥미요소**

* 밈(Meme) 삽입:
  !\[이미지: ‘Without Spring vs With Spring’ - 복잡한 코드 vs 깔끔한 코드]

---

## 2. **학습 목표 제시**

(가네 Step 2 : 학습 목표 제시 / ARCS - Relevance)

### 🎯 **오늘의 목표**

* 스프링 프레임워크의 기본 개념을 이해한다.
* IoC와 DI의 원리를 직접 코드로 체험한다.
* 간단한 컨트롤러를 만들어본다.
* ‘왜’ 스프링을 사용하는지, 실무와 연결해서 이해한다.

---

## 3. **선수 학습 상기 및 실생활 연결하기**

(가네 Step 3 : 선수학습 상기 / ARCS - Relevance)

### 🛠️ **기억 소환**

* 객체지향 프로그래밍(OOP)을 배웠나요?
* Java 클래스를 만들고 객체를 new로 생성했던 경험이 있나요?

### 🧩 **문제 제기**

> "클래스가 수백, 수천 개가 된다면, new로 다 만들 건가요?"

### 🎯 **실생활 비유**

* 스프링은 개발자가 'new'를 하지 않고도 필요한 객체를 '자동 배달' 받는 시스템입니다. (마치 **쿠팡 로켓배송**)

---

## 4. **주요 개념/핵심 키워드를 최고의 암기법에 의해 제시**

(가네 Step 4 : 자극 제시 / ARCS - Confidence)

### 🔑 **핵심 키워드**

* **IoC** (Inversion of Control) = 통제권의 역전
* **DI** (Dependency Injection) = 의존성 주입
* **컨테이너** = 객체 보관소
* **빈(Bean)** = 스프링이 관리하는 객체

### 🧠 **암기 팁 (웃긴 기억법)**

* IoC = **이**젠 **오**브젝트를 **C**ontainer에게 맡겨!
* DI = **디**펜던시는 **이**리와!
* **빈** = **빈**그릇처럼 비어있던 객체를 스프링이 채워준다!

---

## 5. **학습 목표별 탐구형 학습**

(가네 Step 5 : 학습 안내 / ARCS - Confidence)

### 🔍 **탐구 과제**

* (의문) : "new 없이 객체를 만들려면 어떻게 해야 할까?"
* (탐색) : IoC 컨테이너를 만들고, @Component, @Autowired를 사용해보기.

### 🧩 **힌트**

* 스프링이 '대신 new 해주겠다'고 약속한 것.
* **@Component**로 등록하고, **@Autowired**로 주입받으면 끝!

---

## 6. **실습 활동 및 협력 학습 유도**

(가네 Step 6 : 수행 유도 / ARCS - Satisfaction)

### 💻 **실습**

> **Step 1.** Spring Boot Project 생성 (Start.spring.io)
> **Step 2.** 간단한 HelloController 작성
> **Step 3.** @Component로 Service 만들고, Controller에서 주입

### 🧩 **미션**

> "Hello, Spring!" 메시지를 출력하되, 메시지를 Service에서 가져오기

### 🤝 **협력 학습**

* 2인 1조 팀 미션: “누가 더 짧고 우아하게 코딩할 수 있을까?”
* 코드를 3문장 이내로 설명하는 발표하기!

---

## 7. **단계별 피드백 제공과 자기 평가 기회**

(가네 Step 7 : 피드백 제공 / ARCS - Confidence)

### ✅ **피드백 포인트**

* @Component와 @Autowired를 제대로 썼나요?
* 객체 생성과 주입이 정상적으로 이루어졌나요?

### ✍️ **자기 평가 체크리스트**

* [ ] IoC, DI 개념을 설명할 수 있다.
* [ ] 직접 @Component로 Bean을 등록해봤다.
* [ ] Controller와 Service가 연결된 구조를 코딩했다.

---

## 8. **수행 평가 및 피드백 제공**

(가네 Step 8 : 수행 평가 / ARCS - Satisfaction)

### 📝 **미니 퀴즈**

* Q1. IoC란 무엇인가요? (20자 이내)
* Q2. DI의 장점은 무엇인가요? (20자 이내)

### 🎯 **피드백**

> 틀려도 괜찮아!
> 틀린 답변은 다음 실습의 힌트로 삼자.

---

## 9. **학습 전이 강화와 실제 문제 적용 활동**

(가네 Step 9 : 파지와 전이 강화 / ARCS - Satisfaction)

### 🔥 **실무형 미션**

> \[챌린지]
>
> * 간단한 ‘회원가입' 기능 만들기
> * Controller, Service, Repository 계층 나누어 설계

### 🧩 **실제 문제**

> “회원 정보를 입력하면, 데이터가 출력되는 미니 시스템을 스프링 구조로 만들어보세요.”

---

## 10. **학습 반성 및 향후 학습 준비**

(가네 추가 - 자기반성 유도 / ARCS - Satisfaction + Relevance)

### 🧠 **리플렉션(Reflection)**

* 오늘 가장 어려웠던 부분은?
* IoC/DI가 앞으로 내 개발에 어떻게 도움이 될까?
* 다음 시간엔 어떤 개념을 다루면 좋을까?

### 📝 **학습 일기 작성**

> "오늘 스프링에서 얻은 가장 큰 깨달음은 \_\_\_\_\_\_\_\_\_\_\_\_\_\_\_ 이다."

---

