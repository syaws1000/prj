'''
# 튜플
1. 여러 개의 데이터를 하나의 그룹으로 묶는 불변(immutable) 자료형
2. 변경할 수 없도록 고정된 값을 저장하거나, 속도가 빠르고 안전한 데이터 저장시 활용
3. 괄호 ()로 묶기도 하고, 쉽표로 구분하기도 한다. 
   ex1) t1 = (100,200,300)
   ex2) t2 = 100,200,300
   ex3) t3 = (100)  (x)  괄호가 튜플데이터의 핵심이 아니라
   ex3) t4 = 100,  (o)   ,(콤마)가 튜플데이터의 핵심 코드이다.
4. 순서가 있고, 인덱싱 가능, 슬라이싱 가능, 반복 가능, 수정 불가..   
'''
t1 = (1,2,3)
t2 = 'apple', 'banana', 'cherry'
t3 = () # 빈튜플 (주의)
t4 = (100) # 튜플데이터 아님 그냥 100 할당 (주의)
t5 = 200, # 튜플데이터 한개짜리 튜플데이터
t6 = (100,) # 한개짜리 튜플데이터
print(f'{t1} : {type(t1)}') 
print(f'{t2} : {type(t2)}') 
print(f'{t3} : {type(t3)}') 
print(f'{t4} : {type(t4)}') 
print(f'{t5} : {type(t5)}') 
print(f'{t6} : {type(t6)}') 
# 튜플 데이터를 index로 접근 가능
print(f'두번째 데이터:{t2[1]}')
# 튜플 데이터는 추가/수정/구성요소 삭제 등으로 변경 불가..
#t2[0] = 'orange' 에러 발생..
# 튜플 데이터는 list()를 통해서 형변환 후, 구성요소에 대한 변경 처리를 한 후, 다시 튜플데이터 tuple()로 형변환을 통해서
# 처리 후, 사용가능 하다..
l2 = list(t2)
l2[0] = 'orange'
t2 = tuple(l2)
print(f'다시 형변환 후 t2:{t2}') 

# ex1) 위 튜플선언 형식을 확인하고, 1 개데이터 할당하는 튜플 형식 2개와, 학생의 점수 3개를 할당하는 튜플형식 2개를 선언하세요..
tp1 = 100,
tp2 = (200,)
stuTp3 = (70,80,90)
stuTp4 = 80,90,100
print(f'{tp1} : {type(tp1)}')
print(f'{tp2} : {type(tp2)}')
print(f'{stuTp3} : {type(stuTp3)}')
print(f'{stuTp4} : {type(stuTp4)}')
# ex2) 튜플로 선언된 학생점수에 2개의 점수를 할당하려고 한다 처리하는 방법을 구현하고 출력하세요..
stuLs4 = list(stuTp4)
stuLs4.extend([90,85])
stuTp4 = tuple(stuLs4)
print(f'{stuTp4} : {type(stuTp4)}')


'''
# 튜플 데이터 언팩킹 처리(값 나누기)
1. 튜플형 데이터는 선언형식이 같으면, 해당 변수에 할당이 된다.
2. 기본 형식
   변수1, 변수2, 변수3 = 데이터1, 데이터2, 데이터3
   변수1, 변수2, 변수3 = (데이터1, 데이터2, 데이터3)
   각각 변수1, 변수2, 변수3에 해당 데이터가 할당이 되어 처리된, 이것을 튜플 데이터 언택킹이라는 개념으로 사용된
'''
student = ('홍길동', 80, 95)
name, kor, eng = student
print(f'이름:{name}')
print(f'국어:{kor}')
print(f'영어:{eng}')

# ex) person의 기본 정보인 이름, 나이, 사는 곳을  pname, age, loc에 할당 처리하고 출력하세요..

person = ('마길동', 25, '성남')
pname, age, loc = person
print(f'이름:{pname}')
print(f'나이:{age}')
print(f'사는곳:{loc}')

kor, eng, math = 80, 90, 100
print(f'국어:{80}')
print(f'영어:{90}')
print(f'수학:{100}')



