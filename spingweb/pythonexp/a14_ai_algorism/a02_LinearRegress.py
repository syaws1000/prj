'''
# 선형 회귀
1. 개념접근
    상상해보세요. 여러분이 아이스크림 가게 주인이에요. 날씨가 더울수록 아이스크림이 더 많이 팔이는 것 같은데,
    과연 얼마나 더 많이 팔릴까요? 내일 기온이 30도가 되면 아이스크림은 몇 개나 팔릴지 미리 알 수 있다면 정말 좋겠죠?
    선형 회귀는 바로 이럴 때 사용하는 마법의 자와 같습니다.
    여러 날 동안의 기온과 그날 팔린 아이스크림 판매량을 종이 위에 점으로 콕콕 찍어보는 겁니다
    20도일 때, 10개 팔림(점 하나 콕!)
    25도일 때, 20개 팔림(점 하나 콕!)
    28도일 때, 25개 팔림(계속 콕콕!!)

    이렇게 점들을 찍다 보면, 점들이 대충 비스듬한 직선 모양으로 늘어서 있는 것을 발견할 수 있습니다.

    선형 회는 이 점들을 가장 잘 대표하는 하나의 직선을 쫙하고 그어주는 마법과 같습니다.
    이 직선이 바로 우리가 찾던 마법의 자입니다.
2. 선형회귀란? 데이터의 패턴을 직선으로 파헤치기
    선형 회귀는 통계학과 머신러닝에서 가장 기본적이면서도 널리 사용되는 예측 모델 중 하나입니다.
    하나 이상의 독립변수(설명변수)와 종속 변수(반응변수)사이의 관계를 가장 잘 나타내는 직선(초평면)을 찾는 것이
    핵심입니다. 즉, 데이터의 패턴을 파악하여 새로운 데이터의 대한 값을 예측하는 데 사용합니다.
3. 주요 개념
    1) 독립 변수(Independent Variables) : 예측에 사용된는 입력 값으로, 다른 변수에 영향을 주지 않는 변수
        (공부시간, 집 크기)
    2) 종속 변수(Dependent Variables) : 예측하고자 하는 목표 값으로, 독립 변수의 변화에 따라 값이 변하는
        변수(시험 점수, 집값)
    3) 가설 함수(Hypothesis Function) : 독립변수와 종속 변수 사이의 관계를 타하내는 수학식. 단순 선형
        회기(독립 변수가 하나의) 경우. 직선의 방정식은 H(x) = Wx + b형태로 표현됩니다.
    3) 가중치(Weight, W) : 독립변수가 종속변수에 얼라나 큰 영향을 미치는 지를 나타내는 값으로, 직선의
        기울기에 해당합니다. 가중치가 크면 독립 변수의 작은 변화에도 종속 변수가 크게 변합니다.
    4) 편향(Bias, b) : 모든 독립변수가 0일 때의 종속 변수 값으로, 직선의 y절편에 해당합니다. 데이터의
        기본적인 수준을 나타냅니다.
    5) 비용 함수(Cost Function)/손실 함수(Loss Function) : 모델이 예측한 값과 실제 값 사이의 차이,
        즉, 오차를 측정하는 함수입니다.가장 대표적인 비용 함수는 평균 제곱 오차이며, 모든 데이터에 
        대한 오차의 제곱 평균을 구합니다. 선형 회귀의 목표는 이 비용 함수를 최소화하는 가중치(W)와 
        편향(b)를 찾는 것입니다.     

# 선형회귀(마법의 자)는 어디에 쓸까요? 미래 예측
1. 이제 마법의 자(직선)가 생겼으니 무엇을 할 수 있을까요? 바로 미래 예측입니다.
   만약 내일 기온이 30도라고 예보되면, 우리가 그린 직선을 따라가 보는 겁니다. 기온이 30도인 지점에서 위로 쭉
   올라가 직선과 만나는 곳을 찾고, 그곳의 아이스크림 판매량이 몇 개인지 읽으면 됩니다.
   아마 30개 정도 팔릴 거라고 예측할 수 있겠죠?
2. 이렇게 어떤 값(기온)이 변할 때 다른 값(아이스크림 판매량)이 어떻게 변하는지 관계를 파악하고 미래를 예측하는 것이
    바로 선형 회귀의 핵심입니다.
# 정리
  선형회귀(Linear Regression)는 여러 점들 사이를 가장 잘 지나가는 직선(마법의 자)를 찾아서, 앞으로 일어날 일들을
  예측하는 방법입니다.

  우리 주변에도 선형 회귀로 예측할 수 있는 것들이 아주 많죠?
  - 키가 클수록 몸무게는 얼마나 늘어날까요?
  - 공부시간이 늘어나면 시험점수는 얼마나 오를까요?
  - 유튜브 영상 길이가 길어지면 조회는 어떻게 변할까요?

# 파이썬 코드로 선형회귀(마법의 자)를 찾아볼까요?
1. 이제 파이썬이란느 프로그래밍 언어로 직접 마법의자(직선)을 찾아보는 코드를 만들어 봅시다.
    컴퓨터에게 기온과 아이스크립 판매량 데이터를 주고, 직접 직선을 그리게 하는 겁니다.

2. 기온이 27일 때, 예측된느 아이스크림 판매량을 약 22개 입니다.

3. 멋진 그래프로 그려줍시다. 파란 점들이 실제 데이터이고, 빨간 선이 바로 컴퓨터가 찾아낸 마법의 자입니다.
    우리가 예측한 27도일 때의 판매량은 초록색 큰 점으로 표시되었네요..
   
'''
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# 1. 데이터 준비 : "오늘은 이만큼 더웠더니, 아이스크림이 이만큼 팔렸어!"
# 기온(독립 변수 X) - 원인
temperature = np.array([20,22,25,28,30,31]).reshape(-1,1)
print(temperature)
# 아이스크림 판매량(종속 변수 y) - 결과
ice_cream_sales = np.array([10,12,18,24,28,32])

# 2. 마법의 자(선형 회귀 모델) 준비 및 학습
# 이 데이터에 꼭 맞는 마법의 자를 찾아줘 하고 컴퓨터에게 시키는 과정
model = LinearRegression()
model.fit(temperature, ice_cream_sales)

# 3. 예측하기 : 내일 기온이 27라면, 아이스크림은 몇 개 팔릴까?
tomorrow_temp = np.array([[27]]) # 27도를 2차원 배열로 만들어 줘야 해요..
#tomorrow_temp = np.array([[27],[35]]) # 27,35도를 2차원 배열로 만들어 줘야 해요..
predicted_sales = model.predict(tomorrow_temp)

print(f"기온이 27일 때, 예측되는 아이스크림 판매량은 약 {predicted_sales[0]:.0f}개 입니다")
#print(f"기온이 35일 때, 예측되는 아이스크림 판매량은 약 {predicted_sales[1]:.0f}개 입니다")


plt.rc('font', family='Malgun Gothic')

# 4. 마법의 자가 잘 그려졌는지 눈으로 확인 해봐요.
plt.scatter(temperature, ice_cream_sales, color="blue", label="실제 판매량 점") # 실제 데이터 점 찍기
plt.plot(temperature, model.predict(temperature), color="red", label="마법의 자(예측선)") # 모델이 찾는 직선 그리기
plt.scatter(tomorrow_temp,predicted_sales, color="green", s=100, label="27일 때 예측", zorder=5)
# 예측한 크기 찍기

# 그래프 꾸미기
plt.title("기온과 아이스크림 판매량의 관계") # 제목
plt.xlabel("기온 (C)") # x축이름
plt.ylabel("아이스크림 판매량(개)") # y축 이름
plt.legend() # 어떤 선이 무엇인지 설명
plt.grid(True) # 격자무늬 추가
plt.show() # 그래프 보여주기
# a03_LinearExp.py   
#  공부량에 따른 시험 점수  독립변수  [2,3,5,7,8,10], 종속 변수[55,60,70,80,85,95]
#     12시간 했을 때, 시험 결과 점수 처리..
