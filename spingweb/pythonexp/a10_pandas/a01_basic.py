'''
# 판다스(Pandas) 개요 
1. 판다스는 파이썬 데이터 분석의 핵심 라이브러리로, 데이터 조작과 분석을 위해 특별히 설계되었습니다.
    R의 dataframe과 유사한 DataFrame이라는 강력하고 유연한 데이터 구조를 제공하여, 정형 데이터를 쉽고
    직관적으로 다룰 수 있게 해줍니다.
2. 판다스의 핵심 기능
    1) 데이터의 입출력 : CSV, Excel, SQL 데이터베이스 등 다양한 형식의 데이터를 손쉽게 읽고 쓸 수 있습니다.
    2) 데이터 정제 : 누락된 데이터(NaN)를 쉽게 처리하고, 데이터를 필터링하거나 정렬할 수 있습니다.
    3) 데이터 조작 및 변환 : 데이터의 형태를 바꾸거나(pivot), 여러 데이터프레임을 병합하고(merge/join),
        특정 조건에 따라 데이터를 그룹화(group by)하여 집계 연산을 수행 할 수 있습니다.
    4) 시계열 데이터 처리 : 날짜와 시간 데이터를 다루는 데 특화된 강력한 기능을 제공합니다.
    5) 효율적인 데이터 구조 : Series(1차원)와 DataFrame(2차원)이라는 핵심 데이터 구조를 통해 대용량
        데이터도, 효율적으로 처리합니다.

# Series
1. 판다스의 Series는 1차원 배열 형태의 데이터 구조로, Numpy 배열과 비슷하지만 인덱스(index)라는 라벨을
    가지고 있다는 점이 가장 큰 차이점입니다. 마치 한 개의 열(column)만 있는 엑셀 시트나 값마다 이름표가
    붙어 있는 리스트라고 생각할 수 있습니다.
2. 주요 기능 및 메서드
    1) 인덱싱/슬라이싱 : 라벨 또는 위치를 기반으로 특정 데이터에 접근하거나 잘라냅니다.
    2) values, index : Series의 값(Numpy 배열)과 인덱스 객체를 각각 반환합니다.
    3) 산술 연산 : 숫자 데이터의 경우 덧셈, 곱셈 등 기본적인 수학 연산이 가능합니다.
    4) isnull(), notnull() : 각 데이터가 비어 있는지(결측치, NaN) 아닌지 확인하여 boolean Series로 
        반환합니다.
    5) dropna(), fillna() : 결측치(NaN)를 제거하거나 다른 값으로 채웁니다.
    6) describe() : 숫자 데이터의 개수, 평균, 표준편차, 최소/최대값 등 주요 통계를 요약하여 보여줍니다.
    7) value_counts() : 각 고유 값들이 몇 번씩 나타나는지 개수를 셉니다. 카테고리형 데이터에 유용합니다.
    8) apply(func) : Series의 모든 값에 func 함수를 일과적으로 적용합니다.        
'''
import pandas as pd
import numpy as np
# 기본 리스트로 Series 생성
# 자동으로 0부터 시작하는 숫자 인덱스가 부여됩니다.
s_default = pd.Series([10,20,30,40])
print("## 기본 Series:\n", s_default)
# ex) 학생5명 점수를 Series로 선언하여 출력하세요..
s_points = pd.Series([70, 80, 90, 100,85])
print("## 학생들의 점수 ##\n", s_points)

# 인덱스를 직접 지정하여 Series 생성
# 각 값에 'a', 'b', 'c', 'd'라는 이름표(인덱)를 붙여줍니다.
s_custom_index = pd.Series([10,20,30,40], index=['a','b','c','d'])
print("## 커스턴 인덱스 Series:\n", s_custom_index)
# ex) 편의점 점장이 가계에 있는 물품드의 재고를 파악하기 위해 Series를 만들려고 합니다.
#     물품 이름을 인덱스로, 재고 수량을 값으로 하는 Series를 만들어 보세요
#     물품  "삼각김밥", "바나나 우유", "컵라면", "초코파이"
#     재고  10, 15, 8, 20

# 물품 이름과 재고 수량으로 Series 생성
inventory = pd.Series([10,15,8,20], index=['삼각김밥','바나나우유','컵라면','초코파이'], name="물품별 재고 수량")
# name은 이름을 지정하여 처리..
print(inventory)
# 개별적인 데이터를 index로 접근하여 수량을 확인..
print(inventory['삼각김밥'])
# dictionary 형태로 설정 처리
stats_dict = {"힘":120, "민첩":95, "지능":70, "행운":88}
char_stats = pd.Series(stats_dict)
print("## dic형태 Services ##")
print(char_stats)
# 인덱스 라벨로 접근
print("힘의 능력:",char_stats['힘'] )
# 여러 인덱스로 접근..
print("민첩과 지능 접근\n", char_stats[['민첩','지능']])
# 숫자 위치(0부터 시작)로 접근
print("첫번째 값:", char_stats[0])
# 슬라이싱(1번 위치부터 3번 위치 전까지)
print("1번 위치 ~ 3번 위치전까지:\n", char_stats[1:3] )
'''
ex) 당신은 단골 카페의 메뉴판을 Series로 만들었습니다. 손님이 아메리카노랑 카페라떼 얼마예요?라고
물어본다. 메뉴판에서 두 음료의 가격만 골라서 보여주세요, 3번째에서 4번째 메뉴를 보여주세요..
1) 메뉴판
    아메리카노 : 3000
    카페라떼  : 3500
    카퓨치노 : 3500
    바닐라라떼 : 4000
'''
menu_dict = {"아메리카노":3000,"카페라떼":3500,"카푸치노":3500,"바닐라라떼":4000}
menu = pd.Series(menu_dict)
print("## 전체 메뉴 ##\n", menu)
selected_menu = menu[['아메리카노','카페라떼']]
print("## 손님이 주문한 메뉴 가격 ##\n", selected_menu)
slice_menu = menu[2:4] # slice index:순서
print("3번째에서 4번째 메뉴:\n", slice_menu)


