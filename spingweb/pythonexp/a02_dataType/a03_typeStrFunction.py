'''
# 문자열이 지원하는 기능 함수(내장 함수)
1. 문자열은 활용도가 높기에 여러가지 함수가 내장되어 지원되고 있다.
2. 함수라는 것은 기능적인 처리를 매개변수를 통해서 받아서 처리할 때, 사용되는 개념이다.
3. 문자열이 사용되는 주요 함수/메서드
    1) len(문자열데이터) : 문자열의 길이를 반환해준다.
    2) 문자열.upper() : 대문자로 변환처리
    3) 문자열.isupper() : 모두 다 대문자이면 True
    4) 문자열.lower() : 소문자로 변환처리
    5) 문자열.islower() : 모두 다 소문자이면 True
    6) 문자열.count("확인할 문자") : 해당 문자가 포함되어 있는 갯수 리턴 
    7) 문자열.find("찾을 문자열")
       문자열.find("찾을 문자열", 찾을시작index위치)
       문자열.find("찾을 문자열", 찾을시작index위치, 찾을 마지막 index위치)


# 문자열 절삭처리(index에 의해 처리.)
1. 문자열은 index에 의해 절삭해서 데이터를 추출해서 사용할 수 있다.
2. 기본 형식
   1) 문자열[index번호]  ex) str1 = '홍길동 안녕하세요'   str1[1] "길"
   2) 문자열[시작:마지막]  ex)  str1[1:3]  ==> "길동"   
   3) 문자열[시작:]  ex) str1[2:] ==> "동 안녕하세요"
   4) 문자열[:마지막] ex) str1[:3]  ==> "홍길동"



'''
str1 = "홍길동"
str2 = "안녕하세요"
str3 = "오늘도 유익한 날이었네요"
print(f'문자열의 길이:{len(str1)}, {len(str2)}, {len(str3)}')
# ex) 전달할 메시지를 입력하세요라고 input으로 입력하고, 입력한 문자와 문자열의 크기를  (@@/50) 형식으로
#    출력하세요.
# msg = input("전달할 메시지를 입력하세요!")
# print(f'''메시지 내용:{msg}
# ({len(msg)}/50)''')
# 대소문자 변환 처리
var1 ="First Python"
print(f' 모두 다 대문자로 {var1.upper()}')
print(f' 모두 다 소문자로 {var1.lower()}')
var2 = var1.upper()
print(f'모두 다 대문자인지? {var2.isupper()}')
var3 = var1.lower()
print(f'모두 다 소문자인지? {var3.islower()}')

# ex) 영문을 명언을 검색해서, 해당 명언으로 소문자로 모두 변환 후, 모두 소문자인지 여부를 check하는
# 내용을 출력하세요..
saying = '''"The only thing we have to fear is fear itself."
— Franklin D. Roosevelt
'''
toLowersaying = saying.lower()
print(f'{toLowersaying}\n소문자인지 여부{toLowersaying.islower()}')

var4 = '''
파이썬(Python)은 1990년 암스테르담의 귀도 반 로섬(Guido van Rossum)이 개발한 인터프리터 언어이다. 귀도는 파이썬이라는 이름을 자신이 좋아하는 코미디 쇼인 ‘몬티 파이썬의 날아다니는 서커스(Monty python's flying circus)’에서 따왔다고 한다.

인터프리터 언어란 소스 코드를 한 줄씩 해석한 후 그때그때 실행해 결과를 바로 확인할 수 있는 언어를 말한다.

파이썬의 사전적 의미는 ‘고대 신화에 나오는 파르나소스 산의 동굴에 살던 큰 뱀’을 뜻하며, 아폴로 신이 델파이에서 파이썬을 퇴치했다는 이야기가 전해지고 있다. 대부분의 파이썬 책 표지와 아이콘이 뱀 모양으로 그려져 있는 이유는 바로 이 때문이다.

파이썬은 컴퓨터 프로그래밍을 교육할 때뿐만 아니라 기업에서 실무를 할 때도 많이 사용한다. 그 대표적인 예가 바로 구글이다. 구글에서 만든 소프트웨어의 50% 이상이 파이썬으로 작성되었다는 이야기도 있을 정도이다. 이 밖에도 인스타그램(Instagram), 넷플릭스(Netflix), 아마존(Amazon) 등 우리가 알고 있는 많은 IT 기업에서 파이썬을 사용한다.

또한 파이썬 프로그램은 공동 작업과 유지 보수가 매우 쉽고 편리하다. 이 때문에 이미 다른 언어로 작성된 많은 프로그램이 파이썬으로 재구성되고 있다. 국내에서도 그 가치를 인정받아 사용자 층이 더욱 넓어지고 있고 파이썬을 사용해 프로그램을 개발하는 업체 또한 늘어나고 있는 추세이다.
'''
countPython = var4.count("파이썬")
print(f'해당 문장에서 파이썬의 갯수:{countPython}')

# ex) 위키백과사전에 '프로그래밍'으로 검색하여 해당 내용을 var5에 할당한후,
#     확인할 문자열을 입력받아서    해당 문장에서 포함된 문자열의 갯수를 출력하세요..
#     검색한 문자열 @@@@,  검색된 갯수 @@@
var5 = '''
컴퓨터 프로그래밍(영어: computer programming) 또는 간단히 프로그래밍(programming, 문화어: 프로그램 작성) 혹은 코딩(coding)은 하나 이상의 관련된 추상 알고리즘을 특정한 프로그래밍 언어를 이용해 구체적인 컴퓨터 프로그램으로 구현하는 기술이다.[1] 프로그래밍은 기법, 과학, 수학, 공학, 심리학적 속성들을 가지고 있다.

한편 코딩은 '작업의 흐름에 따라 프로그램 언어의 명령문을 써서 프로그램을 작성하는 일' 또는 '프로그램의 코드를 작성하는 일'로 크게 나누어 언급되고 있는데 이는 알고리즘과의 상관관계를 잘 언급하고 있다.

프로그래밍 언어
 이 부분의 본문은 프로그래밍 언어입니다.

에이다 러브레이스, 최초의 컴퓨터 프로그래머.
특정한 프로그래밍 언어로 쓰인 프로그램은 기계어로 번역되어 컴퓨터에 의해 실행되며, 어떤 프로그래밍 언어도 기계어로 번역이 가능하다. 어떤 언어에서는 기계어 대신 p-부호로 불리는 바리를 생성하기도 한다. 프로그래머가 기계 부호로 직접 작성하는 것도 가능하지만, 이는 굉장히 어려운 작업이다. 때문에 낮은 수준에서의 컴퓨터 제어가 필요한 경우 프로그래머들은 기계어 명령어에 대한 일대일 연상 기호 대응인 어셈블리어를 사용한다.

서로 다른 프로그래밍 언어는 다른 프로그래밍 유형을 지원하기 때문에, 분야에 따라 적합한 언어가 존재한다. 또한 언어마다 프로그래머가 알고리즘을 구현할 때 그 구체적인 방법과 수준의 차이가 있기 때문에, 사용의 편의성과 성능 사이에서 적절한 타협이 이루어진다. 또한 프로그래밍의 언어 중 하나이며 컴퓨터에게 명령을 전달할 수 있다.

'''
searchWord = input("검색할 문자열 입력:")
print(f"검색한 문자열:{searchWord}, 검색된 갯수:{var5.count(searchWord)}")
