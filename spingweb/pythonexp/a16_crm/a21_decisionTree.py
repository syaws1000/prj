'''
좋은 질문입니다!
**Decision Tree (결정 트리)** 는 CRM 시스템에서 **고객의 행동을 조건문 기반으로 예측**할 때 매우 강력하게 활용됩니다.
특히 *이해하기 쉽고, 시각화 가능하며, 규칙 기반 마케팅에 매우 적합*합니다.

---

## ✅ CRM 시스템에서 Decision Tree로 예측할 수 있는 항목들

| 예측 항목                             | 설명                          |
| --------------------------------- | --------------------------- |
| ❌ **고객 이탈 예측 (Churn Prediction)** | 고객이 서비스/구매를 중단할 가능성 분류      |
| 💡 **캠페인 반응 예측**                  | 이메일, SMS 등 마케팅 캠페인에 반응할지 분류 |
| 🛒 **상품 구매 여부 예측**                | 특정 상품 또는 카테고리의 구매 여부 예측     |
| 💳 **할인 쿠폰 반응 예측**                | 쿠폰을 발송했을 때 실제로 사용할지 여부      |
| 📞 **콜센터 이탈/불만 예측**               | 고객 문의 후 불만 제기 혹은 이탈 가능성 예측  |
| 🧍 **잠재 VIP 고객 분류**               | VIP로 전환 가능성이 높은 고객 분류       |
| 🧾 **결제 연체 가능성 예측**               | 고객이 연체할지 여부 판단              |

---

## 🎯 예시: 고객 이탈 예측 (Churn Prediction)

### 📌 특성 데이터 예시

| 고객\_ID | 최근구매일수 | 총구매액  | 구매횟수 | 불만제기횟수 | 이탈여부   |
| ------ | ------ | ----- | ---- | ------ | ------ |
| C001   | 30일    | 50000 | 3    | 1      | 0 (유지) |
| C002   | 120일   | 20000 | 1    | 3      | 1 (이탈) |

---

### 📌 파이썬 핵심 코드 예제

```python
import pandas as pd
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
import matplotlib.pyplot as plt

# 샘플 데이터
data = pd.DataFrame({
    '최근구매일수': [30, 120, 45, 10, 200],
    '총구매액': [50000, 20000, 30000, 70000, 10000],
    '구매횟수': [3, 1, 2, 5, 1],
    '불만제기횟수': [1, 3, 0, 0, 5],
    '이탈여부': [0, 1, 0, 0, 1]
})

X = data[['최근구매일수', '총구매액', '구매횟수', '불만제기횟수']]
y = data['이탈여부']

# 모델 학습
model = DecisionTreeClassifier(max_depth=3, random_state=0)
model.fit(X, y)

# 새로운 고객 예측
new_customer = [[60, 30000, 2, 2]]
print("예측된 이탈 여부:", model.predict(new_customer)[0])

# 트리 시각화
plt.figure(figsize=(12, 6))
tree.plot_tree(model, feature_names=X.columns, class_names=['유지', '이탈'], filled=True)
plt.title("고객 이탈 예측 결정 트리")
plt.show()
```

---

## 📊 실무 적용 이유

| 장점                      | 설명                                     |
| ----------------------- | -------------------------------------- |
| ✅ **해석 가능**             | “불만횟수가 2 이상이면 이탈” 같은 **룰 기반 전략 수립 가능** |
| ✅ **시각화 용이**            | 마케팅/영업팀과의 소통에 좋음                       |
| ✅ **범주형, 수치형 모두 사용 가능** | 나이, 금액, 카테고리 등 혼합 가능                   |
| ✅ **빠른 예측 속도**          | 실시간 분류 시스템에 적합                         |

---

## 🤖 실무 예시 응용

| 업무               | 적용 예                                         |
| ---------------- | -------------------------------------------- |
| 🧩 **이탈 예측**     | 이탈 가능성이 높은 고객에게만 리마케팅 발송                     |
| 🎯 **이벤트 대상 선정** | 반응 가능성 높은 조건 추출(예: 총구매 3회 이상 & 최근 60일 내 구매자) |
| 👑 **우수 고객 선별**  | "총구매액이 10만원 이상 & 불만 제기 0회" → VIP 후보 분류       |
| 📈 **영업 전략**     | “30일 이상 구매 없는 고객 + 불만 1회 이상” → 관리대상 자동 분류    |

---

## 🔁 확장 알고리즘

| 확장 모델                  | 설명                         |
| ---------------------- | -------------------------- |
| **랜덤 포레스트**            | 여러 트리를 조합하여 과적합 방지, 정확도 향상 |
| **XGBoost / LightGBM** | 대규모 데이터 & 고정밀도 예측에 적합      |
| **의사결정규칙 추출**          | 트리 모델을 룰 기반 마케팅 자동화에 응용    |

---

## 📌 결론

> **Decision Tree는 CRM에서 "조건 기반 예측 + 마케팅 전략 수립"에 최적화된 알고리즘**입니다.
> 특히 **고객 이탈 예측, 반응 분석, VIP 분류** 등에서 실시간 대응과 인사이트 도출에 매우 유용합니다.

---

원하시면:

* "캠페인 반응 예측" 사례
* "구매 여부 분류" 실제 예제
* 또는 `graphviz` 기반 더 고급 시각화 도구도 제공해 드릴 수 있어요.
  원하시는 방향을 말씀해 주세요 😊


결정 트리(Decision Tree)는 머신러닝에서 사용되는 **지도 학습(Supervised Learning)** 알고리즘으로, 데이터를 분류하거나 예측하는 데 사용됩니다. 사람이 의사결정을 하는 방식과 유사하게 **질문을 따라가며 분기**하는 구조입니다.

---

## 🌳 결정 트리 핵심 개념

### ✅ 1. **정의**

* 데이터를 **조건에 따라 나누며** 트리 형태로 분류/예측하는 알고리즘입니다.
* **"예/아니오" 질문을 통해 가지를 뻗어나가며** 최종 결정에 도달합니다.

---

## 📌 작동 순서

1. **특징(feature)** 중에서 데이터를 가장 잘 나누는 조건을 선택합니다.
2. 그 조건으로 데이터를 두 그룹으로 나눕니다.
3. 나뉜 그룹에 대해 다시 1\~2단계를 반복합니다.
4. 더 이상 나눌 수 없을 때(또는 조건 만족 시) \*\*잎 노드(leaf)\*\*가 됩니다.

---

## 🧠 핵심 개념 암기법

| 단계 | 암기 문장                   |
| -- | ----------------------- |
| 1  | “어디서 나눌까? → 조건을 찾아!”    |
| 2  | “질문 던지고 → 대답 따라 가지쳐”    |
| 3  | “계속 나누다가 더 못 나누면 → 정답!” |

---

## 🎯 핵심 파라미터 (암기법: **"MAX-DEPTH-SPLIT-LEAF"**)

| 파라미터                | 설명                     |
| ------------------- | ---------------------- |
| `criterion`         | 불순도 지표 (gini, entropy) |
| `max_depth`         | 트리의 최대 깊이              |
| `min_samples_split` | 분할하기 위한 최소 샘플 수        |
| `min_samples_leaf`  | 리프 노드가 가져야 할 최소 샘플 수   |

---

## 💻 파이썬 코드 예제 (Scikit-learn)

```python
from sklearn.datasets import load_iris
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
import matplotlib.pyplot as plt

# 1. 데이터 불러오기
iris = load_iris()
X = iris.data
y = iris.target

# 2. 모델 학습
clf = DecisionTreeClassifier(criterion='gini', max_depth=3)
clf.fit(X, y)

# 3. 시각화
plt.figure(figsize=(12,8))
tree.plot_tree(clf, feature_names=iris.feature_names, class_names=iris.target_names, filled=True)
plt.title("결정 트리 시각화")
plt.show()
```

---

## 🔍 시각적으로 기억하기 위한 팁

```
[꽃잎 길이 <= 2.5] ?
    ├── 예: setosa
    └── 아니오:
          [꽃잎 너비 <= 1.8] ?
              ├── 예: versicolor
              └── 아니오: virginica
```

---

## 🤖 결정 트리의 장점과 단점

| 장점               | 단점                  |
| ---------------- | ------------------- |
| 이해하기 쉽고 시각화 가능   | 과적합(overfitting) 우려 |
| 범주형/연속형 모두 처리 가능 | 데이터에 민감함            |
| 전처리 적음           | 작은 변화에 결과 달라짐       |

---

## 🧠 코드 암기 비법

* **모델 생성**: `DecisionTreeClassifier()` → 트리 한 그루 만들기
* **학습**: `.fit(X, y)` → 나무에 데이터 먹이기
* **예측**: `.predict(X_test)` → 나무가 대답하게 하기
* **시각화**: `tree.plot_tree()` → 그림 그려보기

---

## 🎓 결정트리 실전 활용 예시

| 분야  | 예시                 |
| --- | ------------------ |
| 마케팅 | 고객을 분류해 타겟 광고      |
| 금융  | 대출 승인 여부 판단        |
| 의학  | 증상에 따른 질병 진단       |
| 교육  | 학생 특성에 따른 학습 방법 추천 |

---

## 🎮 연습 미션

* `max_depth` 값을 2\~5로 바꿔보며 분류 정확도 변화 보기
* `criterion='entropy'` 로 바꾸고 결과 비교
* `export_text()`로 트리의 의사결정 규칙 출력해보기

---

원하시면 다음 주제인 **랜덤 포레스트(Random Forest)** 와 비교하거나, **트리 시각화 퀴즈**, 실전 분류 미션도 만들어 드릴게요!


'''
import pandas as pd

# 간단한 고객 이탈 데이터 생성
data = {
    '나이': [25, 40, 35, 50, 23, 45],
    '월_구매금액': [30000, 50000, 10000, 70000, 8000, 20000],
    '이용개월수': [3, 24, 1, 36, 2, 6],
    '이탈여부': [0, 0, 1, 0, 1, 1]  # 1: 이탈, 0: 유지
}

df = pd.DataFrame(data)
from sklearn.tree import DecisionTreeClassifier

# 입력(X)과 출력(y) 분리
X = df[['나이', '월_구매금액', '이용개월수']]
y = df['이탈여부']

# 모델 생성 및 학습
model = DecisionTreeClassifier(max_depth=3, random_state=0)
model.fit(X, y)

# 새 고객 예측
new_customer = [[30, 15000, 4]]
prediction = model.predict(new_customer)

print("이 고객은 이탈할까?", "✅ 이탈" if prediction[0] == 1 else "👍 유지")

from sklearn import tree
import matplotlib.pyplot as plt

plt.figure(figsize=(10,6))
tree.plot_tree(model, feature_names=['나이', '월_구매금액', '이용개월수'],
               class_names=['유지', '이탈'], filled=True)
plt.title("고객 이탈 예측 결정 트리")
plt.show()
