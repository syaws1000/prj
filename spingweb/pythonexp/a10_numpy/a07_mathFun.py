'''
# numpy의 수학적 통계 처리 기능 메서드
1. 수학은 그냥 기호대로, 집계는 점 찍고 이름 부르기
    사칙연산은 파이썬과 똑같이 기호를 사용하고, 합계나 평균 같은 집계 함수는 배열 뒤에 점(.)을
    찍고 함수 이름을 부르면 됩니다.
    1)  +, -, *, /  그냥 기호 사용
    2) .sum() : 점 찍고 sum(합계)
    3) .mean() : 점 찍고 mean(평균)
    4) .max()/.min() : 점 찍고 max/min (최대/최소)
    5) 조건 필터링 : arr[arr > 5] 배열 안에 조건을 그대로 넣기
'''
import numpy as np
arr1 = np.array([1,2,3])
arr2 = np.array([4,5,6])
# 합산 연산 처리 : 각, 배열의 index가 같은 것끼리 연산 처리
arr3 = arr1 + arr2  # 1 + 4, 2 + 5, 3 + 6
print("합산:", arr3)
arr4 = arr1*3000
print("곱한 값:", arr4)
'''
ex) 모험가가 여행을 시작하여 물약, 빵, 화살을 각각 5개, 10개, 30개씩 가지고 있었습니다.
첫 전투 후, 상자에 물약 3개, 빵 5개, 화살 10개를 추가로 얻었습니다. 현재 모험가가
가진 아이템의 총 개수는 몇 개인가요?

'''
item1 = np.array([5, 10, 30])
addItem = np.array([3, 5, 10])
curItem = item1 + addItem
print(f"현재 모험가 아이템 - 물약:{curItem[0]}개, 빵:{curItem[1]}개, 화살:{curItem[2]}")

# 집계 함수 처리 - 배열명.함수명()
arr5 = np.array([70, 80, 90])
print("점수의 총합산 :", arr5.sum())
print("점수의 평균 :", arr5.mean())
print("최고 점수 :", arr5.max())
print("최저 점수 :", arr5.min())
'''
ex) 행성을 오가면 물건을 파는 상인입니다. 지난 주 7일간 일일 수입(350, 420, 380, 800, 720, 950, 480)이 기록되어 있습니다.
일주일간의 평균 수입과 가장 수입이 좋았던 날의 금액을 계산하고, 마지막으로 위 내용을 지구의 원기준으로 *100000으로 처리하여
출력하세요..
'''
weekly_income = np.array([350, 420, 380, 800, 720, 950, 480])
print(f"평균 수입: {weekly_income.mean():.2f}" ) # 소숫점 2자리까지 표현
print(f"가장 수입이 좋았던 날의 금액:{weekly_income.max()}")
print(f"지구의 원기준 출력:{weekly_income*100000}")


arr6 = np.array([70,80,90,100,60])
print("80점 이상 배열:", arr6[arr6>=80])  
# 배열[배열의 조건식] : 해당 배열의 조건을 넣어서 filtering 할 때, 주로 사용된다.
# ex) 물건가격 1000, 2000, 3000, 5000, 7000 인 데이터에서 이 물건가격의 평균이상만 추출하여 배열을 리스트 하세요..
prices = np.array([1000, 2000, 3000, 5000, 7000])
overAvg = prices[prices>=prices.mean()]
print("평균이상인 가격들:", overAvg)


