# ajax를 이용한 음악엘범데이터 CRUD 처리
1. 배운 ajax로 화면과 DAO를 통해서 리스트, 등록, 상세데이터 확인, 수정, 삭제 처리를 한다.
2. 기본 정보
	1) 데이터
		
		CREATE TABLE music_albums (
		    album_id NUMBER PRIMARY KEY,
		    album_title VARCHAR2(100),
		    artist VARCHAR2(100),
		    release_date DATE,
		    genre VARCHAR2(50),
		    price NUMBER(6,2)
		);
		SEQUENCE 
		
		CREATE SEQUENCE album_seq;
		- 기본 조회
		- 등록 처리
		- 상세 조회
		- 수정 처리
		- 삭제 처리
	2) 구성 파일
		기본 Dto
		class MusicAlbums{
			private int albumId;
			private String albumTitle;
			private String artist;
			private Date releaseDate;
			private String genre;
			private int price;
		}
		A20_MusicController.java	
		A20_MusicService.java	
		A20_MusicDao.java
		view
		resources\templates\a02_ajax\a20_musicAlbum.html	
		
# 기본 조회 
1. 처리 순서
	1) sql 작성
		입력값 : 매개변수로 선언
		출력값 : 리턴 유형으로 설정	
	2) dto
	3) dao 메서드 선언
	4) serivce 단 처리 (기본 데이터 null 처리)
	5) controller 단 처리
	6) view단 처리
	
	
# 등록 처리
1. ajax 형식으로 등록 처리
	등록버튼을 클릭시, 모달창으로 등록 화면이 로딩이 되고, 등록 버튼을 클릭시
	타이틀이 등록이 되어 있고, 버튼도 등록하는 버튼과 창닫기 버튼만 있게 한다.
2. 처리순서
	1) dao
		sql
		메서드
	2) service
	3) controller
		@Post방식 모델 데이터 등록 처리되게 한다.
	4) view
		등록클릭시, 모달창이 나왔을 때, 등록항목을 입력하게 form을 구성한다.
		모달창에 있는 등록 버튼 클릭시, 등록 ajax 처리하는 함수를 호출,
		ajax로 등록 후, 등록 성공 처리, 입력된 form 내용을 초기화 처리한다.
		
# 상세 처리
1. 리스트된 내용을 더블 클릭시, 입력 form화면에서 상세 데이터를 처리되어 출력된다.
2. 처리 순서
	1) dao 	
		sql SELECT * FROM music_albums WHERE album_id = 1;
		@Select("SELECT * FROM music_albums WHERE album_id = #{albumId}")	
		MusicAlbums getAlbum(@Param("albumId") int albumId);
	2) service
		public MusicAlbums getAlbum(int albumId){
			return dao.getAlbum(albumId);
		}	
	3) controller
		@GetMapping("getAlbum")
		public ResponseEntity<?> getAlbum(@RequestParam("albumId") int albumId){
			return ResponseEntity.ok(service.getAlbum(albumId);
		}
	
	


	
	
	
		
		
		
			