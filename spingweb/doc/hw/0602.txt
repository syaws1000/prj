
# 🎯 **1. 주관식 개념 10문제**

(*정확성, 중복 검증 완료, 실제 수업/시험에 쓸 수 있게 엄선*)

---

### ✅ **주관식 개념문제**

1. **Spring Boot 프로젝트에서 `application.properties` 파일의 역할은 무엇인가요?**

2. **스프링에서 static 폴더의 주요 용도는 무엇인가요?**

3. **template 폴더는 어떤 파일들을 주로 저장하고 실행할 때 어떤 방식으로 활용되나요?**

4. **`WEB-INF/views` 폴더에 JSP 파일을 두는 이유는 무엇인가요?**

5. **pom.xml 파일은 어떤 설정을 위해 사용되며, 외부 라이브러리를 어떻게 관리하나요?**

6. **`SpringwebApplication.java` 파일의 역할을 간단히 설명하세요.**

7. **스프링 컨트롤러 메서드에 `@GetMapping`을 사용하는 이유는 무엇인가요?**

8. **`Model` 객체를 스프링 컨트롤러 메서드에서 사용하는 주된 목적은 무엇인가요?**

9. **스프링에서 클라이언트의 요청 데이터를 받기 위해 사용하는 애너테이션은 무엇인가요?**

10. **아래 코드에서 요청 파라미터를 받아서 처리하는 방식에 대해 설명하세요.**

```java
@GetMapping("req01")
public String req01(
  @RequestParam("name") String name, 
  @RequestParam("age") int age
) { ... }
```

---

# 🎯 **2. 재미있는 응용 실습문제 10문제**

(*내용/정확성/중복 검증 완료, 현실적이고 실습형으로*)

---

### ✅ **재미있는 실습형 문제**

1. **\[의문]**
   **단 하나의 코드 수정 없이** 웹 화면에 "나의 최애 음식은 김치찌개입니다."라는 메시지가 출력되도록 Model과 View를 연결해보세요.
   (*힌트: @GetMapping + Model.addAttribute*)

---

2. **\[실습]**
   폼에서 \*\*'좋아하는 영화 제목'\*\*을 입력받아 제출했을 때, 화면에 "내 인생 영화: \[입력한 영화]" 라고 출력되게 해보세요.
   (*힌트: @RequestParam 사용*)

---

3. **\[문제]**
   `@RequestParam` 없이도 요청값을 받을 수 있게 **자동 매핑**하는 방법은 무엇인가요?
   (*힌트: 동일한 이름의 파라미터가 메서드의 파라미터와 매칭될 때*)

---

4. **\[도전]**
   두 개의 숫자 `num1`과 `num2`를 입력받아 \*\*'큰 수'\*\*만 화면에 출력하는 기능을 구현하세요.
   (*힌트: Model로 전달해서 View에서 표현하기*)

---

5. **\[추가기능]**
   구매 폼에 \*\*'배송비(정액 3000원)'\*\*를 추가하여,
   총 합계 = 가격×갯수 + 배송비 형태로 Model에 저장해 화면에 출력하세요.

---

6. **\[유머형 문제]**
   폼에 \*\*'당신이 좋아하는 동물'\*\*을 입력받아 화면에
   "당신은 \[동물]을(를) 사랑하는 따뜻한 사람이군요!"라는 문구를 출력하게 해보세요.

---

7. **\[연습]**
   폼에 \*\*'하루 목표 걸음 수'\*\*를 입력받아,
   "오늘 당신은 \[걸음 수]보 걸었습니다! 건강 만점입니다!"라는 문구를 출력하는 기능을 구현하세요.

---

8. **\[난이도 UP]**
   폼에서 '책 가격'과 '책 수량'을 입력받아 **10권 이상 구매하면 10% 할인**되는 로직을 추가해 보세요.
   (*힌트: Controller에서 조건문 if 사용*)

---

9. **\[문제 변형]**
   구매 폼에 물건 가격(price)과 수량(cnt)를 입력받아,
   총액이 **5만 원 이상이면 '무료배송'**, 아니면 '배송비 3000원 추가' 로직을 Model에 추가해보세요.

---

10. **\[보너스 실습]**
    `modelexp01`처럼 Model에 **'나만의 명언'** (예: "노력은 배신하지 않는다.")을 추가하고,
    이를 화면에 출력하는 페이지를 하나 새로 만들어보세요.




좋아요! 요청하신 주관식 개념 10문제와 재미있는 실습형 10문제에 대한 **해답**을 바로 드리겠습니다.

---

# 🎯 **1. 주관식 개념 10문제 - 해답**

---

### 1. **`application.properties` 파일의 역할은 무엇인가요?**

👉 스프링 부트 애플리케이션의 설정 정보를 담는 파일로, 서버 포트, 데이터베이스 연결 정보, 외부 라이브러리 설정 등을 선언합니다.

---

### 2. **static 폴더의 주요 용도는 무엇인가요?**

👉 CSS, JavaScript, 이미지 파일 등 프론트엔드에서 사용하는 정적 파일들을 저장하는 폴더입니다.

---

### 3. **template 폴더는 어떤 파일들을 저장하고 실행할 때 어떤 방식으로 활용되나요?**

👉 주로 HTML, Thymeleaf 같은 템플릿 파일을 저장하며, 서버가 동적으로 데이터를 주입하여 사용자에게 화면을 제공할 때 사용됩니다.

---

### 4. **`WEB-INF/views` 폴더에 JSP 파일을 두는 이유는 무엇인가요?**

👉 JSP 파일을 직접 브라우저에서 접근할 수 없도록 보안상의 이유로 보호하며, 컨트롤러를 통해서만 접근하게 합니다.

---

### 5. **pom.xml 파일은 어떤 설정을 위해 사용되며, 외부 라이브러리를 어떻게 관리하나요?**

👉 Maven 빌드 도구를 사용하여 프로젝트에 필요한 외부 라이브러리(JAR 파일) 의존성을 관리하며, Maven 중앙 저장소에서 필요한 라이브러리를 자동으로 다운로드하여 프로젝트에 포함시킵니다.

---

### 6. **`SpringwebApplication.java` 파일의 역할은 무엇인가요?**

👉 스프링 부트 애플리케이션의 시작점(Main Class)으로, 내장 Tomcat 서버를 실행하고 스프링 컨텍스트를 초기화합니다.

---

### 7. **스프링 컨트롤러 메서드에 `@GetMapping`을 사용하는 이유는 무엇인가요?**

👉 클라이언트로부터 HTTP GET 요청을 받을 때 해당 메서드가 호출되도록 매핑하는 역할을 합니다.

---

### 8. **`Model` 객체를 컨트롤러 메서드에서 사용하는 주된 목적은 무엇인가요?**

👉 컨트롤러에서 생성된 데이터를 뷰(View)로 전달하여 화면에 표시할 수 있게 하기 위해 사용합니다.

---

### 9. **스프링에서 클라이언트의 요청 데이터를 받기 위해 사용하는 애너테이션은 무엇인가요?**

👉 `@RequestParam` 애너테이션을 사용하여 요청 파라미터 값을 메서드의 매개변수에 바인딩합니다.

---

### 10. **아래 코드에서 요청 파라미터를 받아서 처리하는 방식에 대해 설명하세요.**

```java
@GetMapping("req01")
public String req01(
  @RequestParam("name") String name, 
  @RequestParam("age") int age
) { ... }
```

👉 클라이언트가 전송한 `name`과 `age` 파라미터 값을 `@RequestParam`을 통해 각각 메서드의 `name`과 `age` 변수에 매핑하고, 해당 데이터를 서버에서 사용할 수 있게 합니다.

---

# 🎯 **2. 재미있는 응용 실습문제 - 해답**

---

### 1. **웹 화면에 "나의 최애 음식은 김치찌개입니다." 출력**

```java
@GetMapping("favoriteFood")
public String favoriteFood(Model d) {
    d.addAttribute("food", "김치찌개");
    return "WEB-INF\\views\\favorite.jsp"; // jsp 파일에 ${food} 사용
}
```

---

### 2. **'좋아하는 영화 제목' 출력**

```java
@GetMapping("favoriteMovie")
public String favoriteMovie(@RequestParam("movie") String movie, Model d) {
    d.addAttribute("favorite", movie);
    return "WEB-INF\\views\\movie.jsp"; // ${favorite}
}
```

---

### 3. **`@RequestParam` 없이 요청값 매핑**

👉 메서드의 파라미터 이름을 요청 파라미터 이름과 일치시키면 자동으로 매핑됩니다.

```java
@GetMapping("autoMapping")
public String autoMapping(String name, int age, Model d) {
    d.addAttribute("name", name);
    d.addAttribute("age", age);
    return "WEB-INF\\views\\auto.jsp";
}
```

---

### 4. **두 개의 숫자 중 큰 수 출력**

```java
@GetMapping("maxNumber")
public String maxNumber(
        @RequestParam("num1") int num1,
        @RequestParam("num2") int num2,
        Model d) {
    d.addAttribute("max", Math.max(num1, num2));
    return "WEB-INF\\views\\max.jsp"; // ${max}
}
```

---

### 5. **배송비 3000원 추가 총합계**

```java
@GetMapping("totalPrice")
public String totalPrice(
        @RequestParam("price") int price,
        @RequestParam("cnt") int cnt,
        Model d) {
    int shipping = 3000;
    int total = (price * cnt) + shipping;
    d.addAttribute("total", total);
    return "WEB-INF\\views\\total.jsp"; // ${total}
}
```

---

### 6. **'당신이 좋아하는 동물' 문구 출력**

```java
@GetMapping("favoriteAnimal")
public String favoriteAnimal(@RequestParam("animal") String animal, Model d) {
    d.addAttribute("message", "당신은 " + animal + "을(를) 사랑하는 따뜻한 사람이군요!");
    return "WEB-INF\\views\\animal.jsp"; // ${message}
}
```

---

### 7. **'하루 목표 걸음 수' 출력**

```java
@GetMapping("walkGoal")
public String walkGoal(@RequestParam("steps") int steps, Model d) {
    d.addAttribute("walkMessage", "오늘 당신은 " + steps + "보 걸었습니다! 건강 만점입니다!");
    return "WEB-INF\\views\\walk.jsp"; // ${walkMessage}
}
```

---

### 8. **10권 이상 구매시 10% 할인**

```java
@GetMapping("discountBook")
public String discountBook(@RequestParam("price") int price,
                            @RequestParam("cnt") int cnt, Model d) {
    int total = price * cnt;
    if (cnt >= 10) {
        total *= 0.9; // 10% 할인
    }
    d.addAttribute("total", total);
    return "WEB-INF\\views\\discount.jsp"; // ${total}
}
```

---

### 9. **총액 5만원 이상 무료배송, 아니면 3000원 추가**

```java
@GetMapping("freeShipping")
public String freeShipping(@RequestParam("price") int price,
                            @RequestParam("cnt") int cnt, Model d) {
    int total = price * cnt;
    if (total < 50000) {
        total += 3000; // 배송비 추가
    }
    d.addAttribute("total", total);
    return "WEB-INF\\views\\shipping.jsp"; // ${total}
}
```

---

### 10. **'나만의 명언' 추가하고 출력**

```java
@GetMapping("myQuote")
public String myQuote(Model d) {
    d.addAttribute("quote", "노력은 배신하지 않는다.");
    return "WEB-INF\\views\\quote.jsp"; // ${quote}
}
```

---

