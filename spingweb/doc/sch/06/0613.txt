
## 🌱 Spring MVC CRUD

### “학생이 주인공이 되어, 직접 만들고 고치는 웹 서비스!”

> 📘 **주제:** Spring MVC를 활용한 등록, 상세보기, 수정, 삭제 처리
> 👩‍🏫 **대상:** 다양한 학습 능력을 가진 실무 지향 개발 학습자
> 🤹 **특징:** 자기주도 학습, 실습 중심, 협력 학습, 피드백 포함, 흥미유발 요소 포함

---

### 1. 💡 주의 집중 끌기 + 학습 연결성 제공 (Gain Attention & Relevance)

* **도입 질문**
  “여러분! 맛집 리뷰 웹사이트 만들다가 ‘글을 못 고쳐서’ 짜증났던 적 있나요?”
* **흥미 요소**
  유머 영상 클립: “등록만 되고 수정은 안 돼!😱” (3초 유머 짧은 클립 or 상황극)
* **현실 연결**
  “우리가 오늘 배우는 Spring MVC CRUD는 실제 포털, 쇼핑몰, 병원 예약 시스템에도 쓰입니다!”

---

### 2. 🎯 학습 목표 (Inform Learners of Objectives)

| 목표번호 | 학습 목표                                     |
| ---- | ----------------------------------------- |
| 1    | Spring MVC에서 등록/상세/수정/삭제 흐름을 설명할 수 있다.    |
| 2    | 각각의 처리 방식에 필요한 컨트롤러, 뷰, DAO 구조를 구현할 수 있다. |
| 3    | 요청과 응답 흐름을 이해하고 디버깅할 수 있다.                |
| 4    | 실무 수준의 CRUD 기반 애플리케이션을 제작할 수 있다.          |

---

### 3. 🔁 선수 학습 상기 + 실생활 연결 (Stimulate Recall & Real-World Use)

* **질문 던지기**
  “지난 시간에 MVC 패턴 구조 기억나나요? View가 Controller로 요청 보내면 누가 처리하죠?”
* **예시 연결**
  “여러분 스마트폰으로 영화 예매했을 때, ‘삭제’ 버튼 눌러본 적 있죠? 그게 바로 오늘의 학습!”

---

### 4. 🧠 주요 개념/핵심 키워드 + 암기법 (Present Content)

| 개념                            | 설명         | 암기법                       |
| ----------------------------- | ---------- | ------------------------- |
| `@GetMapping`, `@PostMapping` | 요청 URL 매핑  | 🚪 “Get은 열어보기, Post는 등록!” |
| `Model`                       | 데이터 전달 객체  | 📦 “모델은 택배 박스!”           |
| `DAO`                         | DB와 연결된 객체 | 🕵️ “DAO는 데이터 탐정!”        |
| `redirect:`                   | 새 요청 전환    | 🔁 “리다이렉트는 다시 문 두드리기!”    |

---

### 5. 🔍 학습 목표별 탐구형 학습 (Provide Guided Learning)

#### \[문제 1: 등록 기능 처리 흐름을 직접 구성해보기]

> "신규 고객을 등록하려고 할 때, Controller, DAO, View는 어떤 순서로 처리될까요?"
> **힌트:** 폼 → 요청 → 컨트롤러 → DAO → DB → 결과 리턴

#### \[문제 2: 상세보기 요청 시 어떤 데이터가 필요한가요?]

> "홍길동 고객의 상세정보를 보기 위해 어떤 정보가 필요하죠?"
> **힌트:** URL 파라미터로 id를 넘겨보세요! `/detail?id=1001`

#### \[문제 3: 수정 기능은 등록과 무엇이 다를까요?]

> "등록은 새로 만드는 것, 수정은 뭐죠?"
> **힌트:** 같은 폼인데, hidden에 id가 들어있다?

---

### 6. 🛠️ 실습 활동 + 협력 학습 유도 (Elicit Performance & Peer Work)

#### 실습 과제:

**“우리 동네 맛집 등록 앱 만들기!”**
각자 팀을 짜서 아래 기능 구현:

1. 맛집 등록
2. 등록된 맛집 리스트 확인
3. 상세 정보 확인
4. 정보 수정 및 삭제

* 실습 진행 중 "버그 카드" 추첨 → 오류 상황 해결 팀에 상품!
* 각 조가 기능 하나씩 발표: “우리 팀은 왜 이 흐름을 택했는가?”

---

### 7. 🔍 피드백 & 자기 평가 기회 (Provide Feedback)

* 피드백 퀴즈: “이 상황에서 Controller의 역할은?” (실시간 Kahoot 또는 구글 폼)
* 자기점검 체크리스트 제공:

  * [ ] 컨트롤러에서 입력값 받기 이해함
  * [ ] DAO에서 insert/update/delete 처리 가능
  * [ ] redirect 처리 이해함
  * [ ] View와 Model 연결 가능

---

### 8. 🧪 수행 평가 + 피드백 (Assess Performance)

* **과제 제출:** 본인의 CRUD 웹앱 코드 + 처리 흐름 설명 PDF
* **평가 기준:**

  * 기능 정확성 (40점)
  * 구조의 명확성 (30점)
  * 주석 및 흐름 설명 (20점)
  * 협업 및 발표 참여 (10점)

---

### 9. 🧭 학습 전이 + 실제 문제 적용 활동 (Enhance Retention and Transfer)

> “다음 과제는 ‘회원 가입 + 게시판 연동 시스템’ 만들기입니다.”
> 이번 학습에서 만든 CRUD 기능을 기반으로 게시판 시스템에 그대로 적용해보세요!

* 실제 클라이언트 요구서 제공
* 자신의 CRUD 처리 방식 중 **최고의 방법 하나를 문서화**하여 팀에 공유

---

### 10. 💬 학습 반성 + 향후 학습 준비 (Encourage Reflection)

* **마무리 질문:**
  “오늘 내가 배운 것 중에, 나중에 진짜 서비스 만들 때 꼭 써먹을 수 있는 건 뭘까?”
* **한줄 회고:**
  포스트잇에 적기 – “오늘 수업에서 나는 \_\_\_를 배웠고, 이건 정말 \_\_\_에 쓸 수 있겠다!”

