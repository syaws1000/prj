# 💡 DAO 처리 학습 교안 (Gagné + ARCS 기반)

📌 **학습 주제**: MyBatis 연동 DAO 처리 (등록/수정/삭제 - 3단계)
---

## 1. 💥 주의 집중 끌기 및 학습 연결성 제공 (Gain Attention + ARCS Attention)

**🔍 질문으로 시작!**
“여러분, 게시판 글 등록할 때, ‘작성자’, ‘내용’, ‘날짜’는 어떻게 서버에 저장될까요?”
“혹시 버튼 하나에 수십 줄의 데이터 처리가 숨어있다는 사실, 알고 계셨나요?”

👉 영상 또는 밈 삽입:
👨‍🏫 "DAO가 없다면, 개발자는 매번 `insert into ...`를 직접 입력해야 합니다…"
🎬 \[Insert: ‘개발자 야근 짤’ 또는 ‘SQL에 치이는 개발자 만화컷’]

➡ **ARCS 연결성**: 실무에서 꼭 필요한 기술이라는 점 강조!
➡ **흥미 유발**: ‘DAO 없이 개발하면 생기는 일’ 사례 소개

---

## 2. 🎯 학습 목표 제시 (Inform Learners of Objectives + ARCS Relevance)

* DAO란 무엇인지 정의할 수 있다.
* 입력 방식에 따른 DAO 설계 단계를 설명할 수 있다.
* MyBatis 기반 DAO를 구현하고, JSP와 연동할 수 있다.
* View와 Controller의 흐름 속에서 DAO의 역할을 이해한다.

📌 학습 후 질문:
“DAO가 없으면 유지보수에서 어떤 문제가 생길까요?”

---

## 3. 🔁 선수 학습 상기 및 실생활 연결 (Stimulate Recall + ARCS Relevance)

**질문**

* “JSP에서 사용자가 입력한 데이터를 어떻게 서버로 보냈나요?”
* “지난 시간에 배운 ‘폼 데이터 처리 방식’ 기억나시나요?”

**미션 퀴즈**

* `@RequestParam`과 `Model`의 관계 설명해보기
* `insert into` 문을 JSP에서 직접 쓰면 안 되는 이유 찾기!

➡ 실생활 연결: “쇼핑몰에서 장바구니 담기 = 객체형 DAO 처리!”

---

## 4. 🧠 핵심 개념 제시 & 암기법 (Present Content + ARCS Confidence)

| 개념      | 설명             | 암기법                      |
| ------- | -------------- | ------------------------ |
| DAO     | 데이터 처리 객체      | "데이터 아웃소싱 = DAO!"        |
| MyBatis | SQL 매핑 프레임워크   | "나 대신 SQL 해주는 ‘비서Batis’" |
| DTO     | 데이터 전달 객체      | "택배 상자: DTO!"            |
| Mapper  | DAO와 DB 사이 연결자 | "지도(Map)로 DB 가는 길 안내"    |

💡 **그림 삽입**: DAO ↔ Mapper ↔ DB 흐름도
📌 **핵심 포인트**: 입력 방식에 따른 DAO 설계는 실무 효율성의 핵심!

---

## 5. 🔍 학습 목표별 탐구형 학습 (Provide Learning Guidance)

### 🌟 단계별 DAO 설계 미션

| 단계  | 설명                           | 학습 질문                                          |
| --- | ---------------------------- | ---------------------------------------------- |
| 1단계 | 단일데이터 입력 (예: `id`만 삭제)       | DAO에서 `int deleteById(int id)`는 어떤 상황에서 사용될까요? |
| 2단계 | 변수형 데이터 입력 (예: `id`, `name`) | 파라미터가 많아질수록 어떤 처리 방식이 좋을까요?                    |
| 3단계 | 객체형 입력 (`UserVO user`)       | 왜 DTO/VO를 사용하는 걸까요?                            |

📎 힌트 제공:

* @Param과 VO의 차이
* Mapper XML에서 `#{}` vs `${}`의 역할

---

## 6. 🤝 실습 활동 및 협력 학습 유도 (Elicit Performance + ARCS Satisfaction)

### ✨ 실습 1: DAO 메서드 작성

* `deleteById(int id)` → Mapper XML 작성
* `updateUser(UserVO vo)` → 객체로 처리해보기

### ✨ 실습 2: JSP와 연동

* `form`으로 데이터 입력 → Controller → DAO → DB
* 성공 시 alert(“처리 완료!”)

### 👥 팀 미션

* “쇼핑몰 상품관리 시스템 DAO 만들기”
* 역할 분담: VO 만들기 / DAO 작성 / XML 매핑 / View 연동

---

## 7. 🧾 피드백 및 자기 평가 (Provide Feedback)

**자기 평가표**

| 항목               | 스스로 잘했나요? (O/X) |
| ---------------- | --------------- |
| DAO 메서드의 용도 이해   |                 |
| VO와 단일변수 처리 구분   |                 |
| Mapper XML 작성 가능 |                 |
| JSP에서 입력받아 처리 성공 |                 |

💬 교사 피드백 예시:

> “UserVO를 활용한 연동에서 XML 작성이 깔끔했어요! 단, 네이밍 통일에 주의해봐요 😊”

---

## 8. 🧪 수행 평가 및 구체적 피드백 제공 (Assess Performance)

📌 **수행 과제**:

* 회원정보 수정 처리 DAO 만들기
* `modifyUser(UserVO vo)`
* Mapper XML + Controller + JSP 연동

📌 **평가 기준**:

| 항목                 | 배점 |
| ------------------ | -- |
| DAO 메서드의 일관성       | 20 |
| Mapper XML의 정확성    | 30 |
| Controller 흐름의 논리성 | 30 |
| View 처리 연동         | 20 |

---

## 9. 🔄 학습 전이 및 확장 활동 (Enhance Retention and Transfer)

**실무 적용 미션**

* “사원관리 시스템에 DAO 적용해보기”
* “객체형 DAO를 사용하여 검색/수정/삭제 기능 추가”

💬 의문 제기:
“회원정보를 삭제할 때 '삭제 여부만 Y/N'으로 처리하는 방식, 어떻게 DAO에 반영할 수 있을까요?”

---

## 10. 🪞 학습 반성 및 향후 준비 (Reflect and Anticipate)

### 🙋 마무리 질문:

* “오늘 배운 DAO 패턴, 어떤 프로젝트에 가장 유용할까요?”
* “객체형 DAO를 쓰면 유지보수가 쉬워지는 이유는?”

### ✍️ 나만의 메모:

* 내가 만든 DAO 중 가장 완성도가 높은 것은?
* 다음 시간에 연습하고 싶은 기능은?
