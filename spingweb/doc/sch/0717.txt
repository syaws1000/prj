다양한 학습 능력을 가진 학생이 실무에 적용 가능한 **Spring Boot 소켓통신을 통한 실시간 채팅 구현**을 주제로,
**Gagné의 9가지 수업사태**와 **Keller의 ARCS 동기이론**에 기반한
**학습자 참여형 체계적 수업 교안**을 아래와 같이 제공합니다.
각 단계에서 **질문-힌트-유머**를 포함해 학습자의 **주의와 흥미를 유도**하고,
**스스로 탐구 → 협력 → 적용 → 반성**의 흐름으로 구성했습니다.

---

## 🧠 Spring Boot 실시간 채팅 - 소켓 통신 수업 교안 (Gagné + ARCS 기반)

---

### 1. 🔔 주의 집중 끌기 및 학습 연결성 제공

> **ARCS - Attention + Relevance**

**질문**:
"여러분, 웹사이트에서 채팅창이 실시간으로 반응하는 마법 같은 기능, 어떻게 구현될까요?"
**힌트**:
"채팅방에서 ‘상대방이 지금 입력 중입니다...’ 이걸 알려주는 게 바로 오늘 배울 핵심이에요!"
**유머**:
"실시간 채팅이 없던 시절엔요, 메시지 보내고 편지 온 줄 알고 창 닫았다니까요 😂"

**활동**:

* 카카오톡, 인스타 DM 같은 실시간 채팅 경험 떠올리기
* 그게 어떤 구조로 되어 있을지 자유롭게 예측해보기

---

### 2. 🎯 학습 목표 (공유 형식으로 강조)

> **ARCS - Confidence + Satisfaction**

📌 **오늘의 학습 목표는?**

* WebSocket 기반의 실시간 채팅 구조를 이해한다
* Spring Boot에서 WebSocket 설정 방법을 익힌다
* 채팅 메시지를 실시간 송수신하는 기능을 구현해본다
* 협업 기반의 실시간 웹 기능에 자신감을 갖는다

> ✅ **최종 미션**: 우리만의 실시간 채팅 웹앱을 만들어 친구와 채팅 성공시키기!

---

### 3. 🧩 선수 학습 상기 및 실생활 연결하기

> **ARCS - Relevance**

**의문 제기**:
"Spring MVC로 요청/응답을 처리하던 우리는, 실시간 처리에는 왜 새로운 방식(WebSocket)이 필요할까요?"

**실생활 연결**:

* 친구와 대화할 때 ‘내가 말해야지\~’ 하고 기다리는 건 이상하잖아요?
* HTTP는 기다려야 해요... 실시간은 ‘바로 전송’이 포인트!

**활동**:

* HTTP 통신 구조 vs WebSocket 구조 비교 그림 보기
* 채팅 앱 vs 게시판 앱의 차이점 짚기

---

### 4. 🧠 주요 개념/핵심 키워드 (암기법 포함)

> **ARCS - Confidence + Attention**

**주요 키워드 & 암기법**:

| 개념                            | 설명                    | 암기법                   |
| ----------------------------- | --------------------- | --------------------- |
| WebSocket                     | 양방향 통신 프로토콜           | **"웹에서 쏙쏙(Two-Way)"** |
| Stomp                         | WebSocket 상위 메시징 프로토콜 | **"스탬프 찍듯 채팅 처리!"**   |
| @EnableWebSocketMessageBroker | 메시지 브로커 설정 어노테이션      | **"웹소켓 브로커 열어\~!"**   |
| SimpMessagingTemplate         | 서버에서 메시지 보내는 도구       | **"심플하게 메시지 슝\~"**    |

---

### 5. 🕵️‍♀️ 학습 목표별 탐구형 학습

> **ARCS - Confidence + Satisfaction**

**학습 문제**:
"Spring Boot에서 WebSocket을 쓰기 위해 어떤 설정이 필요할까?"
"클라이언트가 서버로 메시지를 보내는 흐름은?"
"메시지를 받은 서버는 어떤 방식으로 다른 사용자에게 전달하지?"

**힌트 제공**:

* `@MessageMapping`은 서버가 메시지를 받을 때 사용돼요!
* `@SendTo`는 구독한 클라이언트에게 전송해요!
* `SimpMessagingTemplate.convertAndSend()`로도 직접 전송 가능!

**탐구 실습**:

* WebSocketConfig 클래스 생성 및 브로커 설정
* 메시지 DTO, 컨트롤러 설정
* JavaScript로 Stomp 클라이언트 구현

---

### 6. 💻 실습 활동 및 협력 학습 유도

> **ARCS - Satisfaction + Relevance**

**미션**:
**\[팀 과제]**
"우리 팀만의 실시간 채팅방을 만들어라!"

**역할 분담 예시**:

* A학생: WebSocket 설정 및 메시지 DTO 구현
* B학생: 클라이언트 JS 코드 (SockJS + Stomp.js)
* C학생: 채팅창 UI (HTML + CSS)
* D학생: 채팅 로그 저장 기능 (선택)

**보너스 미션**:

* 채팅방 구분 기능
* 시간 표시 추가

---

### 7. 🧪 단계별 피드백 제공과 자기 평가 기회

> **ARCS - Confidence**

**스스로 점검 질문**:

* [ ] 브라우저 콘솔에서 서버 메시지 로그가 찍히는가?
* [ ] 한 사용자가 메시지 입력 → 다른 사용자에게 실시간 도착하는가?

**교사 피드백 예시**:

* 실시간 메시지 안 되는 팀 → `브로커 주소`나 `subscribe 경로` 체크 유도
* 메시지 중복 발생 → `subscribe` 중복 연결 확인

---

### 8. 📝 수행 평가 및 피드백 제공

> **ARCS - Satisfaction**

**수행 평가 기준 예시**:

| 항목     | 점검 내용                        |
| ------ | ---------------------------- |
| 구조 구현  | WebSocket 설정 및 Controller 구현 |
| 실시간 동작 | 양방향 메시지 송수신 가능 여부            |
| 코드 이해도 | 각 코드의 역할 설명 가능 여부            |
| UI/UX  | 사용자 입장에서 사용 가능한 채팅 인터페이스     |

**개별 피드백 예시**:

* "WebSocket 연결 로직을 정확히 이해했네요! 좋습니다!"
* "Stomp 설정에서 엔드포인트 경로가 꼬인 친구는 이 그림을 참고하세요 → 🖼️"

---

### 9. 🚀 학습 전이 강화와 실제 문제 적용 활동

> **ARCS - Relevance + Confidence**

**의문 제기**:
"우리 실시간 채팅을 어떤 서비스에 응용해볼 수 있을까요?"
**힌트**:

* 온라인 상담 시스템
* 실시간 협업 툴
* 실시간 알림 서비스

**응용 활동**:

* 실시간 투표 시스템 설계
* 온라인 수업 중 질문-답변 채팅 기능 설계
* 프로젝트 팀 별 실시간 일정 협의 게시판 설계


