
# 🌟 스프링부트 DI(Dependency Injection) 

---

## 1. **주의 집중 끌기 및 학습 연결성 제공**

**(Gagné - 주의집중 / ARCS - Attention, Relevance)**

> **🧠 질문:**
> 👉 "여러분, 만약에 카페를 운영하는데 직원이 직접 커피콩을 농장까지 가서 따온다면 어떨까요?"
> **✅ 힌트:** 직접 하면 시간도 오래 걸리고, 커피맛도 매번 다를 거예요.
>
> **📝 오늘의 주제:**
> 스프링부트에서 "의존성 주입(DI)"이란, 내가 직접 가져오는 게 아니라 **필요한 걸 알아서 '전달'해주는** 자동화 시스템입니다.

**🎯 연결 포인트:**
→ **"복잡한 코드를 자동으로 연결해주는 DI 덕분에 개발이 얼마나 쉬워질까요?"**

---

## 2. **학습 목표 명확화**

**(Gagné - 기대 알리기 / ARCS - Relevance, Confidence)**

**🎯 오늘의 목표:**

* 스프링부트 프로젝트를 셋업하고 DI 개념을 이해한다.
* `@Component`, `@Autowired`를 사용해 객체를 스프링 컨테이너에 등록하고 주입받는다.
* 실습을 통해 직접 DI 컨테이너를 다뤄본다.

**✔️ 한줄 정의:**

> **DI란?** "필요한 객체를 *알아서* 주입해주는 스프링의 마법."

---

## 3. **선수 학습 상기 및 실생활 연결하기**

**(Gagné - 선수학습 회상 / ARCS - Relevance)**

**💬 의문 제기:**
"자바 객체를 만들 때 `new` 키워드를 써서 직접 만들었었죠? 그런데 왜 그게 문제일까요?"

**🔎 힌트:**

* 의존성이 많아질수록 직접 `new` 해서 만들면, 코드가 딱딱 붙어 있어서 바꾸기가 힘들어집니다.
* 예: 게임할 때 캐릭터 이름을 '직접 박아놓으면' 이름 바꾸려면 코드 다 뜯어야 함.

---

## 4. **주요 개념/핵심 키워드 제시 (암기법 포함)**

**(Gagné - 새로운 내용 제시 / ARCS - Confidence)**

**🧩 키워드+암기법:**

| 개념             | 설명                        | 암기법                                 |
| :------------- | :------------------------ | :---------------------------------- |
| **DI**         | 객체를 직접 생성하지 않고, 스프링이 주입해줌 | "DI = Delivery Injection" (배달받기!)   |
| **IoC**        | 제어의 역전 (내가 제어X, 스프링이 제어)  | "IoC = I’m Out of Control" (내맘대로 X) |
| **@Component** | 스프링이 관리하는 빈 선언            | "컴포넌트 = 나 스프링꺼"                     |
| **@Autowired** | 필요한 빈을 주입해줘               | "자동으로 와줘라\~"                        |

---

## 5. **학습 목표별 탐구형 학습**

**(Gagné - 수행 유도 / ARCS - Confidence, Satisfaction)**

> **💡 문제 상황:**
> "어떤 프로젝트를 만들었는데, 매번 새로운 객체를 만들다 보니 코드가 헝클어져 버렸어요. 해결 방법은?"

**🧑‍💻 스텝별 활동:**

1. **\[1단계] 프로젝트 생성:**

   * 스프링 이니셜라이저로 `spring-boot-starter` 의존성 추가
2. **\[2단계] 클래스 만들기:**

   * `Printer.java`에 `@Component` 선언
   * `MyService.java`에 `@Autowired`로 Printer 주입
3. **\[3단계] 메인 클래스:**

   * `@SpringBootApplication` 선언
   * `ApplicationContext`로 빈 가져와서 실행
4. **\[4단계] 관찰:**

   * 수동 생성(new) 방식 vs. 자동 주입(@Autowired) 방식 코드 비교

---

## 6. **실습 활동 및 협력 학습 유도**

**(Gagné - 수행 안내 / ARCS - Satisfaction, Confidence)**

**👩‍👩‍👧 협력 실습:**

* **문제:** 서로 짝을 지어 `@Component`와 `@Autowired`를 이용해 **두 개의 클래스**를 DI로 연결.
* **조건:** 서로 전혀 다른 기능! 예) 커피 주문 시스템, 영화 예매 시스템 등.

**🎲 재미 요소:**

* **랜덤 주제 뽑기:**
  (ex. '동물원 관리', '피자 배달', '음악 재생기')
* 짝과 함께 **역할 바꾸기**:
  한 명은 설계자(지시), 한 명은 코더(구현)

---

## 7. **단계별 피드백 제공과 자기 평가 기회**

**(Gagné - 피드백 제공 / ARCS - Confidence)**

**📝 자기 질문 리스트:**

* "내가 new 없이 객체를 만들 수 있었나?"
* "빈 등록이 잘 됐나?"
* "내 코드를 설명할 수 있나?"

**💬 피드백 타임:**
짝과 서로 리뷰하면서

> "이 코드의 좋은 점 1가지, 아쉬운 점 1가지"
> 로 피드백 주고받기.

---

## 8. **수행 평가 및 피드백 제공**

**(Gagné - 수행 평가 / ARCS - Satisfaction)**

**🎯 미션:**

> 스스로 작은 프로젝트를 만들어보기.
> (예: 간단한 도서 대여 시스템에서 DI 적용)

**채점 기준:**

* DI 적용 여부
* 코드 가독성
* 설명 능력

**✅ 보너스 질문:**
"만약에 `@Autowired` 없이도 주입받고 싶으면 어떻게 해야 하지?"

> **힌트:** 생성자 주입(Constructor Injection)!

---

## 9. **학습 전이 강화와 실제 문제 적용 활동**

**(Gagné - 파지 및 전이 촉진 / ARCS - Relevance, Satisfaction)**

**💻 실제 문제:**

* 회사에서는 *"기존 코드를 리팩토링해서 DI 적용"* 을 요구할 수도 있어요.
* **팀 미션:** 5명이 한 팀으로 레거시 코드(기존 new 방식) 개선하기.

**📣 배움 전이 강조:**
"코딩은 결국 협업! DI를 써야 협업할 때 진짜 힘을 발휘할 수 있어요."

---

## 10. **학습 반성 및 향후 학습 준비**

**(Gagné - 수업 마무리 / ARCS - Satisfaction)**

**📝 회고 질문:**

* 오늘 배운 DI를 한 문장으로 표현해 본다면?
* DI 없이 코딩했을 때와 비교해서 어땠나요?
* 내일 DI 대신 AOP(관점 지향 프로그래밍)도 해볼 준비 됐나요?

**🎯 다음 스텝 예고:**

> "DI를 마스터했으니, 이제 AOP와 스프링 빈 라이프사이클까지 뿌셔봅시다!"

---

# 💡 **## 학습자와 공유할 강조 포인트 ##**

* "DI는 직접 만들지 않고 **스프링에게 맡기는 기술**이다."
* "DI 덕분에 코드를 **더 유연하고, 유지보수 쉽게** 만들 수 있다."
* "DI를 연습하면, **진짜 개발자**에 한 발짝 더 다가간다."

---

**🌈 부록: 웃음 포인트**

> DI 안 쓰고 new 쓰는 개발자: "나 혼자 다 해먹는 바쁜 사장님"
> DI 쓰는 개발자: "직원한테 일 잘 시키는 스마트 사장님"
> (내 손으로 다 안 해도, 일이 굴러간다!)
