# 🚀 Spring MVC 학습 교안 (학습자 공유용)

## 1. 주의 집중 끌기 및 학습 연결성 제공

* **목표:** 학습의 흥미를 유발하고, '왜' 배워야 하는지 인지시킨다.
* **활동:**

  * **질문:** "여러분, 웹 페이지에 버튼을 누르면 어떻게 서버가 반응할까요?"
  * **짧은 에피소드:** "옛날에 서버가 없던 시절, 웹페이지는 액자 속 사진처럼 가만히 있었대요.
    하지만 이제는 클릭하면 서버와 대화하는 시대! 그 중심에 **Spring MVC**가 있죠!"
* **ARCS 요소:** A(Attention) - **흥미로운 질문**과 **짧은 이야기**로 주의 집중.

## 2. 학습 목표

* **제시:** 오늘의 미션

  * Spring MVC 패턴을 이해하고, 간단한 요청-응답 프로그램을 만들어보기.
* **ARCS 요소:** R(Relevance) - **학습자의 실습 목표를 분명히** 제시하여 학습 의미 부여.

---

## 3. 선수 학습 상기 및 실생활 연결하기

* **질문:** "HTTP 요청-응답의 기본 흐름, 기억나나요?"
	url 요청key/요청value 브라우저에 사용자가 요청 ==> 해당 내용에 대한 서버는 페이지를 로딩하거나
	페이지에 요청key를 처리하여 다시 ==> 브라우저에 html 코드로 전달 ==> 브라우저에서는 해당 html코드를
	해석하여 화면에 보여준다.
	ex)
	login 화면에 아이디와 패스워드를 입력하면 ==> 서버에서는 아이디와 패스워드를 받아서 인증여부를 확인하고
	==> 아이디 패스워드가 맞으면 메인화면을 이동하여 해당 메인 화면의 내용을 클라이언트인 브라우저에 전달
		              그러지 않으면 다시 로그인 화면의 내용을 클라이언트 브라우저에 전달.

* **힌트:** 브라우저는 \*\*'편지'\*\*를 보내고 서버는 \*\*'답장'\*\*을 준다.
* **실생활 연결:** 택배 주문과 비슷한 흐름 → 요청(주문) → 응답(택배 도착).
* **ARCS 요소:** R(Relevance) - 실생활 비유로 학습 내용 연결.

---

## 4. 주요 개념/핵심 키워드를 최고의 암기법에 의한 제시

* **키워드:** `DispatcherServlet(front컨트롤러-스프링프레임웍에서 지원)`, 
		`Controller(중재자-요청/모델설정/view호출)`, 
		`RequestMapping(controller단에서 요청되는 url에 맞는 메서드 호출)`, 
		`Model(view단에 전달되는 핵심데이터 addAttribute(key,val)`, 
		`ViewResolver(view단을 처리하는 객체로 html/jsp/json데이터 등으로 처리를 할수 있다.
			추가적으로 파일업로드/다운로드, pdf, excel 파일 다운로드 등 여러가지 형식으로 처리`
* **암기법 예시 (웃음 포인트 포함):**

  * **디스패처 서블릿:** "모든 편지를 '디스패처' 아저씨가 배달한다!"
  * **모델(Model):** "데이터 꾸러미 - 소포 상자" view단에 전달할 핵심를 controller에서 설정..
  * **컨트롤러:** "택배 기사 - 누가 어디로 갈지 정한다."
  * **뷰(View):** "포장된 선물(HTML) - 사용자에게 전달되는 모습!"
* **ARCS 요소:** C(Confidence) - 핵심 키워드와 **재미있는 비유**로 기억 강화.

---

## 5. 학습 목표별 탐구형 학습

* **문제 제기:** "왜 우리가 DispatcherServlet을 써야 할까요?"
* **힌트:** "모든 요청을 **중간 관리자**가 한 번 체크하면 좋은 점은?"
* **탐구 활동:**

  * 간단한 Spring Boot 프로젝트 생성 → DispatcherServlet이 자동 등록되는 과정 탐색.
  * 직접 요청 URL을 매핑해보며 Controller 역할 실습.
* **ARCS 요소:** C(Confidence) - **스스로 발견**하는 경험으로 자신감 증진.

---

## 6. 실습 활동 및 협력 학습 유도

* **활동:** 짝을 이루어 요청 URL과 Controller를 짜보자!
* **미션:** `/hello` 요청 시 `Hello, Spring MVC!`가 나오도록 코딩.
* **게임 요소:** "5분 내에 성공하면 초코렛🍫! (교사 제공)"
* **ARCS 요소:** S(Satisfaction) - 협력, 실습, **소소한 보상**으로 성취감 제공.

---

## 7. 단계별 피드백 제공과 자기 평가 기회

* **즉각 피드백:**

  * 코드 작성 후 직접 **출력 결과 확인**.
  * 오류가 나오면: "서버가 말하고 있어요! '어디서 틀렸어?'"
* **자기 점검 체크리스트:**

  * [ ] URL 매핑이 되었는가?
  * [ ] Controller 메소드가 잘 작성되었는가?
* **ARCS 요소:** C(Confidence) - 작은 성공 경험을 통한 **자기 점검**.

---

## 8. 수행 평가 및 피드백 제공

* **미니 프로젝트:**

  * 간단한 ‘미니 쇼핑몰’ 프로젝트 만들어보기 (상품 목록 → 상품 상세 보기).
* **피드백:**

  * "너희들은 이제 웹 요청 세계의 스타🌟!"
  * 코드 리뷰: "이 코드는 마치 피카소의 그림 같아… 창의적이야!"
* **ARCS 요소:** S(Satisfaction) - 긍정적 피드백으로 **학습 만족도 증가**.

---

## 9. 학습 전이 강화와 실제 문제 적용 활동

* **문제:** 실무에서는 회원가입 페이지를 어떻게 만들까?
* **과제:** 스스로 Form을 만들고 Controller에 데이터 받아보기.
* **힌트:** "폼 데이터가 Controller로 갈 땐 **스마트폰 메신저**처럼 데이터 전송!"
* **ARCS 요소:** R(Relevance) - 실무와의 **연결** 강조.

---

## 10. 학습 반성 및 향후 학습 준비

* **질문:** 오늘 배우면서 가장 신기했던 것은?
* **한 줄 마무리:** "오늘, 여러분은 서버와 대화하는 법을 배웠습니다."
* **다음 학습 안내:** Model 데이터 전달 심화, Thymeleaf 템플릿 엔진 적용.
* **ARCS 요소:** C(Confidence), S(Satisfaction) - **성찰**과 **미래 연결**.

