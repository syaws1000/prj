## 🧠 Python NumPy 수업 교안 (Gagné + ARCS 기반)

---

### 1. **주의 집중 끌기 & 학습 연결성 제공 (Gain Attention / A)**

> 🧩 **질문**: “여러분, 리스트 연산이 너무 느릴 때, 어떻게 해결하시나요?”
>
> 💡 **힌트**: 게임 개발자, AI 개발자, 과학자들은 이것 하나로 수천만 개의 데이터를 순식간에 처리합니다.
>
> 😄 **유머 포인트**: “Python 리스트로 천만 개 더하면... 점심시간 지나갑니다.”
> → **NumPy가 등장!**

---

### 2. **학습 목표 제시 (Inform Learners of Objectives / R)**

> ✅ 이번 수업을 통해 여러분은:

* 배열을 다루는 새로운 무기, `NumPy`를 설치하고 사용할 수 있습니다.
* `ndarray`의 구조와 특징을 이해하고, 리스트와 차이를 설명할 수 있습니다.
* `numpy`의 연산자와 함수로 벡터·행렬 계산을 수행할 수 있습니다.
* 실무형 데이터를 빠르게 처리하는 방법을 적용해볼 수 있습니다.

---

### 3. **선수 학습 상기 & 실생활 연결 (Stimulate Recall / R)**

> 🔄 “Python의 `list`, `for`, `range`를 기억하시나요?”
>
> 📦 **의문**: 리스트로 수천 개의 데이터를 더하고, 평균을 구하는 데 시간이 너무 오래 걸린다면?
>
> 🔍 **현실 연결**:

* 데이터 분석가: “엑셀보다 빠른 게 필요해요!”
* AI 모델 개발자: “행렬 연산이 핵심이에요!”
  → **NumPy는 실생활 데이터 처리의 핵심 도구!**

---

### 4. **핵심 개념 및 키워드 (Present Content / C + A)**

| 키워드         | 설명            | 암기 팁                     |
| ----------- | ------------- | ------------------------ |
| `ndarray`   | N차원 배열 객체     | “넘-다리(NumPy + 다차원)”로 기억! |
| `shape`     | 배열의 구조 (행, 열) | “모양(shape)을 확인!”         |
| `dtype`     | 데이터 타입        | “데이터 타입을 줄이면 dtype!”     |
| `arange()`  | 범위 생성         | “A Range!”               |
| `reshape()` | 모양 변경         | “다시 모양 만들기”              |
| `axis`      | 연산 기준 축       | “X축, Y축처럼 axis 기준!”      |

---

### 5. **학습 목표별 탐구형 활동 (Provide Learning Guidance / C + R)**

#### ✨ 활동1: NumPy 설치하고 배열 만들어보기

* ❓ **왜 pip로 설치해야 할까요?**
* 💡 힌트: NumPy는 외부 패키지예요. `pip install numpy`

#### ✨ 활동2: 리스트 vs 배열 속도 비교하기

* ❓ `for문`으로 더한 것과 `numpy.sum()`으로 더한 것, 어느 쪽이 빠를까?
* 💡 힌트: `time.time()`을 활용해서 직접 속도 측정!

#### ✨ 활동3: 벡터 연산 vs 일반 반복문

* ❓ `for문` 없이 `+`, `*`로 계산이 가능하다고?
* 💡 힌트: `arr1 + arr2`는 반복이 아니라 “벡터화 연산”!

---

### 6. **실습 활동 및 협력 학습 유도 (Elicit Performance / C + S)**

> 🤝 **미션**: "초코과자 공장 재고 관리 시뮬레이션 만들기"

* 1열: 초코과자 입고 수량
* 2열: 출고 수량
* 결과: 현재 재고량 계산

```python
import numpy as np

incoming = np.array([120, 140, 130])
outgoing = np.array([100, 130, 125])
stock = incoming - outgoing
print("📦 남은 재고:", stock)
```

> 🔄 팀별로 다른 제품군으로 시뮬레이션 해보기!

---

### 7. **단계별 피드백과 자기평가 유도 (Provide Feedback / C + S)**

* 🔍 실습 후 체크리스트

  * `ndarray` 구조를 직접 설명할 수 있는가?
  * 배열 모양 변경 (`reshape`)을 실습했는가?
  * 벡터 연산을 이용한 코드 작성이 가능한가?

> 📝 “나는 오늘 NumPy로 배열 만들고, 연산하고, 데이터 분석 흉내까지 냈다!”라고 말할 수 있다면 → 성공!

---

### 8. **수행 평가 및 피드백 제공 (Assess Performance / C + S)**

> ✍️ **미션**: NumPy를 활용한 간단한 분석 과제

* 기온 데이터 배열을 만들어 최고·최저·평균 기온 계산

```python
temps = np.array([26.1, 27.3, 25.8, 28.4, 26.9])
print("🌡️ 평균:", np.mean(temps))
print("🌡️ 최고:", np.max(temps))
print("🌡️ 최저:", np.min(temps))
```

> 📩 제출 후 코드 리뷰 및 피드백 제공 (개별 + 그룹 피드백)

---

### 9. **학습 전이 및 문제 해결 적용 (Enhance Retention / C + R)**

> 🎯 실제 데이터셋 적용하기!

* 예: 인구통계, 기온, 상품 판매량 등
* `np.loadtxt()` 혹은 `np.genfromtxt()`로 CSV 불러오기
* **어디에 쓰일까?**

  * 재고관리 시스템
  * 기상청 예보 처리
  * 온라인 쇼핑몰 판매 추세 분석

---

### 10. **학습 반성 및 향후 학습 준비 (Enhance Transfer / C + S)**

> 📘 오늘 배운 내용 중 가장 기억에 남는 코드는?
> 🤔 어디에서 다시 사용해보고 싶은가요?
> 💡 NumPy를 썼다면 Pandas는? → **다음 시간 예고**!

