## 🏷️ 수업 주제: 스프링부트 환경에서의 다국어 처리 (i18n)

## ✅ 1. 주의 집중 끌기 및 학습 연결성 제공 (Gagné 1 + ARCS Attention)

> ❓“영어로 된 에러 메시지를 보며 당황해본 적 있나요?
> 중국에서 서비스하면 자동으로 중국어가 나와야 할 텐데… 어떻게 처리하죠?”

🎯 애플리케이션이 글로벌화되는 오늘날, \*\*사용자 언어에 맞는 다국어 지원(i18n)\*\*은 필수!
💬 실제 해외 진출 앱 사례(배달앱, 쇼핑몰 등)의 UI를 예로 제시하고, 잘못된 번역 사례로 유쾌하게 시작!

---

## ✅ 2. 학습 목표 (Gagné 2 + ARCS Relevance)

학습자는 다음을 할 수 있어야 합니다:

* 스프링부트에서 다국어 처리를 위한 설정을 이해하고 구성할 수 있다.
* properties, LocaleResolver, MessageSource의 역할을 설명할 수 있다.
* JSP/Thymeleaf에서 동적으로 언어를 전환해 표현할 수 있다.
* 실무에서 사용자별 언어를 감지하여 처리할 수 있다.

---

## ✅ 3. 선수 학습 상기 및 실생활 연결하기 (Gagné 3 + ARCS Relevance)

> ❓“`messages.properties`란 파일 이름 본 적 있나요?”
> “왜 같은 메시지를 영어로도, 한글로도 저장할까요?”

🧠 선수 학습:

* Spring Boot의 프로젝트 구조 이해
* `application.properties` 설정 방식
* JSP 또는 Thymeleaf 기초

🧩 실생활 연결:

> 유튜브 자막 자동 전환, 스마트폰 언어 설정 = 모두 i18n 기술의 결과물!

---

## ✅ 4. 주요 개념/핵심 키워드를 최고의 암기법에 의한 제시 (Gagné 4 + ARCS Confidence)

| 핵심 키워드                   | 기억 암기법                                  |
| ------------------------ | --------------------------------------- |
| `MessageSource`          | 메시지는 소스가 있어야죠! 메시지+소스=다국어 번역기           |
| `LocaleResolver`         | 로컬(local) 언어를 리졸브(resolve, 해결)하는 친구     |
| `messages_ko.properties` | `ko`는 한국어! `messages_en.properties`는 영어 |
| `Accept-Language`        | 클라이언트가 요청한 언어 설정 (헤더에 있음!)              |

---

## ✅ 5. 학습 목표별 탐구형 학습 (Gagné 5)

### 🌟 의문점 제기:

> “한국어만 있으면 충분하지 않나요?”
> “클라이언트가 원하는 언어는 어떻게 알죠?”

💡 힌트:

* 브라우저가 보낸 `Accept-Language`를 분석하자!
* Spring은 Locale을 처리하는 Resolver가 따로 있다!

### 🔍 탐구 흐름:

1. `messages.properties`, `messages_ko.properties`, `messages_en.properties` 생성
2. `@Bean public MessageSource messageSource()` 설정
3. `@Bean public LocaleResolver localeResolver()` 등록
4. JSP/Thymeleaf에서 `#{} 메시지 키`로 불러오기

---

## ✅ 6. 실습 활동 및 협력 학습 유도 (Gagné 6 + ARCS Satisfaction)

### ✍️ 개인 실습:

* 한글/영문 properties 파일을 생성하여 "환영합니다 / Welcome" 출력
* `LocaleChangeInterceptor`를 활용한 언어 전환 버튼 구현

### 🧠 협력 과제:

* 팀별로 다국어 쇼핑몰 홈화면 구성
* 한국어/영어/일본어로 상품 이름과 설명 출력

🙃 보너스 미션:

> 일본어를 잘 모르는 친구를 위해 이상한 번역 만들어보기 → 유쾌한 오타 번역 탐험!

---

## ✅ 7. 단계별 피드백 제공과 자기 평가 기회 (Gagné 7)

💬 자동/동료 피드백:

* 언어 전환이 정상 작동하는지 서로 교차 테스트
* 브라우저 언어 설정을 바꿔 테스트

🧾 자기 점검 체크리스트:

* [ ] 메시지 프로퍼티 파일 생성
* [ ] messageSource 등록
* [ ] localeResolver 등록
* [ ] 인터셉터로 언어 변경 가능

---

## ✅ 8. 수행 평가 및 피드백 제공 (Gagné 8)

📘 평가 과제:

* “안녕하세요 / Hello / こんにちは”가 자동 출력되는 페이지 완성하기
* URL 파라미터 `?lang=en` 또는 `?lang=ko`로 언어 전환 가능하게 구현

💡 평가 포인트:

* 언어에 따른 메시지 출력의 정확성
* 코드의 구조와 설정의 이해도

---

## ✅ 9. 학습 전이 강화와 실제 문제 적용 활동 (Gagné 9)

🛠️ 실전 적용:

* 팀 프로젝트에 다국어 메뉴 적용하기
* 관리자 페이지는 기본 한글, 사용자 페이지는 자동 언어 감지

🚀 확장 아이디어:

> 파파고 API 또는 구글 번역 API와 연동해 자동 번역기 만들기!

---

## ✅ 10. 학습 반성 및 향후 학습 준비

📌 마무리 질문:

> ❓“사용자 맞춤 언어 환경을 지원하는 것이 왜 중요할까요?”
> ❓“다국어 처리 외에 사용자 맞춤형 서비스로 확장할 수 있는 기능은?”

✍️ 나만의 회고:

* 가장 기억에 남는 키워드는?
* 오늘 학습한 내용을 어디에 적용할 수 있을까?

