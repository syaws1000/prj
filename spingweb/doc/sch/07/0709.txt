## 🎓 Spring Boot 계층형 댓글 리스트 및 페이징 처리 학습 교안

> **핵심 주제:**
> 게시판의 댓글(답글) 데이터를 계층형(트리 구조)으로 정렬하고, 페이징 처리까지 구현하기

---

### 1. 📣 주의 집중 끌기 및 학습 연결성 제공

**ARCS – Attention, Relevance**

* 🤔 “댓글이 댓글을 낳고… 그 댓글도 댓글을 낳고… 이걸 어떻게 정리하죠?”
* 🧩 재미 요소: `무한 댓글의 숲 탈출 프로젝트!`
* 💬 실사례 연결: “네이버, 카카오 뉴스 댓글은 어떻게 계층적으로 보일까?”

> **의문 유도:**
> “Spring Boot에서 댓글을 트리 구조로 표현하려면 어떻게 해야 할까요?”

---

### 2. 🎯 학습 목표

* 댓글 데이터의 **계층 구조 설계** 및 **DB 설계 방식** 이해
* **재귀적 구조 처리**와 **SQL self-join 또는 계층형 쿼리** 이해
* 댓글 리스트의 **페이징 처리 구현**
* Spring Boot 기반의 **실무형 댓글 시스템 구현**

---

### 3. 🔍 선수 학습 상기 및 실생활 연결하기

* 학습자 스스로 생각하도록 유도:

  * “우리는 게시글 CRUD, 댓글 입력까지는 했었죠! 그런데… 댓글이 또 댓글을 달면?”
* 선수 학습 리뷰:

  * Spring Boot MVC 기본 구조
  * 게시판 CRUD
  * MyBatis 또는 JPA 기본 매핑

---

### 4. 🧠 주요 개념/핵심 키워드를 최고의 암기법에 의한 제시

**🎯 암기 팁: “댓글은 층층이, 페이지는 넘넘이!”**

| 개념                 | 설명                   | 암기법            |
| ------------------ | -------------------- | -------------- |
| 계층형 구조 (Hierarchy) | 부모-자식 관계로 트리처럼 구성    | 부모가 있어야 자식도 있다 |
| parent\_id         | 댓글의 부모를 참조하는 필드      | ‘누구한테 다는 댓글이냐’ |
| self join          | 같은 테이블을 자기 자신과 조인    | ‘내가 나랑 대화함!’   |
| 페이징 처리             | 페이지 단위로 데이터 잘라서 보여주기 | 페이지는 넘기는 책장    |

---

### 5. 🔍 학습 목표별 탐구형 학습

**질문 유도 & 탐색 흐름**

> ❓ “계층형으로 데이터를 뽑으려면 DB에서 어떤 구조로 저장해야 할까?”
> 💡 힌트: `parent_id` 컬럼의 존재

> ❓ “parent\_id가 null인 건 뭘까?”
> 💡 힌트: 최상위 댓글

> ❓ “그럼 자식 댓글은 어떻게 트리로 구성하지?”
> 💡 힌트: 재귀 호출 or self join 활용

> ❓ “댓글이 1000개면 다 보여줘야 하나요?”
> 💡 힌트: 페이징은 리스트 친구

---

### 6. 👨‍🔧 실습 활동 및 협력 학습 유도

**실습 미션 1 – 댓글 테이블 만들기**

```sql
CREATE TABLE reply (
  id NUMBER PRIMARY KEY,
  content VARCHAR2(200),
  writer VARCHAR2(50),
  parent_id NUMBER, -- NULL이면 최상위
  group_id NUMBER,  -- 동일한 게시글 그룹
  reg_date DATE DEFAULT SYSDATE
);
```

**실습 미션 2 – 계층형 댓글 조회 쿼리 만들기**

```sql
SELECT LEVEL, id, content, parent_id
FROM reply
START WITH parent_id IS NULL
CONNECT BY PRIOR id = parent_id
ORDER SIBLINGS BY reg_date ASC;
```

**실습 미션 3 – 페이징 처리까지 구현하기**

* 댓글을 일정 개수씩 자르는 `LIMIT`/`ROWNUM` 처리
* `@Pageable`, `Page<>` 객체 활용(JPA), 혹은 MyBatis에서 `RowBounds` 사용

> 👨‍👩‍👧‍👦 팀 미션:
>
> * 각 팀은 댓글 트리와 페이징 기능을 분리해서 담당
> * API 문서 형식으로 스스로 설명 정리

---

### 7. 💬 단계별 피드백 제공과 자기 평가 기회

* ✍️ 체크리스트로 자기 평가:

  * [ ] 댓글에 parent\_id로 계층관계를 이해했다
  * [ ] 계층형 SQL이 이해된다
  * [ ] 페이징 처리 코드를 작성할 수 있다
* 👨‍🏫 멘토 피드백:

  * 실시간 코드 리뷰 및 개선 팁 제공

---

### 8. 📑 수행 평가 및 피드백 제공

> **실무 적용 프로젝트 평가 기준**

| 항목        | 기준            |
| --------- | ------------- |
| 계층형 댓글 조회 | 트리 구조 출력 여부   |
| 페이징 처리    | 페이지별 결과 정상 출력 |
| 코드 품질     | 주석, 가독성, 구조화  |
| 협업        | 역할 분담, 발표 내용  |

---

### 9. 🧩 학습 전이 강화와 실제 문제 적용 활동

**확장 과제 제안:**

* `대댓글 제한 기능`, `댓글 정렬 옵션`, `비동기 댓글 출력(AJAX)`
* 과제: 네이버 뉴스처럼 댓글 좋아요순/최신순으로 바꿔보기

**토의 질문:**

* “댓글이 수천 개면 성능은 어떻게 유지할까요?”
* “AJAX와 결합하면 어떤 UX 향상이 있을까요?”

---

### 10. 🪞 학습 반성 및 향후 학습 준비

* 오늘 배운 것을 스스로 요약해보세요 (3줄 코멘트)
* 다음 시간에는 댓글 \*\*삭제 처리(논리적 삭제)\*\*와 \*\*비동기 통신(AJAX)\*\*을 연계합니다.

