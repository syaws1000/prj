# 🌟 **SpringBoot - AOP 학습 교안 (ARCS + Gagné 기반 실무 탐구형 설계)**

---

### ✅ **1. 주의 집중 끌기 및 학습 연결성 제공 (Gain Attention + Relevance)**

\| 📍질문으로 시작하기 |
👉 “혹시 여러분은 이런 경험 없나요?”

* 로그인 기능은 잘 되는데, **모든 메소드마다 로그 찍느라 머리가 아프다!**
* 관리자만 접근 가능한 기능, 일일이 `if`로 검사하기… 너무 지겹다! 😰

> 💡 “이걸 단 한 줄도 안 고치고 처리하는 마법이 있다면?”

\| 🎬 활동 제안 |

* **시나리오 영상 보기**: "관리자만 접속해야 하는 URL을 일반 사용자가 접속했을 때, 로그 기록과 함께 튕기는 장면"
* **밈 활용**: “내 코드를 수정하지 않고도 기능을 추가하고 싶다면?” (도라에몽이 AOP 꺼내는 짤)

---

### ✅ **2. 학습 목표 (Inform Learner of Objectives)**

\| 🎯 오늘의 목표 |

* Spring AOP의 개념을 이해하고
* 실무에서 어떻게 활용되는지 시나리오로 익힌다
* 실습을 통해 **@Before, @After, @Around, @AfterThrowing** 등을 사용해보고
* 팀 과제를 통해 AOP를 적용한 공통 처리 기능을 설계·구현한다

---

### ✅ **3. 선수 학습 상기 및 실생활 연결하기 (Stimulate Recall + Relevance)**

\| 🧠 이전 지식 리마인드 |

* DI, IoC 개념과 `@Component`, `@Service`, `@Controller`의 역할
* 스프링 부트 프로젝트 구조
* 실무에서 자주 쓰는 로그 처리 (`log.info()`, `System.out.println()`)

\| 🤹 실생활 연결 |

* “공연을 보면 무대 위 배우만 보이지만, 조명·음향·세트는 자동으로 준비된다.”
  → AOP는 바로 **이 보이지 않는 배경 작업자**입니다.

---

### ✅ **4. 주요 개념/핵심 키워드를 최고의 암기법에 의한 제시 (Present the Content + Confidence)**

\| 🧩 핵심 키워드 정리 (AI 암기법 & 유머 결합) |

| 용어                                 | 기억 암기법                                       |
| ---------------------------------- | -------------------------------------------- |
| **관점(Aspect)**                     | “관찰력 좋은 사람은 작은 것도 본다” – **관점을 부여하는 코드 묶음**   |
| **횡단 관심사(Cross-cutting concerns)** | “모든 클래스에 공통으로 박힌 귀찮은 일” – **로그, 인증, 트랜잭션 등** |
| **JoinPoint**                      | “누구랑 만날지 정하는 지점” – 메소드 실행 지점                 |
| **Advice**                         | “이야기해주는 조언” – 실제 실행될 코드 (@Before, @After 등)  |
| **Pointcut**                       | “이곳에 조언하세요!” – Advice를 적용할 대상을 지정            |
| **Weaving**                        | “짜 맞추기 기술” – Advice와 실제 메소드를 합치는 시점          |

---

### ✅ **5. 학습 목표별 탐구형 학습 (Elicit Performance)**

\| 🤔 의문점 유도 + 힌트 |
**Q1.** 왜 모든 메소드에 똑같은 로그를 작성하는 걸까?
→ *힌트: '공통 처리'가 반복된다면 공통으로 빼면 되지 않을까?*

**Q2.** 특정 URL 접근 시 관리자만 들어오게 하고 싶은데, 어떻게?
→ *힌트: 실행 전에 검사할 수 있다면? @Before…*

\| 🔍 탐구형 활동 |

* `@Aspect`를 적용한 클래스를 만들고
* `@Before`로 로그 찍기, `@AfterThrowing`으로 예외 발생시 알림 출력해보기
* `execution(* com.example.service.*.*(..))` Pointcut 표현식 해석하기

---

### ✅ **6. 실습 활동 및 협력 학습 유도 (Provide Learning Guidance + Satisfaction)**

\| 🛠️ 실습 미션 (미니 프로젝트) |

* 팀별로 **관리자 인증이 필요한 서비스**를 만들고,
* **AOP로 로그와 권한체크 기능 구현**

\| 🧑‍🤝‍🧑 협업 포인트 |

* A팀: `@Before`로 로그 기능
* B팀: `@Around`로 실행시간 측정
* C팀: `@AfterThrowing`으로 예외 기록
  → 발표 후 각 팀이 서로 코드 리뷰 및 아이디어 제안

---

### ✅ **7. 단계별 피드백 제공과 자기 평가 기회 (Provide Feedback)**

\| 💬 즉각 피드백 |

* 실습 중 IDE 경고, 에러 상황 → 코치가 즉시 개입
* 팀별 실습 공유 후, 타 팀에서 **좋았던 점과 개선 아이디어** 공유

\| 🔁 자기 점검 체크리스트 |

* [ ] @Aspect, @Component 차이 이해
* [ ] Pointcut 표현식의 구조 이해
* [ ] 각 Advice의 타이밍 차이 구분 가능
* [ ] 실무 시나리오에 AOP 활용 아이디어 제시 가능

---

### ✅ **8. 수행 평가 및 피드백 제공 (Assess Performance + Satisfaction)**

\| 🧪 평가 활동 |

* **개인 평가**: 실무 시나리오 기반 퀴즈 (로그인, 결제, 관리자 기능 등)
* **팀 발표 평가**: 실제 AOP 코드 리뷰 + 발표 피드백

\| ✨ 재미 요소 포함 |

* 발표 후 “AOP 스타상🏆” 시상식
* 우수발표팀은 수업 후 간식 쿠폰 제공 🎁

---

### ✅ **9. 학습 전이 강화와 실제 문제 적용 활동 (Enhance Retention and Transfer)**

\| 🌍 실무 연계 미션 |

* “회원 탈퇴 시 모든 로그 삭제 + 관리자 알림”을 AOP로 구현해보기
* “예외가 발생했을 때, DB에 로그 남기고 Slack으로 알림” 시나리오 설계
