## 🚀 데이터 탐험가를 위한 NumPy 비급: 마법 주문서 

데이터의 광활한 왕국에 오신 탐험가 여러분, 환영합니다\! 🎉 파이썬이라는 훌륭한 언어를 사용하다 보면, 수많은 숫자로 이루어진 데이터를 다룰 때 속도가 느려지거나 코드가 복잡해지는 순간을 마주하게 됩니다. 마치 무거운 짐을 하나씩 손으로 옮기는 것과 같죠.

오늘 우리는 이 모든 문제를 해결해 줄 마법 도구, **NumPy**를 배우게 됩니다. NumPy는 데이터를 '배열'이라는 초고속 마법 상자에 담아, 강력한 마법 주문(함수)으로 순식간에 처리하게 해주는 비급서입니다.

-----

### 1\. 주의 집중 끌기 및 학습 연결성 제공

> 🤔 **탐험가의 질문:** "만약 수백만 개의 숫자 데이터 각각에 10을 더해야 한다면, 파이썬의 `for` 반복문으로 언제 다 처리하죠? 혹시 컴퓨터가 밤새 일해야 하나요? 😫"

맞습니다\! 정말 끔찍한 일이죠. 하지만 걱정 마세요. NumPy라는 마법을 사용하면 단 한 줄의 주문으로 눈 깜짝할 사이에 끝낼 수 있습니다\!

> **✨ 오늘의 마법 예고:**
>
>   * 파이썬 리스트: `[1, 2, 3, ... , 1000000]` (느릿느릿 거북이 🐢)
>   * NumPy 배열: `numpy_array + 10` (빛의 속도 로켓 🚀)

오늘은 바로 이 로켓에 탑승하는 방법을 배울 겁니다\!

-----

### 2\. 학습 목표

이 모험이 끝나면 여러분은 다음과 같은 **세 가지 강력한 마법**을 자유자재로 사용할 수 있게 됩니다.

1.  **데이터 생성 마법:** 원하는 형태와 규칙을 가진 데이터 덩어리(`ndarray`)를 소환할 수 있습니다.
2.  **데이터 변신 마법:** 생성된 데이터 덩어리를 원하는 모양으로 자유롭게 바꾸고(reshape), 필요한 부분만 정확히 잘라낼 수 있습니다(slicing).
3.  **데이터 연산 마법:** 수많은 데이터를 대상으로 복잡한 계산(합계, 평균 등)을 단 한 번의 주문으로 끝낼 수 있습니다.

-----

### 3\. 선수 학습 상기 및 실생활 연결하기

> 🤔 **탐험가의 질문:** "음... 근데 '배열'이라는 거, 파이썬의 '리스트'랑 비슷한 거 아닌가요? `[1, 'hello', True]` 처럼요."

아주 좋은 질문입니다\! 파이썬 리스트는 여러 종류의 데이터를 담을 수 있는 유연한 바구니와 같습니다. 하지만 NumPy의 배열은 **오직 같은 종류의 데이터(주로 숫자)만 담는 특수 제작된 상자**입니다.

> **힌트: 왜 그래야 할까요?**
> 모든 물건의 재질과 크기가 같다면, 기계로 훨씬 빠르고 체계적으로 정리할 수 있겠죠? NumPy가 빠른 이유가 바로 여기에 있습니다\!
>
> **현실 세계에서는?**
>
>   * **이미지 처리:** 여러분이 보는 모든 디지털 이미지는 사실 거대한 숫자 배열입니다\! (픽셀의 색상 값)
>   * **주식 분석:** 매일의 주가 데이터 역시 거대한 숫자 배열이죠.
>   * **게임 개발:** 캐릭터의 위치(x, y, z 좌표)나 능력치도 모두 배열로 관리됩니다.

-----

### 4\. 주요 개념/핵심 키워드를 최고의 암기법에 의한 제시

NumPy 마법의 핵심 주문 **3대 천왕**만 기억하세요\!

1.  **소환술 (배열 생성):** 데이터의 영혼을 불어넣는 주문입니다.

      * `np.array()`: 파이썬 리스트를 NumPy 배열로\! (가장 기본)
      * `np.arange()`: 연속된 숫자를 소환\! (마치 `range`처럼)
      * `np.zeros()`, `np.ones()`: 0 또는 1로 가득 찬 기본 재료를 소환\!

2.  **변신술 (배열 변형):** 소환된 데이터의 형태를 바꾸는 주문입니다.

      * `.reshape()`: 1줄로 길게 늘어선 데이터를 2D, 3D로 변신\! (진흙으로 그릇 빚기)
      * `[:]` (슬라이싱): 날카로운 마법 칼로 원하는 부분만 싹둑\!

3.  **연산술 (배열 연산):** 데이터 전체에 강력한 효과를 부여하는 광역 마법입니다.

      * `+`, `*`, `-`, `/`: 배열 전체에 한 번에 적용되는 사칙연산\! (마법 부여)
      * `np.sum()`, `np.mean()`: 모든 데이터의 합과 평균을 구하는 지혜의 주문\!

-----

### 5\. 학습 목표별 탐구형 학습

이제 직접 마법 주문을 외워볼 시간입니다\! 각 미션을 해결하며 스스로 탐험해 보세요.

**[미션 1] 데이터 소환하기**

> 🤔 **질문:** "0부터 9까지의 숫자를 가진 데이터 병사 10명을 가장 빨리 소환하는 주문은 무엇일까요?"
>
> **힌트:** '어떤 범위(a range)'의 숫자를 만드는 주문을 찾아보세요\!
>
> ```python
> ## 직접 주문을 입력해 보세요! ##
> import numpy as np
> soldiers = np._______(10) # 빈칸에 들어갈 주문은?
> print(soldiers)
> ```

**[미션 2] 부대 편성하기 (데이터 변신)**

> 🤔 **질문:** "소환한 10명의 병사가 너무 길게 서 있네요. 2줄, 5열의 '오와 열'을 맞춘 부대로 재편성하려면 어떻게 해야 할까요?"
>
> **힌트:** 모양을 '다시(re)' 만드는 'shape' 주문을 사용해 보세요\!
>
> ```python
> ## soldiers에 변신술을 사용해 보세요! ##
> formation = soldiers._______(2, 5) # 빈칸에 들어갈 주문은?
> print(formation)
> ```

**[미션 3] 전체 부대원 능력치 강화\! (데이터 연산)**

> 🤔 **질문:** "모든 병사의 공격력을 5씩 올리고 싶습니다. 한 명씩 강화하는 건 너무 힘들어요. 단 한 번의 광역 마법으로 해결할 수 있을까요?"
>
> **힌트:** NumPy의 배열은 스칼라(단일 값)와의 연산이 아주 자연스럽습니다. 그냥 더하면 됩니다\!
>
> ```python
> ## formation에 강화 마법을 걸어보세요! ##
> powered_up_formation = formation + ___ # 빈칸에 숫자를!
> print(powered_up_formation)
> ```

-----

### 6\. 실습 활동 및 협력 학습 유도

**🔥 중간 보스 레이드: "평균의 골렘"**

"평균의 골렘"은 자신의 몸을 이루는 모든 숫자의 평균값보다 낮은 공격은 모두 막아냅니다\! 골렘을 쓰러뜨릴 방법을 동료 탐험가와 함께 찾아보세요\!

> **골렘 데이터:**
>
> ```python
> golem_hp = np.array([15, 8, 22, 13, 30, 11, 7, 25, 19])
> ```
>
> 🤔 **공략 질문:**
>
> 1.  골렘의 방어 기준(평균 HP)은 얼마일까요? (`np.mean` 주문을 써보세요\!)
> 2.  골렘의 평균 HP보다 높은 공격력만 모아보면 어떻게 될까요? (불리언 인덱싱을 활용해 보세요\!)
> 3.  이 공격력들의 총합은 얼마인가요? (`np.sum` 주문\!)
>
> **\#\# 동료와 의논 후, 공략 코드를 작성해 아래에 공유해 보세요\! \#\#**

-----

### 7\. 단계별 피드백 제공과 자기 평가 기회

잘하고 있습니다\! "평균의 골렘" 공략법을 확인하며 자신의 탐험 일지를 점검해 봅시다.

> **모범 답안 (예시):**
>
> ```python
> # 1. 골렘의 방어 기준(평균 HP) 계산
> golem_defense = np.mean(golem_hp)
> print(f"골렘의 방어 기준: {golem_defense}")
> ```

> # 2\. 유효한 공격력 추출
>
> effective\_attacks = golem\_hp[golem\_hp \> golem\_defense]
> print(f"유효 공격력 리스트: {effective\_attacks}")

> # 3\. 최종 데미지 계산
>
> total\_damage = np.sum(effective\_attacks)
> print(f"골렘에게 준 총 데미지: {total\_damage}")
>
> ```
> 
> **🔎 자기 평가 체크리스트:**

>   - [ ] `np.mean()` 주문을 정확히 사용했는가?
>   - [ ] `배열 > 값` 형태의 조건문으로 불리언 마스크를 만드는 데 성공했는가?
>   - [ ] 불리언 마스크를 사용해 원하는 데이터만 추출(`인덱싱`)했는가?
>   - [ ] `np.sum()` 주문으로 최종 합계를 구했는가?
> ```

막혔던 부분이 있다면, 어느 주문이 어려웠나요? 체크리스트를 보며 다시 한번 시도해 보세요\!

-----

### 8\. 수행 평가 및 피드백 제공

**🏆 최종 관문: "데이터 드래곤의 보물"**

전설의 데이터 드래곤은 자신의 보물을 `5x5` 배열에 숨겨두었습니다. 보물의 위치는 숫자 `99`로 표시되어 있습니다. 드래곤의 보물을 찾아내고, 보물을 제외한 나머지 함정들의 평균 위험도를 계산하여 보고하세요\!

> **드래곤의 둥지:**
>
> ```python
> dragon_lair = np.array([
>     [ 5, 12,  3, 22,  8],
>     [15, 21, 11,  7, 18],
>     [ 4,  9, 99, 25,  2],
>     [31, 14,  6, 10, 20],
>     [17, 29,  1, 13, 16]
> ])
> ```
>
> **\#\# 여러분의 코드로 보물을 찾고, 함정의 위험도를 분석해 제출하세요\! \#\#**
>
>   * 피드백은 코드의 효율성(더 짧고 강력한 주문은 없는지), 정확성, 그리고 문제 해결 과정을 중심으로 제공될 것입니다.

-----

### 9\. 학습 전이 강화와 실제 문제 적용 활동

> 🤔 **탐험가의 질문:** "마법 주문은 잘 알겠는데... 이걸로 현실에서 대체 뭘 할 수 있죠?"

훌륭한 질문입니다\! 여러분은 이미 데이터 분석의 첫걸음을 뗀 것입니다.

  * **게임 밸런스 분석:** `dragon_lair`가 게임 캐릭터들의 능력치 표였다면? 보물(`99`)은 특정 사기 캐릭터를 의미할 수 있습니다. 나머지 캐릭터들의 평균 능력치를 계산해 게임 밸런스를 논할 수 있겠죠.
  * **온도 데이터 분석:** 배열의 각 값이 특정 지역의 온도라면? 평균 온도를 구하고, 특정 온도(예: 30도)를 넘는 지역이 몇 군데인지 바로 찾아낼 수 있습니다.
  * **나만의 프로젝트 아이디어:**
      * 한 달간의 용돈 기입장을 NumPy 배열로 만들어 평균 소비 패턴 분석하기
      * 좋아하는 스포츠 팀의 최근 10경기 득점 기록을 배열로 만들어 최고/최저 득점 경기 찾아보기

-----

### 10\. 학습 반성 및 향후 학습 준비

자, 오늘 우리는 NumPy라는 강력한 마법 도구의 기본을 익혔습니다.

> **🤔 마지막으로 스스로에게 질문해 보세요:**
>
>   * 오늘 배운 주문 중 가장 신기하고 재미있었던 것은 무엇인가요?
>   * 어떤 부분(예: 다차원 배열, 특정 함수)이 조금 더 연습이 필요하다고 느껴지나요?
>   * NumPy를 사용하면 나의 어떤 문제를 해결할 수 있을지 상상해 보세요.



