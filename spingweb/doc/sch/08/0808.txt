## 파이썬으로 나만의 데이터베이스 만들기: 맛집 리스트 CRUD 정복! (8시간 과정)

안녕하세요, 학습자 여러분! 😊 오늘 우리는 8시간 동안 파이썬을 이용해 데이터를 저장하고, 관리하는 방법을 배우게 됩니다. 마치 우리만의 작은 네이버 지도, 나만의 맛집 노트를 만드는 과정이라고 생각하면 쉬워요. 이 과정은 여러분이 스스로 탐구하고 문제를 해결하며, 결국엔 실무에서도 자신감을 가질 수 있도록 **가네(Gagné)의 9가지 수업 사태**와 **켈러(Keller)의 ARCS 동기유발 모델**을 기반으로 설계되었습니다.

지루한 이론 공부가 아닌, 질문과 해결의 과정을 통해 즐겁게 배워봅시다! Let's get started! 🚀

***

### 1. 주의 집중 끌기 및 학습 연결성 제공 (Attention & Relevance)

**🤔 의문 제기:**
"여러분, 혹시 맛집 정보를 찾을 때마다 메모장에 적거나, 카톡 '나에게 보내기'에 저장해 본 적 있나요? 친구가 "거기 어디였지?"라고 물어볼 때 한참 스크롤을 올렸던 경험은요? 만약 수백, 수천 개의 데이터를 그렇게 관리해야 한다면 어떨까요? 생각만 해도 끔찍하죠? 😱"

**💡 해결의 힌트:**
"세상의 모든 서비스(인스타그램, 유튜브, 은행 앱 등)는 이런 데이터를 '데이터베이스(DB)'라는 똑똑한 창고에 안전하고 체계적으로 보관합니다. 오늘 우리는 파이썬으로 이 창고를 만들고 관리하는 방법을 배울 겁니다. 수업이 끝나면, 여러분은 더 이상 '나에게 보내기'에 의존하지 않는, 자신만의 멋진 데이터 관리 프로그램을 만들 수 있게 될 거예요! 마치 엑셀 파일이 스스로 움직이는 마법 같을 겁니다!"



***

### 2. 학습 목표 (Relevance)

**🤔 의문 제기:**
"그래서 오늘 8시간 동안 뭘 배우면, 뭘 할 수 있게 되는 걸까요? 그냥 '파이썬 데이터베이스'라고 하니 막연하게 느껴지나요?"

**💡 해결의 힌트:**
"이 수업이 끝나면, 여러분은 다음 세 가지를 **자신 있게** 할 수 있습니다!"

* **하나!** 데이터베이스와 테이블의 개념을 이해하고, 나만의 '맛집 정보' 테이블을 설계하고 생성할 수 있습니다.
* **둘!** 파이썬 코드를 이용해 맛집 데이터를 **등록(Create), 조회(Read), 수정(Update), 삭제(Delete)** 하는 **CRUD** 기능을 자유자재로 구현할 수 있습니다.
* **셋!** 이 기술을 응용하여 간단한 회원 관리, 재고 관리 등 실생활의 문제를 해결하는 미니 프로젝트의 기틀을 다질 수 있습니다.

***

### 3. 선수 학습 상기 및 실생활 연결하기 (Prerequisite Recall & Relevance)

**🤔 의문 제기:**
"데이터베이스... 너무 어려운 거 아닐까요? 혹시 제가 아는 것과 관련이 있을까요? 파이썬 기초만 겨우 아는데 괜찮을까요?"

**💡 해결의 힌트:**
"전혀 걱정 마세요! 여러분은 이미 데이터베이스와 비슷한 것을 매일 사용하고 있어요. 바로 **엑셀(Excel)**이나 **구글 시트**입니다!"

* **엑셀 시트** 👉 **데이터베이스의 '테이블'**
* **엑셀의 행(Row)** 👉 **데이터 한 건 (예: A 식당 정보)**
* **엑셀의 열(Column)** 👉 **데이터의 속성 (예: 식당 이름, 주소, 메뉴, 별점)**

"파이썬의 `변수`, `리스트`, `딕셔너리`에 데이터를 담아봤죠? 하지만 프로그램이 꺼지면 다 사라졌잖아요. 데이터베이스는 그 데이터가 **영원히 저장되는 마법의 리스트**라고 생각하면 쉽습니다! 여러분이 아는 지식에서 딱 한 걸음만 더 나아가는 거예요. 할 수 있습니다! 👍"

***

### 4. 주요 개념/핵심 키워드를 최고의 암기법에 의한 제시 (Presenting the Content)

**🤔 의문 제기:**
"DB, SQL, CRUD... 용어가 너무 많고 헷갈려요. 이걸 어떻게 다 외우죠? 🤯"

**💡 해결의 힌트:**
"이야기로 외워봅시다! 여기 'DB'라는 말을 못 알아듣는, 아주 꼼꼼하지만 융통성 없는 로봇 비서🤖가 있다고 상상해 보세요."

* **DB (Database):** 데이터를 보관하는 **'초강력 메모리 창고'**.
* **SQL (Structured Query Language):** 이 로봇 비서에게 명령을 내리는 **'유일한 언어'**. (한국어도, 영어도 못 알아들어요!)
* **CRUD (Create, Read, Update, Delete):** 우리가 로봇에게 시킬 수 있는 **가장 중요한 4가지 명령!**
    * `INSERT` (Create): "로봇아, 이 맛집 정보 새로 **입력해**!" ➡️ **등록**
    * `SELECT` (Read): "로봇아, 강남역 근처 맛집 정보 **선택해서 보여줘**!" ➡️ **조회**
    * `UPDATE` (Update): "로봇아, A식당 전화번호 바뀌었어. **최신 정보로 고쳐**!" ➡️ **수정**
    * `DELETE` (Delete): "로봇아, B식당 폐업했대. 정보 **지워버려**!" ➡️ **삭제**

"이 네 가지(CRUD)만 알면 데이터베이스의 절반은 정복한 겁니다! 참 쉽죠?"

***

### 5. 학습 목표별 탐구형 학습 (Learning Guidance & Confidence)

**🤔 의문 제기:**
"좋아요, 개념은 알겠어요. 그럼 이제 파이썬으로 어떻게 연결하죠? 코드는 어떻게 짜야 할까요? 막막해요."

**💡 해결의 힌트:**
"단계별로 미션을 해결하며 직접 코드를 완성해 봅시다! 정답을 바로 알려드리지 않을 거예요. 힌트를 보고 직접 답을 찾아보세요!"

* **Mission 1: DB 파일 만들고 접속하기**
    * **질문:** 파이썬에 내장된 DB 관리 도구 이름이 뭘까요? `oracledb`와 관련이 있을 것 같아요. 파이썬 공식 문서에서 `oracledb`를 검색해볼까요? DB 파일에 '연결'하는 거니까, `connect` 같은 함수가 있지 않을까요?
    
	import oracledb as oci
    # Instant Client 설치된 경로로 설정
    lib_dir_path=r"c:\a03_pythonexp\instantclient_11_2"
    # 접속
    oci.init_oracle_client(lib_dir=lib_dir_path)
    con = oci.connect("scott/tiger@localhost:1521/xe")

* **Mission 2: 명령을 내릴 '로봇 팔' 만들기**
    * **질문:** 연결은 했는데, SQL 명령은 누가 전달하죠? 연결(connection) 객체 안에 명령을 실행(execute)할 무언가가 필요해요. 보통 '커서(cursor)'라고 부릅니다.
    * `c = conn.cursor()`

* **Mission 3: 데이터 조회하기 만들기**
    * **질문:** `select * from emp` 이라는 SQL 명령을 써야 해요. `이름(name)`, `주소(address)`, `대표메뉴(signature_menu)` 열을 만들고 싶어요. 각 열에 어떤 종류의 데이터(글자? 숫자?)가 들어갈지도 알려줘야 합니다. 글자는 `TEXT`라고 표현해요.
    * `c.execute("select * from emp...")` 코드를 완성해보세요!

***

### 6. 실습 활동 및 협력 학습 유도 (Elicit Performance & Satisfaction)

**💻 실습 시간! (Pair Programming)**
"이제 짝과 함께 직접 데이터를 넣어봅시다! 한 명은 운전사(코드를 작성), 다른 한 명은 항해사(오류를 찾고 아이디어 제시)가 되어 역할을 바꿔가며 진행해 보세요."

* **활동 1: 나만의 최애 맛집 3곳 등록하기 (Create)**
    * `INSERT INTO` 구문을 사용해서 여러분이 가장 좋아하는 맛집 3곳의 정보를 데이터베이스에 저장해 보세요.
    * **웃음 포인트:** "만약 오류가 난다면? 로봇 비서가 여러분의 명령을 못 알아들은 거예요! 오타가 있는지, 쉼표는 잘 찍었는지 확인해 보세요. 로봇은 생각보다 멍청하답니다! 😂"

* **활동 2: 전체 맛집 리스트 조회하기 (Read)**
    * `SELECT * FROM` 구문을 사용해서 방금 넣은 데이터가 잘 들어갔는지 확인해 보세요.
    * 짝의 데이터베이스에는 어떤 맛집이 들어있는지 서로 확인하고 이야기 나눠보세요!

***

### 7. 단계별 피드백 제공과 자기 평가 기회 (Provide Feedback & Confidence)

**🤔 의문 제기:**
"코드를 실행했는데 아무 일도 안 일어나요! 혹은 에러 메시지가 떠요. 뭐가 문제죠?"

**💡 해결의 힌트 및 피드백:**
"훌륭한 질문입니다! 프로그래밍은 원래 오류와 함께 성장하는 법이죠."

* **즉각적인 피드백:** 코드를 실행한 후, `print("성공적으로 추가되었습니다!")` 같은 메시지를 출력하게 만들어 보세요. 성공 여부를 바로 알 수 있습니다.
* **오류 메시지 친구 되기:** 빨간색 에러 메시지를 무서워하지 마세요! `SyntaxError`는 문법 오류, `NoSuchTableError`는 테이블이 없다는 뜻이에요. 에러 메시지는 '틀렸어!'가 아니라 **'여기를 한번 확인해봐!'** 라고 알려주는 친절한 힌트입니다.
* **자기 평가:**
    * (Create 후) `SELECT` 문으로 내가 넣은 데이터가 정확히 들어갔는가?
    * (Update 후) `SELECT` 문으로 변경된 내용이 잘 반영되었는가?
    * 스스로 질문하고 확인하는 습관이 최고의 실력 향상 비결입니다.

***

### 8. 수행 평가 및 피드백 제공 (Assess Performance)

**🏆 최종 미션: 나만의 맛집 관리 프로그램 완성하기**

"이제 여러분은 CRUD의 모든 것을 배웠습니다! 배운 내용을 총동원해서 아래 기능을 모두 포함하는 파이썬 파일을 만들어보세요."

1.  **새로운 맛집을 추가**하는 기능
2.  **특정 맛집 정보(예: 주소)를 수정**하는 기능
3.  **특정 맛집을 리스트에서 삭제**하는 기능
4.  **전체 맛집 리스트를 예쁘게 출력**하는 기능

"완성 후에는 자신의 코드를 다른 사람에게 설명해 주세요. 코드는 내가 아는 것을 증명하는 가장 확실한 방법입니다. 막히는 부분이 있다면, 주저 말고 손을 들어주세요! 여러분의 도전을 응원합니다!"

***

### 9. 학습 전이 강화와 실제 문제 적용 활동 (Enhance Retention & Transfer)

**🤔 의문 제기:**
"맛집 리스트는 만들었어요. 그런데 이걸로 또 뭘 할 수 있을까요? 이게 정말 실무에 도움이 될까요?"

**💡 해결의 힌트:**
"물론입니다! 여러분이 만든 구조는 모든 정보 관리의 기본입니다."

* **아이디어 확장:**
    * **개인용:** 독서 기록장, 영화 감상평, 개인 연락처 관리
    * **커뮤니티용:** 웹사이트 회원 정보, 게시판 글/댓글 저장, 쇼핑몰 상품 정보/재고 관리
    * **데이터 분석용:** 공공데이터(날씨, 인구 등)를 DB에 저장하고 분석하기

* **미래와의 연결:** 오늘 배운 `sqlite`는 시작일 뿐입니다. 더 큰 시스템에서는 `MySQL`, `PostgreSQL` 같은 강력한 데이터베이스를 사용하죠. 하지만 기본 원리와 SQL 언어는 **거의 똑같습니다!** 여러분은 이미 가장 중요한 첫걸음을 뗀 것입니다.

***

### 10. 학습 반성 및 향후 학습 준비 (Satisfaction & Next Steps)

**📝 오늘 하루를 돌아보며...**

"8시간 동안 정말 고생 많으셨습니다! 마지막으로, 오늘 배운 내용을 정리하고 앞으로의 길을 그려봅시다."

* **오늘 가장 재미있었거나, 가장 어려웠던 부분은 무엇인가요?**
* **오늘 배운 CRUD 개념을 이용해, 당장 만들어보고 싶은 나만의 프로그램이 있나요?**
* **다음 단계로 나아가고 싶다면 무엇을 공부하면 좋을까요?** (힌트: `웹 프레임워크(Flask, Django)`와 연결하기, 더 복잡한 `SQL 쿼리` 배우기 등)

"여러분은 오늘 '데이터를 다루는 힘'을 얻었습니다. 이 강력한 무기를 어떻게 사용할지는 이제 여러분의 상상력에 달려 있습니다. 꾸준히 코딩하며 자신만의 멋진 프로젝트를 만들어가시길 바랍니다. 수고하셨습니다! 👏"