
## ✨ 스프링부트와 Chart.js로 살아있는 데이터 시각화 만들기 ✨

안녕하세요, 미래의 데이터 마법사 여러분! 🧙‍♀️ 그냥 밋밋한 텍스트와 숫자로 가득한 화면은 이제 그만! 
이번 시간에는 스프링부트(백엔드)가 준비한 데이터를 AJAX라는 날쌘돌이 배달부를 통해 받아와,
 Chart.js라는 아티스트가 멋진 그래프로 그려내는 과정을 함께 탐험해 보겠습니다. 
 마치 살아 움직이는 듯한 동적 차트를 직접 만들어 보며 데이터에 생명을 불어넣어 봅시다!

---

### **1. 호기심 장착! 왜 이걸 배워야 할까? (주의 집중 및 학습 연결성)**

혹시 실시간으로 변하는 주식 차트나, 매일 업데이트되는 코로나 확진자 현황 그래프를 본 적 있나요? 
웹페이지를 새로고침하지 않았는데도 데이터가 스르륵 바뀌는 걸 보면 신기하지 않으셨나요?

> **🤔 앗, 진짜! 어떻게 페이지 전체를 로딩하지 않고 그래프만 바꿀 수 있는 거죠?**
> **힌트 🤫:** 웹페이지의 '부분'만 서버와 몰래 통신하는 비밀 요원이 있답니다. 우리는 그 요원을 'AJAX'라고 부를 거예요!

이번 학습을 통해 여러분은 이 '마법'의 원리를 이해하고, 직접 구현하여 사용자에게 실시간 정보를 멋지게 보여주는 
웹 대시보드 개발자로 거듭날 수 있습니다.

### **2. 학습 후, 당신은... (학습 목표)**

이 과정을 마치면 여러분은 다음을 할 수 있게 됩니다.

* **스프링부트, AJAX, Chart.js**가 각자 어떤 역할을 하는 '드림팀'인지 설명할 수 있습니다.
* 스프링부트 컨트롤러를 이용해 **차트에 필요한 데이터를 JSON 형식으로 제공하는 API**를 만들 수 있습니다.
* 자바스크립트의 **`fetch` API (AJAX)를 사용해 비동기적으로 서버의 데이터를 요청**하고 받아올 수 있습니다.
* 받아온 데이터를 **Chart.js를 이용해 막대그래프, 선 그래프 등 원하는 모양으로 시각화**할 수 있습니다.

### **3. 기억을 꺼내 현실과 연결하기 (선수 학습 상기)**

혹시 스프링부트로 간단한 텍스트나 JSON을 반환하는 `@RestController`를 만들어 본 경험을 기억하시나요? 
그때의 기억을 살짝 꺼내보세요!

> **🤔 예전에 `@GetMapping`으로 "Hello World"는 띄워봤는데... 그래프 데이터는 어떻게 다를까요?**
> **힌트 🤫:** "Hello World"라는 단일 값 대신, 그래프의 X축에 해당하는 '이름표(labels)'와 Y축에 해당하는 
'숫자(data)'를 한 쌍으로 묶어서 보내주면 어떨까요? 마치 배달 음식 세트 메뉴처럼요!

이 기술은 여러분이 앞으로 만들게 될 **회사의 매출 현황 대시보드, 쇼핑몰의 일일 방문자 수 추이, IoT 기기에서 수집된 센서 데이터 시각화** 등 실무의 핵심 기능에 바로 적용됩니다.

### **4. 핵심 삼총사, 쉽게 외워버리기! (주요 개념 제시)**

복잡해 보이지만, 딱 세 명의 전문가만 기억하면 됩니다! 이들을 **'데이터 시각화 어벤져스'** 라고 불러봅시다.

* **👨‍🍳 스프링부트 (백엔드 셰프):** 신선한 재료(데이터)를 DB에서 꺼내 맛있게 요리하고 준비하는 총괄 셰프입니다.
* **🏃‍♂️ AJAX (날쌘돌이 서빙맨):** 주방(백엔드)과 손님 테이블(프론트엔드) 사이를 눈 깜짝할 사이에 오가며, 식당 전체를 시끄럽게 하지 않고 조용히 음식(데이터)만 전달하는 프로 서빙맨입니다.
* **🎨 Chart.js (감각적인 아티스트):** 서빙맨이 가져온 음식(데이터)을 아름다운 그림(차트)으로 캔버스(HTML `<canvas>`) 위에 그려내는 아티스트입니다.

이 세 명의 역할을 명확히 이해하면, 앞으로 어떤 문제가 생겨도 누구의 책임인지(?) 빠르게 파악할 수 있답니다! 😄

### **5. 직접 탐험하며 길을 찾기 (탐구형 학습)**

이제 직접 코드를 만져볼 시간입니다. 각 단계별 질문에 스스로 답을 찾아보세요.

* **1단계: 데이터 준비 (Spring Boot)**
    > **🤔 컨트롤러에서 어떤 형태로 데이터를 돌려줘야 Chart.js가 좋아할까요?**
    > **힌트 🤫:** Chart.js 공식 문서를 살짝 엿보니, `labels`라는 배열과 `datasets`라는 배열 묶음을 좋아하는 것 같아요. 자바의 `Map`이나 별도의 `DTO(Data Transfer Object)` 클래스를 만들어 이 구조를 흉내 내 보세요. `@GetMapping("/api/chart-data")` 같은 주소로 이 데이터를 보내주면 되겠죠?

* **2단계: 캔버스 준비 및 AJAX 요청 (HTML/JS)**
    > **🤔 서버에 있는 데이터를 자바스크립트로 어떻게 가져오죠? 전화라도 걸어야 하나요?**
    > **힌트 🤫:** '전화' 대신 `fetch('/api/chart-data')` 함수를 사용해 보세요! 브라우저의 개발자 도구(F12) 'Network' 탭에서 우리가 만든 API로 요청이 잘 가는지, 서버가 응답을 잘 주는지 실시간으로 감시할 수 있습니다.

* **3단계: 데이터 연결 및 차트 그리기 (JS/Chart.js)**
    > **🤔 `fetch`로 데이터를 받아오긴 했는데... 이 데이터를 어떻게 `new Chart()` 안에 쏙 넣을 수 있을까요?**
    > **힌트 🤫:** `fetch`는 '언젠가 데이터를 줄게'라는 약속(Promise)을 반환해요. `.then(response => response.json())`으로 포장을 뜯고, 다시 `.then(data => { ... })` 안에서 `data.labels`와 `data.datasets`를 꺼내 Chart.js의 `data` 속성에 각각 연결해 보세요!

### **6. 내 손으로 직접! (실습 및 협력 학습)**

**미션: 월별 매출 현황 막대 차트를 구현하라!**

1.  백엔드(스프링부트)에서 1월부터 6월까지의 가상 매출 데이터를 담은 API를 만드세요.
2.  프론트엔드(HTML/JS)에서 이 API를 호출하여 받아온 데이터로 막대(bar) 차트를 그리세요.

**🚀 레벨업 미션:**
* 혼자 다 했다면, 옆자리 동료와 역할을 바꿔보세요. (백엔드 ↔ 프론트엔드)
* 막대 차트를 선(line) 차트나 파이(pie) 차트로 바꿔보세요. 코드의 어느 부분을 바꿔야 할까요?

### **7. 괜찮아, 누구나 겪는 오류야! (피드백 및 자기 평가)**

코딩을 하다 보면 언제나 버그라는 불청객이 찾아오죠. 당황하지 마세요! 아래 체크리스트로 스스로 문제를 진단해 봅시다.

* **[  ] 차트가 아예 안 나와요!** -> 브라우저 개발자 도구의 'Console' 탭에 빨간색 에러 메시지가 있나요? (404 Not Found? -> API 주소 오류!, CORS policy? -> 보안 정책 오류!)
* **[  ] 차트는 나오는데 데이터가 없어요!** -> `console.log(data)`를 이용해 `fetch` 이후 받아온 데이터가 내가 의도한 모양(labels, datasets)이 맞는지 찍어보세요.
* **[  ] 서버에서 500 에러가 떠요!** -> 이클립스나 인텔리제이의 콘솔 창에 어떤 예외(Exception)가 발생했는지 확인해 보세요.

### **8. 너의 실력을 증명해봐! (수행 평가)**

**최종 과제: 실시간 인기 투표 현황판 만들기**

* **요구사항:**
    1.  스프링부트에 '짱구', '도라에몽', '뽀로로'의 현재 득표수를 저장하는 가상 데이터를 만드세요. (실제 DB 연동 X)
    2.  이 데이터를 JSON으로 제공하는 API (`/api/poll-status`)를 구현하세요.
    3.  프론트엔드에서 3초에 한 번씩 이 API를 자동으로 호출하여 파이(pie) 차트를 업데이트하는 기능을 구현하세요.
    4.  (도전 과제) 각 캐릭터 이름 옆에 투표 버튼을 만들고, 버튼을 누르면 서버에 투표 결과가 반영되어 차트가 즉시 갱신되게 해보세요.

> **힌트 🤫:** 3초마다 반복 실행하려면 자바스크립트의 `setInterval()` 함수를 알아보세요! 버튼 클릭 이벤트를 처리하려면 `addEventListener`를 사용해야 합니다.

### **9. 배움을 현실로! (학습 전이 강화)**

오늘 배운 내용은 어디에 더 써먹을 수 있을까요?

> **🤔 만약 우리 팀 프로젝트의 관리자 페이지에 '최근 7일간의 신규 가입자 수'를 보여주는 선 그래프를 넣어야 한다면?**

* **탐구 질문 1:** DB에서 최근 7일간의 데이터를 날짜별로 `COUNT`하는 SQL 쿼리는 어떻게 짜야 할까?
* **탐구 질문 2:** Repository와 Service 계층은 어떻게 구성해야 할까?
* **탐구 질문 3:** 컨트롤러가 반환하는 DTO의 모습은 오늘 실습한 것과 어떻게 달라져야 할까?

### **10. 성장의 발자취 (학습 반성 및 향후 학습)**

축하합니다! 여러분은 데이터 시각화의 첫걸음을 성공적으로 내디뎠습니다. 🎉

* 오늘 학습에서 가장 어려웠던 부분은 무엇이었나요?
* '아하!'하고 깨달음을 얻은 순간은 언제였나요?
* 다음에는 어떤 것을 더 해보고 싶나요? (예: 차트 클릭 시 이벤트 발생시키기, 여러 개의 데이터를 한 차트에 표현하기 등)
