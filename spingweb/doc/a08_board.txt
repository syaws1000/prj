# 답변형 게시판
1. 개요
 답변형 게시판은 사용자가 질문을 올리고 그에 대한 답변을 주고 받을 수 있는 플랫폼입니다.
 이를 위해 사용자는 질문을 제출하고, 관리자는 질문에 답변할 수 있어야 합니다. 또한, 페이징 처리,
 첨부파일 업로드, 세션 처리 등의 기능이 필요합니다.
 
2. 주요 기능
 	1) 질문 및 답변 기능
 		- 사용자는 질문을 작성하고 제출할 수 있어야 합니다.
 		- 관리자는 질문에 대한 답변을 작성하고, 이를 사용자에게 제공할 수 있어야 합니다.
 		- 답변은 일반적으로 시간 순서대로 정렬되어야 합니다.
 	2) 페이징 처리
 		- 많은 양의 질문과 답변을 효율적으로 관리하기 위해 페이징 처리가 필요합니다.
 		- 한 페이지에 보여줄 항목 수를 설정하고, 사용자가 페이지를 넘기며 모든 질문과 답변을 탐색할 수 있어야 합니다.
 	3) 첨부 파일 업로드
 		- 사용자를 질문이나 답변에 파일을 첨부할 수 있어야 합니다.
 		- 이미지, 문서 등 다양한 형식의 파일을 업로드하고 관리해야 합니다.
 	4) 세션 관리
 		- 사용자의 로그인 상태를 세션으로 관리하여, 로그인한 사용자와 비로그인 사용자의 권한을 구분해야 합니다.
 		- 관리자는 특정 기능에 대한 접근 권한을 가지며, 이를 세션으로 제어합니다.
3. 핵심 코드 
	1) 계층형 테이블 설계와 계층형 sql
	2) 답글 처리시, 답글 등록 처리
	3) 파일 업로드 처리시, MultiPartFile 객체를 이용한 클라이언트에서 서버로 파일 stream 형식으로 전송
	4) 세션에 따른 글 등록과, 등록한 사람만 글 수정/삭제 가능 처리..

4. 파일 정리
	1) backend
		A01_BoardController.java
		A02_BoardService.java
		A03_BoardDao.java
		Board.java : List<Board>(조회리스트), Board(상세화면)
		BoardSch.java : 조회, 페이징처리(현재페이지번호, 총페이지수, 페이지의 시작번호, 마지막번호,...)
		FileDto.java : 첨부파일 정보 List<FileDto>
		
	2) frontend(view단)
		a01_boardList.jsp  : 게시글 제목과 작성자로 검색리스트 처리 화면
		a02_boardInsert.jsp : 게시글 등록/답글 등록 화면
		a03_boardDetail.jsp : 게시글 상세화면 수정/삭제/답글 달기 처리 기능

5. 개발 순서
	1) 기본 테이블/sequence 만들기
		게시글 : board - 번호, 답글번호, 제목, 내용, 작성자, 읽은수,등록일, 수정일
		파일관리 : boardfile	- 번호, 파일명, 기타사항, 등록일, 수정일
		CREATE TABLE BOARD(
			NO NUMBER PRIMARY KEY,  -- 글번호(기본키)
			REFNO NUMBER,  - 답글번호
			SUBJECT VARCHAR2(100),  -- 제목
			CONTENT VARCHAR2(1000), -- 내용
			WRITER VARCAHR2(50), -- 작성자
			READCNT NUMBER, -- 조회수
			REGDTE DATE, -- 등록일
			UPTDTE DATE  -- 수정일
		);
		CREATE TABLE BOARDFILE(
			NO NUMBER,
			FNAME VARCHAR2(100),
			ETC VARCAHR2(500),
			REGDTE DATE,
			UPTDTE DATE
		);
		CREATE SEQUENCE BOARD_SEQ;
		INSERT INTO BOARD VALUES(BOARD_SEQ.NEXTVAL,0,'첫번째글','내용없음','홍길동',0,SYSDATE, SYSDATE);
		
		SELECT * FROM BOARD;
		
	2) 기본 dto
		- 리스트위한 dto
			Board
		- 검색을 위한 dto
			BoardSch
	3) 조회리스트 화면 구현
		sql
		
		
		
		dao
		service
		controller
		뷰(jsp)
				
	
	
# 게시판에서 첨부파일 처리..
1. DB구성 : 첨부 파일정보를 저장하고 있어야 된다.
		CREATE TABLE BOARDFILE(
			NO NUMBER,
			FNAME VARCHAR2(100),
			ETC VARCAHR2(500),
			REGDTE DATE,
			UPTDTE DATE
		);
	INSERT INTO BOARDFILE VALUES(해당게시물과 동일한 번호, '파일명', 게시판제목, SYSDATE, SYSDATE);
2. DTO
	class FileDto{}
3. 파일 첨부하는 service단에러 위 내용을 함께 처리하여야, 해당 게시물의 상세 내역에서 첨부파일 내역을 
	확인할 수 있다.
				
# 개발 순서
1. 파일 첨부 dao 구성
	sql

2. 게시물 등록시, 파일정보도 등록되게 처리
	Dto(Board 안  MultiPartFile[] mfs 로 선언하여 처리한다)
3. service단 처리
    서버에 특정한 경로로 업로드 폴드 선언
    파일업로드 처리..
    파일정보 등록(Dao 등록된 내용)


4. view단( form encType="mutipart/form-data")
	첨부파일 항목 추가 <input type="file" name="reports" multiple="multiple"					
			
# 게시물의 로그인 세션에 의한 관리
1. 게시물의 작성자를 로그인한 세션값으로 설정하며 등록하면,
	게시물에 대한 수정/삭제시 따로 해당 게시물에 대한 비번호를 입력하지 않아도,
	작성자와 현재 로그인한 세션 id를 비교하여, 권한에 따른 처리를 할 수 있다.
2. 그래서, 로그인한 세션과 같은 작성자일 때만 수정 삭제하고, 등록시도 readonly로 세션아이디로
	만 등록하여 효과적인 게시물 관리를 할 수 있다..
3. 개발 순서
	1) css/js 환경구성 초기 로그인 화면 로딩
	2) dao 처리
		member 테이블의 아이디/패스워드로 로그인 sql 작성.
	3) service 처리
	4) controller 로그인 후, DB에 있을 경우 세션값으로 설정, 그외는 다시 로그인 처리..		
	5) 뷰단 게시물 등록시, 등록자는 session에 있는 입력값으로 등록(readonly처리한다)
	
# 게시물 상세화면 처리
1. 주요 기능
	1) 게시물 상세 정보를 출력
	2) 상세화면에서 수정/삭제/답글 처리 가능	
		- 권한에 따라 수정/삭제는 작성자만 처리가 가능하게 session에서 처리..
	3) 파일리스트 정보 출력 - 클릭시, 첨부된 파일 다운로드 처리		
2. 개발 순서
	1) 게시물 상제 정보 처리/파일정보를 위한 dao 처리
		SELECT * FROM BOARD WHERE NO = 1;
		SELECT * FROM BOARD_FILE WHERE NO = 1;
	2) SERVICE
		- 두가지 정보(기본정보, 첨부된 파일리스트 정보)를 하나의 DTO에 넣을 수 있게 DTO 처리
		- 모델데이터에서 따라 정보를 로딩하게 처리도 가능
	3) controller
		- model데이터르로 기본정보와 첨부된 파일리스트 정보를 설정
		- 상세화면 view단 처리..
	4) view
		- 상세화면 구성
			form데이터
			기능 버튼 구현(수정/삭제/답글/메인화면이동)
	5) 리스트 화면에서 더블클릭시, 상세 controller 호출 처리.

# 게시물 다운로드 처리.
	
	
# 세션권한에 따른 수정/삭제 처리
1. 로그인시 인증된 계정으로 접근할 시, 게시물에 대한 수정/삭제는 해당 게시물을 등록한
	사용자에게만 있는 것이 일반적이다. 게시물을 보기권한을 모든 사용자에게 설정했다면
	수정 삭제는 session을 비교하여 처리한다.
2. 개발 순서
	1) login 세션 처리
	2) 상세화면에서 작성자와 현재 session의 작성자가 동일 아이디인지 확인하여,
		수정처리하게끔 한다.
		
					
# 답글 처리
1. 답글 : 해당 글에 대한 글에 하위 글로 문의 내용에 대하여 답을 다는 글이고,
 ps) 댓글 : 해당 글에 대하여 여러가지 답이 아니더라도 첨부할 정보를 다는 글을 말하는데
 	일반적으로 비슷하게 구분하지 않고 쓰는 경우도 많다. 			
2. 현재 처리되는 게시판의 답글을 계층형으로 하위 글(기본 글의 종속된 글이라는 개념)로 처리되어
	답글의 계층레벨까지 설정하여 리스트에서도 해당글의 어느 글의 답글인지, 또 어떤 레벨의 답글인지를
	표현하여 처리되게 한다. 	
3. 기본 구조
	1) 데이터 처리
		no 컬럼 : main 글번호로 해당 글을 등록할 때, sequence에 의해 처리되는 등록 번호
		refno 컬럼 : 특정한 main 글번호에 대한 하위 글번호를 나타날때, 상위 글번호를 설정한다.
				1번글로 최총 게시물 등록을 하였다면, 하위 글은 no는 2번글로 refno는 1번로 설정되는 것을 말한다.
	    no  refno   title
		1   0		첫번째글
		2   0       두번째글
		3   0       세번째글
		4   2       RE:두번째글에 대한 답글
		5   3       RE:세번째글에 대한 답글
		6   1       RE:첫번째글에 대한 답글..
		==> 화면에서 답글을 메인글의 바로 밑에 위치하여 해당 글에 대한 하위 글인 것을 표현하여야 한다.
			oracle 에서 지원하는 계층형 sql이 필요로 한다..
		3   0     세번째글
		5   3     RE:세번째글에 대한 답글
		2   0     두번째글
		4   2     RE:두번째글에 대한 답글					
		1   0     첫번째글
		6   1     RE:첫번째글에 대한 답글..


		
		계층형 sql 처리..
		select * from board
		start with refno = 0    위와 같은 상위글아래에 sql을 처리하기 위해 처리되는 내용
		connect by prior no = refno  상위글번호와 하위 글번호 연결 처리..
		order by siblings by no desc  가장 마지막에 올린글이 가장 위로 올라오게 처리..
		
	2) 답글 달기 처리 프로세스
		상세화면에서 답글 달기 ==> 등록화면으로 아래와 같이 기본데이터 처리로 이동 ==> 글등록 처리
		상세화면 속성		등록화면 속성
		no			==> refno
		subject     ==> "RE:"+subject
		content     ===> \n\n\n\n\n\n======= 이전글 =====\n + content
	3) 답글 달기 처리 프로세스
		답글 클릭시, $("form").attr("action", "boardReply")
		controller
			@PostMapping("boardReply")
				@ModelAttribute("re") Board ins   : board를 모델 데이터로 쓰면 초기 화면에서 답글을 단 모델데이터 충돌발생..
				
				ins.setRefno(ins.getNo())
				ins.setSubject("RE:"+ins.getSubject());
				ins.setContent("\n\n\n\n\n\n======= 이전글 =====\n" + ins.getContent());
				
				
				
		
		
						
	
	


	
 	