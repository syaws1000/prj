# 스프링 WebSocket을 활용한 실시간 채팅 
1. 웹소켓 통신 소개
	1) WebSocket 프로토콜을 사용하여 클라이언트와 서버 간의 양방향 실시간 통신을 구현하는 방법에 대한 내용입니다.
	2) 웹소켓을 사용하면 클라이언트가 서버에 지속적으로 연결되어 메시지를 주고받을 수 있어 실시간 채팅, 알림, 게임 등에 활용됩니다.
	
	EX) [일반 기본 웹프로그래밍] 특정한 데이터 입력, 전송버튼을 클릭시, 서버에 데이터 전송하고, 그 결과를
		다시 화면에 받아서 처리(특정한 이벤트를 통해서 결과를 받게된다)
		[소켓통신 프로그램밍] 위 내용도 처리 + 특정 JS, 이벤트 하지 않더라도, 서버에서 데이터 전송해서
		그 데이터를 받아서 메시지, 정보를 처리하는 경우.
			EX) 특정한 클라이언트 메시지를 보내면, 서버에 접속한 모든 클라이언트에 PUSH방식으로 메서지를
			전달(소켙 통시)하고, 각 클라이언트들은 메시지 이벤트 없이도 실시간으로 받게 처리됨.
			  채팅, 메시지 알람..
	
	3) 채팅 프로그램의 프로세스
		특정 클라이언트가 접속을 하면, 웹 서버에 소켙서버 객체(handler)에서 접속한 클라이언트의 socketsession(소켙을 통해 접속했다는 정보)
		를 누적시킨다. 접속된 클라이언트 중에 한명에 메시지를 보내면 handler 메서지 받는 메서드를 호출해서 그 메시지 접속한 모든 클라이언트에
		반복을 돌면서 전송을 한다. 메시지를 전송하면 이와 함께 연결된 각 클라이언트에 함수(메시지를 받는 함수에 매개변수를 통해서)에 메시지를
		받아서, 화면에서 메시지를 출력한곳(textarea)에  출력 처리한다. 다시 접속 종료 버튼틀을 클릭하면, handler에 있는 접속종료 메서드를
		호출하고, 대상 클라이언트가 삭제되어 해당 클라이언트에게는 더 이상 메시지를 전달되지 않게 처리가 된다.
		
		
2. 환경 설정 및 의존성 추가
	1) pom.xml 의존성 추가.
		spring-boot-starter-websocket
		
		
3. 백엔트 개발
	1) WebSocket 핸들러 클래스
		- 서버에서 클라이언트와의 WebSocket 통신을 관리하는 핵심 클래스
		  TextWebSocketHandler개체 상속기반 설정
		- 필드 : Set<WebSocketSession>을 통해서 접속한 사용자들의 세션을 저장
		- 메서드 :
			연결이 성공적으로 이루어졌을 때 설정하는 메서드 : afterConnectionEstablished()
			메시지를 전송할 때 호출되는 메서드 : handleTextMessage()
			연결이 종료되었을 때 호출되는 메서드 : afterConnectionClosed()
			에러 발생 시 호출되는 메서드 :  handleTransportError	
	2) WebSocket 설정 Config 클래스 설정
		WebSocketConfig implements WebSocketConfigurer
4. 프런트앤드 개발(jsp/javascript)
	1) 소켓통신 객체 생성
		let socket = new WebSocket("ws:localhost:5050/chat");
	2) 접속시 처리 - 위 백앤드에 afterConnectionEstablished()메서드를 호출 처리한다.
		socket.onopen=function(){}
	3) 메시지 받기 - 위 백앤드에	handleTextMessage()메서드와 연동이 된다.
		socket.onmessage=function(){}		
	4) 메시지 전송 - 위 백앤드에 handleTextMessage()메서드와 연동(안에 각 클라이언트에 메시지 전송 처리)이 된다.
		socket.send("전송할 메시지 내용")
	5) 연결 끊기(메시지 전송 중지) - 위 백앤드에 afterConnectionClosed() 연동
		socket.close()		
5. 개발 순서
	1) pom.xml을 통해 lib 설정 컨테이너에 할당
	2) WebHandler.java 클래스 설정 (실제 접속/메시지전송 처리해주는 객체)	
	3) WebSocketConfig.java 클래스 설정.. 해당 클래스를 통해서 핸들러 클래스 설정 및 client에서 호출시 주소 설정

	4) application.properties 위에서 설정되 웹소켓서버 주소를 설언(front단에서 backend단에서 호출할 수 있게 처리)
		socketServer=ws:localhost:5050/chat
	5) ChattingController.java view단 화면을 호출하는 controller	
	6) chatting.jsp  : 구체적인 화면을 통해서 메시지를 전송하고 전달받는 처리하는 view 구현
		
			
		
		
		