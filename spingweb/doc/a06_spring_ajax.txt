# 스프링부트에서 처리하는 ajax
1. 개요 : ajax는 Asynchronous Javascript and XML의 약자로, 웹 페이지에서 비동기적으로
	서버와 데이터를 교환할 수 있게 해주는 기술입니다. 이를 통해서 페이지 새로고침 없이 데이터를
	로드하거나 서버에 데이터를 전송할 수 있습니다.
2. jquery ajax 기본형식 및 주요 속성
	1) jquery ajax 기본형식
		$.ajax({
			url:"ajaxEmpList",
			type:"post",
			data:{ename:$("[name=ename]".val(), job:$("[name=job]").val()},
			dataType:"json",
			success:function(empList){
				...
			},
			error:function(err){
				console.log(err)
			}
		})
	2) 자바(백앤드단)설정 내용
		- MvcConfiguration 설정파일에
			json 데이터 처리 view 설정.
		- controller
			public ResponseEntity<?> empListAjax(Emp sch, sch){
				return Response.ok(serivce.empList(sch));
			}
			
# ajax 처리 단계별 연습..
1. 기본형식 처리 및 javascript로 요청시 처리되는 내용
	1) 모델값 받기
		- 단일 데이터 - 문자열, 숫자형
		- 배열 데이터
		- 객체형 데이터
		
	2) 요청값 처리하기
		- 단일
		- 객체형 데이터
		- get방식
		- post방식
		
	3) 요청값 + 모델 데이터 처리
				
		
	4) 요청값 + DB 연동 모델 데이터 처리
	
	
# 요청 type에 대한 내용
1. GET 요청(화면전환, ajax)
	1) get 요청은 서버에 있는 데이터를 가져오고 싶을 때 사용하는 요청 예를들어 우리가 웹사이트에서
	정보를 볼 때, 서버에 요청을 보내어 정보를 가져오는 것처럼 처리된다.
	2) 웹사이트에서 내 친구 리스트를 볼 때, 친구 목록을 서버에서 가져오는 요청알 말한다.
	3) GET은 내가 알고 싶은 정보를 서버에서 가져오는 것
	4) $.ajax({
		type:"GET",
		url:"/api/friends",
		success:function(friends){
			console.log(friends)
		}
	   })		
2. POST 요청(화면전환, ajax)
	1) post 요청은 서버에 새로운 데이터를 보내고 싶을 때, 사용하는 요청. 새로운 친구를 추가하거나 글을 작성할 때 사용한다
	2) 웹사이트에서 새로운 친구를 추가할 때, 친구 이름을 서버에 보내면 서버가 그 친구를 친구 목록에 추가해주는 것을 말한다.
	3) 새로운 정보를 서버에 보내서, 그 정보를 저장하거나 추가하는 것
	4) $.ajax({
		type:"POST",
		 url:"api/friend",
		 data:$("form").serialize(),  // 등록할 내용을 form 요소안에 name, value로 설정
		 success:function(response){  // 등록 후, 결과를 받아서 표현..
		 	console.log(response)
		 }
3. PUT 요청(ajax만 지원)
	1) put 요청은 서버에 이미 있는 데이터를 업데이터(수정)하고 싶을 때 사용하는 요청입니다. 내가 입력한 친구의 이름을 
		바꾸고 싶을 때 사용
	2) 웹사이트에서 친구의 이름을 바꿀 때, 친구 정보를 서버에 보내서 이름을 수정합니다.
	3) put은 기존에 있던 정보를 수정하는 것
	4) $.ajax({
		type:"PUT",
		url:"api/friends", // 친구의 정보를 수정
		data:$("form").serialize() // 수정할 정보 전송
		success:function(msg){
			console.log(msg)
		}
		})		 
		})   
4. DELETE(ajax만 지원)
	1) delete 요청은 서버에 있는 데이터를 삭제하고 싶을 때 사용하는 요청. 예를 들어, 친구 목록에서 한 친구를 삭제할 때 사용
	2) 웹사이트에서 친구 목록에서 한 친구를 지울 때, 그 친구를 서버에서 삭제하는 요청
	3) DELETE는 서버에 잇는 정보를 지우는 것
	4) $.ajax({
		type:"DELETE",
		url:"api/friendsDel"
		data:"delId="+$("[name=id]").val()
		success:function(msg){
			alert(msg)
		}	
	   })
			 
# data처리하는 ajax
1. SELECT 주로 get방식

2. INSERT 주로 post방식

3. UPDATE 주로 put 방식

4. DELETE 주로 delete 방식



			
			
			
			
			
		