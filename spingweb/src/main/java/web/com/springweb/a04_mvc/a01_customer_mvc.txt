# 고객정보처리 MVC - CRUD 처리.
1. 개요
	CRM에서 고객정보를 관리하는 프로그램으로 전체리스트, 등록, 상세조회, 수정, 삭제처리를 한다.
2. 파일 및 내용
	main\java\web\com\springweb\a04_mvc
	
	BACKEND단 : 요청값을 VO/DTO로 받아서 조회(WHERE), 등록/수정/삭제(매개변수로 전달)
	            모델데이터 db가져와서 설정
	A01_CustomerController.java  [중재자-요청값을 SERVICE단 전달, SERVICE받은데이터를 모델설정, VIEW단을 호출]
	A01_CustomerSerivce.java [알고리즘이나 비지니스 처리를 한다. 전체검색시 NULL ==> "", 키워드검색 % 추가, 페이지처리시 알고리즘]
	A01_CustomerDao.java [매개변수로 조건/입력/수정/삭제 db처리, 리턴값으로 핵심 모델데이터를 전달]
	Customer.java [VO-value object, DTO-data transfer object 역할로 요청값을 db에 전달하거나 데이터룰 자바로 만들어서 화면에 출력`]
	
	VIEW단 : 요청값전달(form), 모델데이터 표현(출력)
	webapp\WEB-INF\views\a04_mvc
	a01_customerList.jsp
	a02_customerInsert.jsp
	a03_customerDetail.jsp	
3. DB 	
	customers 테이블, customer_seq 시퀀스


# 전체 리스트 처리	
1. 프로세스흐름
	1) 브라우저에 url  http://localhost:5050/customerList ==> controller에 있는 특정 기능 메서드 호출
	
	2) controller안에 @RequstMapping("customerList") 호출,  public customerList(Customer sch, Model d)
		- url을 통해서 특정 view(jsp)를 호출
	3) d.addAttribute("customerList", service.getCustomerList(sch)); 
	4) service단애 getCustomerList를 호출 하면서 Customer sch 받은 내용으로 null여부를 확인해서 null, 공백을 처리.
		if(sch.getCustomName()==null) sch.setCustomName("")
		if(sch.getCustomAddress()==null) sch.setCustomAddress("")
		sch.sch.setCustomName("%"+sch.getCustomName()+"%")
		sch.sch.setCustomAddress("%"+sch.getCustomAddress()+"%")
	5) dao 호출 해서 검색된 내용을  List<Customer>로 리턴하여 service ==> controller단에 넘기면
		SELECT * FROM customers WHERE customer_name  LIKE #{customeName} AND customer_address LIKE #{customAddress};
		List<Customer> getCustomerList(Customer sch);
	6) 	d.addAttribute("customerList", service.getCustomerList(sch));  모델 데이터 설정하고.
	7) view단 호출 a01_customerList.jsp
	8) view단에서 는 customerList 모델 값을
		<c:forEach var="cus" items="${customerList}">
			<tr>
					<td>${cus.customerId}</td>
					<td>${cus.customerName}</td>
	9) <form>
		<inpu name="customerName"									
		<inpu name="customerAddress"	
		통해서 controller를 요청하면 해당 내용을 키워드 검색해서 처리된다.

2. 개발 순서
	1) 초기화면 구현
		controller 메서드 추가 url customerList, view a01_customerList.jsp
		http://localhost:5050/customerList( 고객리스트 )(
	2) dao
		sql 
		입력
		리턴
		객체(dto/vo)
		메서드 선언
	3) service 단
		dao단 autowirie
		요청값: null ==> "", 키워드 "%"+메서드명+"%"
	4) controller 단
		요청 객체 매개변수로 선언, Model 선언
		service단 autowire
		
		getCustomerList(Customer sch, Model d){
			d.addAttributer("cuList", service.getCustomerList(sch));
			return "view단 호출"
		}	
	5) 화면단(view jsp)
		검색할 요청값 처리..
		form 
			name="customerName" 
			name="customerAddress"	
		
		검색된 내용 리스트
		<c:forEach var="cu" items="${cuList}">
			<tr><td>${cu.customerId}</td><td>${cu.customerName}</td>
				<td>${cu.customer}</td><td>${cu.customerId}</td>
# 등록처리
1. 프로세스 흐름
	1) 리스트 화면(메인화면)에서 조회버튼 옆에 있는 등록 버튼을 클릭시, 등록 폼화면으로 이동한다.
		<button type="button" id="regBtn">
		$("#regBtn").click(function(){
			location.href="customerInsert"
		})
		@GetMapping("customerInsert")  // 초기 화면을 로딩처리 처리되는 요청값..
		@PostMapping("customerInsert") // 실제 입력할 데이터를 전송하여 DB 입력 처리..
		
		<form method="post"> ==> 데이터가 전송이 가능하게 처리된다.
		
	2) 등록할 내용(고객명, 이메일, 핸드폰, 주소)을 입력하고, 등록 버튼을 클릭시, 등록 요청 controller단에
		데이터를 객체(모델어트리뷰터- Customer객체)로 전달한다.
		<input name="customerName" value=""
		<input name="customerEmail" value=""
		&customerName=홍길동&customerEmail=zzzz@hanmail.net
		==> post방식의 메서드  Customer ins 객체 메서드 setCustomerName(String ...)
												   setCustomerEmail(...)
		customerInsertPost(Customer ins, Model d)  아래 Customer 객체에 데이터를
		요청값으로 등록하여 실제 service.insertCustomer(ins) service ==> dao로
		전송되어 데이터를 등록 처리한다.										   
		@PostMapping("customerInsert")
		public String customerInsertPost(Customer ins, Model d) {
		d.addAttribute("msg", service.insertCustomer(ins));	"등록성공"/"등록실패" 리턴 처리..
	
		@Insert("INSERT INTO customers VALUES (customer_seq.nextval, "
					+ "#{customerName}, #{customerEmail},#{customerPhone}, #{customerAddress})")
		int insertCustomer(Customer ins);
		
		등록되면 등록된 건수를 int로 리턴해준다. dao ==> service (0이상일 때 등록성공/등록실패로 문자열로 리턴 
												 public String insertCustomer(Customer ins)
												 	return dao.insertCustomer(int)>0?"등록성공":"등록실패"	
		view(jsp) javascript
		let msg = "${msg}"
		if(msg!=""){   // 입력처리한 결과..
			if(confirm(msg+"\t"+"메인페이지이동하시겠습니까?"){
				location.href="customerList"
			}
		}										 	
												 	
												 	
		
	3) 위 입력된 데이터를 가지고 있는 Customer객체는 service/dao단을 거져서, 실제 insert sql 구문에 의해서
		데이터를 등록하고,
	4) 등록건수에 따라, 리턴값을 전달하여 service단에서는 1이상 여부에 따라 등록성공/등록실패를 controller의
		모델 데이터로 전달한다.
	5) 등록화면이 다시 호출 되면서, javascript로 받은 모델 데이터로 등록성경/실패 여부를 msg창으로 로딩후,
	   메인화면 이동 여부를 확인 후, 메인화면에서 등록된 내용을 확인 할 수 있다.
2. 개발 순서
	1) 리스트 화면에서 등록 버튼 클릭시, 등록 화면으로 이동 처리(get방식으로 이동)
		<button id="regBtn">
		$("#regBtn").click(function(){
			location.href="/insertCustomer"  get방식으로 호출
		})
	2) 등록화면에 form로 method(post) 등록에 필요한 name="customerName"  name="customerPhone"
		name="customerEmail" name="customerAddress" 데이터를 등록하여 처리할 수 있도록 한다.
	3) submit클리식, post방식으로 등록 요청값 Customer객체로 할당하여 service, dao,
	-----------------------------------------------
	4) dao ==> service ==> controller
		dao에서 리턴된 int값으로 service(int ==> 등록성공과 등록실패 구분해서 String 리턴),
		controller 모델 데이터를 통해서 위 내용 처리여부를 모델데이터로 설정한다.
		serice dao(Autowired), controller service(Autowired)
		
	-------------------------------------------------		
	7) view단(jsp) -  javascript 결과 내용을 출력..	
		
3. 점검해야할 핵심 기술
	1) get 방식 페이지 호출
		http://localhost:5050/insertCustomer
		@GetMapping("insertCustomer")
		public String insertCustomer01(){
			return "........ insertCustomer.jsp"
		}
		
		- url에 입력시 : http://localhost:5050/insertCustomer
		- javascript 클리시
			$("#regBtn").click(function(){
				location.href="http://localhost:5050/insertCustomer";
			})
		- form get방식..
			<form method="get" action="insertCustomer"> method를 선언하지 않을 때도..
				<input type="submit"> ==> 클릭시..
					
			<form > 현재 jsp페이지가 insertCustomer에 의해서 호출되었을 때는 생략가능..
				<input type="submit"> ==> 클릭시..		
	2) post방식 페이지 호출.
		@PostMapping("insertCustomer")
		public String insertCustomer01(){
			return "........ insertCustomer.jsp"
		}
		- url 호출 (x)
		- javascript 클릭 	
			location.href="http://localhost:5050/insertCustomer";(x)
			$("#regBtn").click(function(){
				$("form").attr("method","post");
				$("form").submit()
			}) (O)							
		- <form method="post" action="inserCustomer">
	3) get/post방식 페이지 호출..
		@RequestMapping("insertCustomer")
		public String insertCustomer01(){
			return "........ insertCustomer.jsp"
		}			
	4) 데이터베이스 처리
		1) sql 문 작성
			INSERT INTO CUSTOMERS VALUES(CUSTOMER_SEQ.NEXTVAL, ..... );
		2) 입력  .... ==> DTO ==> 매개변수 선언
		   리턴값 int		
		3) dao
			int insertCustomers(Customers ins);
	5) service단..
		1) dao autowiring
		2) public String inserCustomers(Customers ins){
				return dao.inserCustomers(ins)>0?"등록성공":"등록실패";
		   }	
	6) controller
		1) service autowiring
		2) d.addAttribute("msg", serivce.insertCustomers(ins));
	7) view(jsp)
		var msg = "${msg}"
		if(msg!=""){
			if(!confirm(msg+"\n메인리스트로 이동하시겠습니까?")){
				location.href="customerList"
			}
		}	   
		   
		   
# 구매정보 처리
1. 구매리스트
	1) sql
		SELECT * FROM PURCHASES WHERE PROD_NAME LIKE '%%' AND PURCHASE_AMOUNT BETWEEN 30000 AND 1200000;
		입력 : 
		출력 : 
	2) dto/vo
	3) dao
	--------------------------------
	4) service
	5) controller
	6) jsp
	
# 고객 정보 상세 처리
1. 요구사항 정의 및 프로세스 
	1) 고객 리스트화면에서 특정 고객(행)단위를 더블 클릭시, 상세화면이 로딩되어,
		해당 고객정보를 수정/삭제할 수 있는 버튼과 form형식(입력형식)과 함께 데이터가 표현된다.
2. 개발 순서
	1) 기본 상세정보 출력(form) view단 만들기(화면UI) - a03_customerDetail.jsp
	2) controller에서 요청키로 해당 view화면이 호출되게 선언
	3) list 화면에서 클릭시, 해당 화면으로 처리되게 dblclick로 요청값과 함께, 상세 controller 메서드 호출..
		<tr ondblclick = "goDetail(${cu.customerId})"   tr 행단위로 더블 클릭시, 전달할 함수를 지정..
		
		function goDetail(customerId){
			location.href="customerDetail?customerId="+customerId
		}
	
	
	ex) 구매리스트에서 구매상세로 요청값을 전달하고, 화면이 로딩되는데까지 처리하세요..
		1) a06_purchaseDetail.jsp 등록 가능한 화면을 전환.. a05_purchaseInsert.jsp참고
		2) controller단에서 연결 처리 확인
		3) a04_purchaseList.jsp 리스트 단위로 더블 클릭으로 controller에 상세화면에
			요청키 전달(customerId)
	
	
	
	4) 상세 dao 처리
		sql 작성
		메서드 선언
		service 단 처리
		controller에 상세 요청시 처리할 내용에 model데이터로 설정..
	5) jsp로 controller단에서 온 단일 객체로 value="${c.customerId}" 형태로 항목별로 처리..


# 고객 정보 상세[수정] 처리		
1. 프로세스
	1) 상세조회화면에서, 변경할 데이터를 수정한 후, 수정 버튼을 클릭시, 해당 수정 버튼에 따라 처리할 
		정의된 controller단의 요청 메서드를 호출하여, 요청값으로 현재 입력되는 form의 데이터를 객체(Customer)에게
		전달한다. 이렇게 전달된 객체는 service, dao단에 전달되어 sql문(update 구분에 의해서 수정 처리를 한다)
	2) dao에서 수정된 결과(0또는 1이상)값을 int로 리턴하면 service단에서 3항연산자에 의해서 수정 성공/실패를 문자열로
		리턴하고, 다시 controller에서는 모델데이터를 d.addAttribute("msg", service.updateCustomer(ins))
		에 의해서 화면단(jsp)에 문자열로 전달한다. 그리고, 다시 상세정보에 의해, 다시 로딩 하여, 모델 데이터로 가지고 
		있다가 화면으로 새로 수정된 데이터를 전달한다. d.addAttribute("cu", service.getCustomer(ins.getCutomerId());
	3) msg로 전달된 데이터는 javascript에 의해서 받은 데이터를 
		let msg = "${msg}"
		if(msg!=''){
			if(confirm(msg+"\n리스트 화면으로 이동하시겠습니까?"){
				location.href="customerList"
			}
		}
		그리고, form 하위의 value값으로 수정된 데이터를 다시 출력하게 된다. value="${cu.customerName}"....
2. 개발순서
	1) dao
		sql 메서드 선언
	2) service  수정성공/수정 실패
	3) controller
		msg
		상세내용을 가져오는 모델 처리..
	4) view단
		수정 버튼 클릭시, $("form").attr("action","updateCutomer") 선언  $("form").submit()
					 ==> 상세화면에서 수정과 삭제 두가지 프로세스가 다 처리되게에 구분하여 처리한다..

	
# 고객 정보 상세[삭제] 처리	

		
		
				
		
		
		
		
		
		
		
		
					
		
		




	
	
	